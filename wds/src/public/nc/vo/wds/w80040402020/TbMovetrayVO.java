  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.wds.w80040402020;
   	
	import java.util.ArrayList;
	import nc.vo.pub.*;
	import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2010-12-31
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class TbMovetrayVO extends SuperVO {
           
             public UFDate dbilldate;
             public String makeman_pk;
             public String mty_customize;
             public String novte;
             public Integer dr;
             public String pk_invbasdoc;
             public String intray_pk;
             public String outtray_pk;
             public String dbilltime;
             public UFDouble mty_stocktonnage;
             public UFDateTime ts;
             public UFDouble mty_stockpieces;
             public String pk_customize;
             public String mty_pk;
            
             public static final String  DBILLDATE="dbilldate";   
             public static final String  MAKEMAN_PK="makeman_pk";   
             public static final String  MTY_CUSTOMIZE="mty_customize";   
             public static final String  NOVTE="novte";   
             public static final String  DR="dr";   
             public static final String  PK_INVBASDOC="pk_invbasdoc";   
             public static final String  INTRAY_PK="intray_pk";   
             public static final String  OUTTRAY_PK="outtray_pk";   
             public static final String  DBILLTIME="dbilltime";   
             public static final String  MTY_STOCKTONNAGE="mty_stocktonnage";   
             public static final String  TS="ts";   
             public static final String  MTY_STOCKPIECES="mty_stockpieces";   
             public static final String  PK_CUSTOMIZE="pk_customize";   
             public static final String  MTY_PK="mty_pk";   
      
    
        /**
	   * 属性dbilldate的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return UFDate
	   */
	 public UFDate getDbilldate() {
		 return dbilldate;
	  }   
	  
     /**
	   * 属性dbilldate的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newDbilldate UFDate
	   */
	public void setDbilldate(UFDate newDbilldate) {
		
		dbilldate = newDbilldate;
	 } 	  
       
        /**
	   * 属性makeman_pk的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getMakeman_pk() {
		 return makeman_pk;
	  }   
	  
     /**
	   * 属性makeman_pk的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newMakeman_pk String
	   */
	public void setMakeman_pk(String newMakeman_pk) {
		
		makeman_pk = newMakeman_pk;
	 } 	  
       
        /**
	   * 属性mty_customize的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getMty_customize() {
		 return mty_customize;
	  }   
	  
     /**
	   * 属性mty_customize的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newMty_customize String
	   */
	public void setMty_customize(String newMty_customize) {
		
		mty_customize = newMty_customize;
	 } 	  
       
        /**
	   * 属性novte的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getNovte() {
		 return novte;
	  }   
	  
     /**
	   * 属性novte的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newNovte String
	   */
	public void setNovte(String newNovte) {
		
		novte = newNovte;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性pk_invbasdoc的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getPk_invbasdoc() {
		 return pk_invbasdoc;
	  }   
	  
     /**
	   * 属性pk_invbasdoc的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newPk_invbasdoc String
	   */
	public void setPk_invbasdoc(String newPk_invbasdoc) {
		
		pk_invbasdoc = newPk_invbasdoc;
	 } 	  
       
        /**
	   * 属性intray_pk的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getIntray_pk() {
		 return intray_pk;
	  }   
	  
     /**
	   * 属性intray_pk的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newIntray_pk String
	   */
	public void setIntray_pk(String newIntray_pk) {
		
		intray_pk = newIntray_pk;
	 } 	  
       
        /**
	   * 属性outtray_pk的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getOuttray_pk() {
		 return outtray_pk;
	  }   
	  
     /**
	   * 属性outtray_pk的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newOuttray_pk String
	   */
	public void setOuttray_pk(String newOuttray_pk) {
		
		outtray_pk = newOuttray_pk;
	 } 	  
       
        /**
	   * 属性dbilltime的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return UFDateTime
	   */
	 public String getDbilltime() {
		 return dbilltime;
	  }   
	  
     /**
	   * 属性dbilltime的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newDbilltime UFDateTime
	   */
	public void setDbilltime(String newDbilltime) {
		
		dbilltime = newDbilltime;
	 } 	  
       
        /**
	   * 属性mty_stocktonnage的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return UFDouble
	   */
	 public UFDouble getMty_stocktonnage() {
		 return mty_stocktonnage;
	  }   
	  
     /**
	   * 属性mty_stocktonnage的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newMty_stocktonnage UFDouble
	   */
	public void setMty_stocktonnage(UFDouble newMty_stocktonnage) {
		
		mty_stocktonnage = newMty_stocktonnage;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return UFDateTime
	   */
	 public UFDateTime getTs() {
		 return ts;
	  }   
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newTs UFDateTime
	   */
	public void setTs(UFDateTime newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性mty_stockpieces的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return UFDouble
	   */
	 public UFDouble getMty_stockpieces() {
		 return mty_stockpieces;
	  }   
	  
     /**
	   * 属性mty_stockpieces的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newMty_stockpieces UFDouble
	   */
	public void setMty_stockpieces(UFDouble newMty_stockpieces) {
		
		mty_stockpieces = newMty_stockpieces;
	 } 	  
       
        /**
	   * 属性pk_customize的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getPk_customize() {
		 return pk_customize;
	  }   
	  
     /**
	   * 属性pk_customize的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newPk_customize String
	   */
	public void setPk_customize(String newPk_customize) {
		
		pk_customize = newPk_customize;
	 } 	  
       
        /**
	   * 属性mty_pk的Getter方法.
	   *
	   * 创建日期:2010-12-31
	   * @return String
	   */
	 public String getMty_pk() {
		 return mty_pk;
	  }   
	  
     /**
	   * 属性mty_pk的Setter方法.
	   *
	   * 创建日期:2010-12-31
	   * @param newMty_pk String
	   */
	public void setMty_pk(String newMty_pk) {
		
		mty_pk = newMty_pk;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2010-12-31
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (mty_pk == null) {
			errFields.add(new String("mty_pk"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2010-12-31
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 	    return null;
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2010-12-31
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "mty_pk";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2010-12-31
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "tb_movetray";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2010-12-31
	  */
	public TbMovetrayVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2010-12-31
	 * @param newMty_pk 主键值
	 */
	 public TbMovetrayVO(String newMty_pk) {
		
		// 为主键字段赋值:
		 mty_pk = newMty_pk;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-12-31
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return mty_pk;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-12-31
	  * @param newMty_pk  String    
	  */
	 public void setPrimaryKey(String newMty_pk) {
				
				mty_pk = newMty_pk; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2010-12-31
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "tb_movetray"; 
				
	 } 
} 
