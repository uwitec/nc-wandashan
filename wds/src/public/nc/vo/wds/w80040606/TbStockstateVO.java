/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
\***************************************************************/
package nc.vo.wds.w80040606;

import java.util.ArrayList;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * <b> 在此处简要描述此类的功能 </b>
 * 
 * <p>
 * 在此处添加此类的描述信息
 * </p>
 * 
 * 创建日期:2010-7-16
 * 
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
public class TbStockstateVO extends SuperVO {

	public String ss_custom2;
	public String ss_remark;
	public String ss_custom6;
	public String ss_custom3;
	public String ss_pk;
	public String ss_state;
	public UFDateTime ts;
	public String ss_custom1;
	public String ss_custom5;
	public Integer dr;
	public String ss_custom4;
	public Integer ss_isout;

	public static final String SS_ISOUT = "ss_isout";
	public static final String SS_CUSTOM2 = "ss_custom2";
	public static final String SS_REMARK = "ss_remark";
	public static final String SS_CUSTOM6 = "ss_custom6";
	public static final String SS_CUSTOM3 = "ss_custom3";
	public static final String SS_PK = "ss_pk";
	public static final String SS_STATE = "ss_state";
	public static final String TS = "ts";
	public static final String SS_CUSTOM1 = "ss_custom1";
	public static final String SS_CUSTOM5 = "ss_custom5";
	public static final String DR = "dr";
	public static final String SS_CUSTOM4 = "ss_custom4";

	/**
	 * 属性ss_custom2的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom2() {
		return ss_custom2;
	}

	/**
	 * 属性ss_custom2的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom2
	 *            String
	 */
	public void setSs_custom2(String newSs_custom2) {

		ss_custom2 = newSs_custom2;
	}

	/**
	 * 属性ss_remark的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_remark() {
		return ss_remark;
	}

	/**
	 * 属性ss_remark的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_remark
	 *            String
	 */
	public void setSs_remark(String newSs_remark) {

		ss_remark = newSs_remark;
	}

	/**
	 * 属性ss_custom6的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom6() {
		return ss_custom6;
	}

	/**
	 * 属性ss_custom6的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom6
	 *            String
	 */
	public void setSs_custom6(String newSs_custom6) {

		ss_custom6 = newSs_custom6;
	}

	/**
	 * 属性ss_custom3的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom3() {
		return ss_custom3;
	}

	/**
	 * 属性ss_custom3的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom3
	 *            String
	 */
	public void setSs_custom3(String newSs_custom3) {

		ss_custom3 = newSs_custom3;
	}

	/**
	 * 属性ss_pk的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_pk() {
		return ss_pk;
	}

	/**
	 * 属性ss_pk的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_pk
	 *            String
	 */
	public void setSs_pk(String newSs_pk) {

		ss_pk = newSs_pk;
	}

	/**
	 * 属性ss_state的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_state() {
		return ss_state;
	}

	/**
	 * 属性ss_state的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_state
	 *            String
	 */
	public void setSs_state(String newSs_state) {

		ss_state = newSs_state;
	}

	/**
	 * 属性ts的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return UFDateTime
	 */
	public UFDateTime getTs() {
		return ts;
	}

	/**
	 * 属性ts的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newTs
	 *            UFDateTime
	 */
	public void setTs(UFDateTime newTs) {

		ts = newTs;
	}

	/**
	 * 属性ss_custom1的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom1() {
		return ss_custom1;
	}

	/**
	 * 属性ss_custom1的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom1
	 *            String
	 */
	public void setSs_custom1(String newSs_custom1) {

		ss_custom1 = newSs_custom1;
	}

	/**
	 * 属性ss_custom5的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom5() {
		return ss_custom5;
	}

	/**
	 * 属性ss_custom5的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom5
	 *            String
	 */
	public void setSs_custom5(String newSs_custom5) {

		ss_custom5 = newSs_custom5;
	}

	/**
	 * 属性dr的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return Integer
	 */
	public Integer getDr() {
		return dr;
	}

	/**
	 * 属性dr的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newDr
	 *            Integer
	 */
	public void setDr(Integer newDr) {

		dr = newDr;
	}

	/**
	 * 属性ss_custom4的Getter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getSs_custom4() {
		return ss_custom4;
	}

	/**
	 * 属性ss_custom4的Setter方法.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_custom4
	 *            String
	 */
	public void setSs_custom4(String newSs_custom4) {

		ss_custom4 = newSs_custom4;
	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @exception nc.vo.pub.ValidationException
	 *                如果验证失败,抛出 ValidationException,对错误进行解释.
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null

		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:

		if (ss_pk == null) {
			errFields.add(new String("ss_pk"));
		}

		StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for (int i = 1; i < temp.length; i++) {
				message.append(",");
				message.append(temp[i]);
			}
			throw new NullFieldException(message.toString());
		}
	}

	/**
	 * <p>
	 * 取得父VO主键字段.
	 * <p>
	 * 创建日期:2010-7-16
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {

		return null;

	}

	/**
	 * <p>
	 * 取得表主键.
	 * <p>
	 * 创建日期:2010-7-16
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "ss_pk";
	}

	/**
	 * <p>
	 * 返回表名称.
	 * <p>
	 * 创建日期:2010-7-16
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {

		return "tb_stockstate";
	}

	/**
	 * 按照默认方式创建构造子.
	 * 
	 * 创建日期:2010-7-16
	 */
	public TbStockstateVO() {

		super();
	}

	/**
	 * 使用主键进行初始化的构造子.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_pk
	 *            主键值
	 */
	public TbStockstateVO(String newSs_pk) {

		// 为主键字段赋值:
		ss_pk = newSs_pk;

	}

	/**
	 * 返回对象标识,用来唯一定位对象.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return String
	 */
	public String getPrimaryKey() {

		return ss_pk;

	}

	/**
	 * 设置对象标识,用来唯一定位对象.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @param newSs_pk
	 *            String
	 */
	public void setPrimaryKey(String newSs_pk) {

		ss_pk = newSs_pk;

	}

	/**
	 * 返回数值对象的显示名称.
	 * 
	 * 创建日期:2010-7-16
	 * 
	 * @return java.lang.String 返回数值对象的显示名称.
	 */
	public String getEntityName() {

		return "tb_stockstate";

	}

	public Integer getSs_isout() {
		return ss_isout;
	}

	public void setSs_isout(Integer ss_isout) {
		this.ss_isout = ss_isout;
	}
}
