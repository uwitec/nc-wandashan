/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
\***************************************************************/
package nc.vo.wds.w80021002;

import java.util.ArrayList;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2010-6-28
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
public class TbHandlingfeepriceVO extends SuperVO {

	public UFDouble hfp_boxt;
	public UFDouble hfp_packpricet;
	public String hfp_pk;
	public String hfp_customize8;
	public String hfp_customize5;
	public UFDouble hfp_kgbox;
	public UFDouble htp_unboxpricet;
	public String hfp_varietycode;
	public String hfp_region;
	public String hfp_customize7;
	public String hfp_customize1;
	public Integer dr;
	public String vnote;
	public String hfp_customize6;
	public String hfp_specification;
	public String hfp_customize2;
	public String hfp_customize3;
	public String hfp_specificationcode;
	public UFDouble htp_unboxpricep;
	public UFTime ts;
	public String hfp_variety;
	public String hfp_customize4;
	public String hfp_customize9;
	public UFDouble hfp_packpricep;
	public String pk_stordoc;//分仓主键

	public static final String PK_STORDOC="pk_stordoc";
	public static final String HFP_BOXT = "hfp_boxt";
	public static final String HFP_PACKPRICET = "hfp_packpricet";
	public static final String HFP_PK = "hfp_pk";
	public static final String HFP_CUSTOMIZE8 = "hfp_customize8";
	public static final String HFP_CUSTOMIZE5 = "hfp_customize5";
	public static final String HFP_KGBOX = "hfp_kgbox";
	public static final String HTP_UNBOXPRICET = "htp_unboxpricet";
	public static final String HFP_VARIETYCODE = "hfp_varietycode";
	public static final String HFP_REGION = "hfp_region";
	public static final String HFP_CUSTOMIZE7 = "hfp_customize7";
	public static final String HFP_CUSTOMIZE1 = "hfp_customize1";
	public static final String DR = "dr";
	public static final String VNOTE = "vnote";
	public static final String HFP_CUSTOMIZE6 = "hfp_customize6";
	public static final String HFP_SPECIFICATION = "hfp_specification";
	public static final String HFP_CUSTOMIZE2 = "hfp_customize2";
	public static final String HFP_CUSTOMIZE3 = "hfp_customize3";
	public static final String HFP_SPECIFICATIONCODE = "hfp_specificationcode";
	public static final String HTP_UNBOXPRICEP = "htp_unboxpricep";
	public static final String TS = "ts";
	public static final String HFP_VARIETY = "hfp_variety";
	public static final String HFP_CUSTOMIZE4 = "hfp_customize4";
	public static final String HFP_CUSTOMIZE9 = "hfp_customize9";
	public static final String HFP_PACKPRICEP = "hfp_packpricep";

	/**
	 * 属性hfp_boxt的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHfp_boxt() {
		return hfp_boxt;
	}

	/**
	 * 属性hfp_boxt的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_boxt UFDouble
	 */
	public void setHfp_boxt(UFDouble newHfp_boxt) {

		hfp_boxt = newHfp_boxt;
	}

	/**
	 * 属性hfp_packpricet的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHfp_packpricet() {
		return hfp_packpricet;
	}

	/**
	 * 属性hfp_packpricet的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_packpricet UFDouble
	 */
	public void setHfp_packpricet(UFDouble newHfp_packpricet) {

		hfp_packpricet = newHfp_packpricet;
	}

	/**
	 * 属性hfp_pk的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_pk() {
		return hfp_pk;
	}

	/**
	 * 属性hfp_pk的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_pk String
	 */
	public void setHfp_pk(String newHfp_pk) {

		hfp_pk = newHfp_pk;
	}

	/**
	 * 属性hfp_customize8的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize8() {
		return hfp_customize8;
	}

	/**
	 * 属性hfp_customize8的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize8 String
	 */
	public void setHfp_customize8(String newHfp_customize8) {

		hfp_customize8 = newHfp_customize8;
	}

	/**
	 * 属性hfp_customize5的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize5() {
		return hfp_customize5;
	}

	/**
	 * 属性hfp_customize5的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize5 String
	 */
	public void setHfp_customize5(String newHfp_customize5) {

		hfp_customize5 = newHfp_customize5;
	}

	/**
	 * 属性hfp_kgbox的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHfp_kgbox() {
		return hfp_kgbox;
	}

	/**
	 * 属性hfp_kgbox的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_kgbox UFDouble
	 */
	public void setHfp_kgbox(UFDouble newHfp_kgbox) {

		hfp_kgbox = newHfp_kgbox;
	}

	/**
	 * 属性htp_unboxpricet的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHtp_unboxpricet() {
		return htp_unboxpricet;
	}

	/**
	 * 属性htp_unboxpricet的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHtp_unboxpricet UFDouble
	 */
	public void setHtp_unboxpricet(UFDouble newHtp_unboxpricet) {

		htp_unboxpricet = newHtp_unboxpricet;
	}

	/**
	 * 属性hfp_varietycode的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_varietycode() {
		return hfp_varietycode;
	}

	/**
	 * 属性hfp_varietycode的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_varietycode String
	 */
	public void setHfp_varietycode(String newHfp_varietycode) {

		hfp_varietycode = newHfp_varietycode;
	}

	/**
	 * 属性hfp_region的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_region() {
		return hfp_region;
	}

	/**
	 * 属性hfp_region的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_region String
	 */
	public void setHfp_region(String newHfp_region) {

		hfp_region = newHfp_region;
	}

	/**
	 * 属性hfp_customize7的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize7() {
		return hfp_customize7;
	}

	/**
	 * 属性hfp_customize7的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize7 String
	 */
	public void setHfp_customize7(String newHfp_customize7) {

		hfp_customize7 = newHfp_customize7;
	}

	/**
	 * 属性hfp_customize1的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize1() {
		return hfp_customize1;
	}

	/**
	 * 属性hfp_customize1的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize1 String
	 */
	public void setHfp_customize1(String newHfp_customize1) {

		hfp_customize1 = newHfp_customize1;
	}

	/**
	 * 属性dr的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return Integer
	 */
	public Integer getDr() {
		return dr;
	}

	/**
	 * 属性dr的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newDr Integer
	 */
	public void setDr(Integer newDr) {

		dr = newDr;
	}

	/**
	 * 属性vnote的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getVnote() {
		return vnote;
	}

	/**
	 * 属性vnote的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newVnote String
	 */
	public void setVnote(String newVnote) {

		vnote = newVnote;
	}

	/**
	 * 属性hfp_customize6的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize6() {
		return hfp_customize6;
	}

	/**
	 * 属性hfp_customize6的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize6 String
	 */
	public void setHfp_customize6(String newHfp_customize6) {

		hfp_customize6 = newHfp_customize6;
	}

	/**
	 * 属性hfp_specification的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_specification() {
		return hfp_specification;
	}

	/**
	 * 属性hfp_specification的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_specification String
	 */
	public void setHfp_specification(String newHfp_specification) {

		hfp_specification = newHfp_specification;
	}

	/**
	 * 属性hfp_customize2的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize2() {
		return hfp_customize2;
	}

	/**
	 * 属性hfp_customize2的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize2 String
	 */
	public void setHfp_customize2(String newHfp_customize2) {

		hfp_customize2 = newHfp_customize2;
	}

	/**
	 * 属性hfp_customize3的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize3() {
		return hfp_customize3;
	}

	/**
	 * 属性hfp_customize3的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize3 String
	 */
	public void setHfp_customize3(String newHfp_customize3) {

		hfp_customize3 = newHfp_customize3;
	}

	/**
	 * 属性hfp_specificationcode的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_specificationcode() {
		return hfp_specificationcode;
	}

	/**
	 * 属性hfp_specificationcode的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_specificationcode String
	 */
	public void setHfp_specificationcode(String newHfp_specificationcode) {

		hfp_specificationcode = newHfp_specificationcode;
	}

	/**
	 * 属性htp_unboxpricep的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHtp_unboxpricep() {
		return htp_unboxpricep;
	}

	/**
	 * 属性htp_unboxpricep的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHtp_unboxpricep UFDouble
	 */
	public void setHtp_unboxpricep(UFDouble newHtp_unboxpricep) {

		htp_unboxpricep = newHtp_unboxpricep;
	}

	/**
	 * 属性ts的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDateTime
	 */
	public UFTime getTs() {
		return ts;
	}

	/**
	 * 属性ts的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newTs UFDateTime
	 */
	public void setTs(UFTime newTs) {

		ts = newTs;
	}

	/**
	 * 属性hfp_variety的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_variety() {
		return hfp_variety;
	}

	/**
	 * 属性hfp_variety的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_variety String
	 */
	public void setHfp_variety(String newHfp_variety) {

		hfp_variety = newHfp_variety;
	}

	/**
	 * 属性hfp_customize4的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize4() {
		return hfp_customize4;
	}

	/**
	 * 属性hfp_customize4的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize4 String
	 */
	public void setHfp_customize4(String newHfp_customize4) {

		hfp_customize4 = newHfp_customize4;
	}

	/**
	 * 属性hfp_customize9的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getHfp_customize9() {
		return hfp_customize9;
	}

	/**
	 * 属性hfp_customize9的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_customize9 String
	 */
	public void setHfp_customize9(String newHfp_customize9) {

		hfp_customize9 = newHfp_customize9;
	}

	/**
	 * 属性hfp_packpricep的Getter方法.
	 *
	 * 创建日期:2010-6-28
	 * @return UFDouble
	 */
	public UFDouble getHfp_packpricep() {
		return hfp_packpricep;
	}

	/**
	 * 属性hfp_packpricep的Setter方法.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_packpricep UFDouble
	 */
	public void setHfp_packpricep(UFDouble newHfp_packpricep) {

		hfp_packpricep = newHfp_packpricep;
	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性.
	 *
	 * 创建日期:2010-6-28
	 * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	 * ValidationException,对错误进行解释.
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null

		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:

		if (hfp_pk == null) {
			errFields.add(new String("hfp_pk(单据主键)"));
		}
		//判断品种不能为空
		if(null==hfp_variety||"".equals(hfp_variety)){
			errFields.add(new String("品种"));
		}
		//判断规格不能为空
		if(null==hfp_specification||"".equals(hfp_specification)){
			errFields.add(new String("规格"));
		}
		//判断仓库不能为空
		
		if(null==pk_stordoc||"".equals(pk_stordoc)){
			errFields.add(new String("仓库"));
		}
		StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for (int i = 1; i < temp.length; i++) {
				message.append(",");
				message.append(temp[i]);
			}
			throw new NullFieldException(message.toString());
		}
	}

	/**
	 * <p>取得父VO主键字段.
	 * <p>
	 * 创建日期:2010-6-28
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {

		return null;

	}

	/**
	 * <p>取得表主键.
	 * <p>
	 * 创建日期:2010-6-28
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "hfp_pk";
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:2010-6-28
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {

		return "tb_handlingfeeprice";
	}

	/**
	 * 按照默认方式创建构造子.
	 *
	 * 创建日期:2010-6-28
	 */
	public TbHandlingfeepriceVO() {

		super();
	}

	/**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_pk 主键值
	 */
	public TbHandlingfeepriceVO(String newHfp_pk) {

		// 为主键字段赋值:
		hfp_pk = newHfp_pk;

	}

	/**
	 * 返回对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2010-6-28
	 * @return String
	 */
	public String getPrimaryKey() {

		return hfp_pk;

	}

	/**
	 * 设置对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2010-6-28
	 * @param newHfp_pk  String    
	 */
	public void setPrimaryKey(String newHfp_pk) {

		hfp_pk = newHfp_pk;

	}

	/**
	 * 返回数值对象的显示名称.
	 *
	 * 创建日期:2010-6-28
	 * @return java.lang.String 返回数值对象的显示名称.
	 */
	public String getEntityName() {

		return "tb_handlingfeeprice";

	}

	public String getPk_stordoc() {
		return pk_stordoc;
	}

	public void setPk_stordoc(String pk_stordoc) {
		this.pk_stordoc = pk_stordoc;
	}
}
