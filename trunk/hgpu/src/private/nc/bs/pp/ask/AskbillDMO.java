/*
 * 创建日期 2005-12-23
 *
 * TODO 要更改此生成的文件的模板，请转至
 * 窗口 － 首选项 － Java － 代码样式 － 代码模板
 */
package nc.bs.pp.ask;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.NCLocator;
import nc.bs.hg.pu.pub.HgBsPubTool;
import nc.bs.po.OrderDMO;
import nc.bs.pr.pray.PraybillImpl;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pu.pub.PubImpl;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.pub.pf.IBackCheckState;
import nc.bs.pub.pf.ICheckState;
import nc.bs.scm.pub.SqlMethod;
import nc.itf.scm.pub.IScmPub;
import nc.itf.uap.sf.ICreateCorpQueryService;
import nc.jdbc.framework.crossdb.CrossDBResultSet;
import nc.vo.po.pub.PoVendorVO;
import nc.vo.pp.ask.AnalyseHeaderVO;
import nc.vo.pp.ask.AskbillHeaderVO;
import nc.vo.pp.ask.AskbillHeaderVO_Old;
import nc.vo.pp.ask.AskbillItemBVO;
import nc.vo.pp.ask.AskbillItemMergeVO;
import nc.vo.pp.ask.AskbillItemVO;
import nc.vo.pp.ask.AskbillItemVO_Old;
import nc.vo.pp.ask.AskbillItemVendorVO;
import nc.vo.pp.ask.AskbillVO;
import nc.vo.pp.ask.AskbillVO_Old;
import nc.vo.pp.ask.EffectPriceVO;
import nc.vo.pp.ask.IAskBillStatus;
import nc.vo.pp.ask.IBillType;
import nc.vo.pp.ask.IPosition;
import nc.vo.pp.ask.IPriceType;
import nc.vo.pp.ask.PriceauditBVO;
import nc.vo.pp.ask.PriceauditBb1VO;
import nc.vo.pp.ask.PriceauditHeaderVO;
import nc.vo.pp.ask.PriceauditItemMergeVO;
import nc.vo.pp.ask.PriceauditMergeVO;
import nc.vo.pp.ask.PriceauditVO;
import nc.vo.pp.ask.ThanresultHeaderVO;
import nc.vo.pp.ask.ThanresultItemVO;
import nc.vo.pp.ask.VendorInvPriceVO;
import nc.vo.pp.ask.VendorVO;
import nc.vo.pp.price.QuoteConItemVO;
import nc.vo.pp.price.StockExecItemVO;
import nc.vo.pp.price.StockVarItemVO;
import nc.vo.pp.price.StruDataVO;
import nc.vo.pr.pray.PraybillHeaderVO;
import nc.vo.pr.pray.PraybillItemVO;
import nc.vo.pr.pray.PraybillVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ctpo.ParaCtToPoRewriteVO;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pub.CustomerConfigVO;
import nc.vo.scm.pub.SCMEnv;

/**
 * Askbill的DMO类。
 * 
 * 创建日期：(2001-6-7)
 * 
 * @author：周晓
 */
public class AskbillDMO extends DataManageObject implements IAskBillStatus,
    ICheckState, IBackCheckState {

  /**
   * AskbillDMO 构造子注解。
   * 
   * @exception javax.naming.NamingException
   *                父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException
   *                父类构造子抛出的异常。
   */
  public AskbillDMO() throws javax.naming.NamingException, SystemException {
    super();
  }

  /**
   * AskbillDMO 构造子注解。
   * 
   * @param dbName
   *            java.lang.String 在EJB Server中配置的数据库DataSource名称。
   * @exception javax.naming.NamingException
   *                父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException
   *                父类构造子抛出的异常。
   */
  public AskbillDMO(String dbName) throws javax.naming.NamingException,
      SystemException {
    super(dbName);
  }

  /**
   * <p>
   * 根据表头的主键查询一个VO。
   * <p>
   * 创建日期：(2001-6-7)
   * 
   * @param key
   *            ??dbFieldType??
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public AskbillVO_Old findByPrimaryKey(String key) throws SQLException,
      BusinessException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    AskbillVO_Old vo = new AskbillVO_Old();
    //
    AskbillHeaderVO_Old header = findHeaderByPrimaryKey(key);
    AskbillItemVO_Old[] items = null;
    if (header != null) {
      items = findItemsForHeader(header.getPrimaryKey());
    }
    //
    vo.setParentVO(header);
    vo.setChildrenVO(items);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    return vo;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillHeaderVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public AskbillHeaderVO_Old findHeaderByPrimaryKey(String key)
      throws SQLException, BusinessException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findHeaderByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    String sql = "select pk_corp, ltrim(rtrim(vaskbillcode)), cvendormangid, cdeptid, cemployeeid, ccurrencytypeid, dclosedate, caskpsn, daskdate, cquotepsn, dquotedate, ctermprotocolid, caccountyear, ibillstatus, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, cvendorbaseid,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20 ";
    sql += "from po_askbill ";
    sql += "where caskbillid = ? ";
    sql += "and dr = 0 ";

    AskbillHeaderVO_Old askbillHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, key);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        askbillHeader = new AskbillHeaderVO_Old(key);
        // pk_corp :
        String pk_corp = rs.getString(1);
        askbillHeader.setPk_corp(pk_corp == null ? null : pk_corp
            .trim());
        // vaskbillcode :
        String vaskbillcode = rs.getString(2);
        askbillHeader.setVaskbillcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        // cvendormangid :
        String cvendormangid = rs.getString(3);
        askbillHeader.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        // cdeptid :
        String cdeptid = rs.getString(4);
        askbillHeader.setCdeptid(cdeptid == null ? null : cdeptid
            .trim());
        // cemployeeid :
        String cemployeeid = rs.getString(5);
        askbillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // ccurrencytypeid :
        String ccurrencytypeid = rs.getString(6);
        askbillHeader.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        // dclosedate :
        String dclosedate = rs.getString(7);
        askbillHeader.setDclosedate(dclosedate == null ? null
            : new UFDate(dclosedate.trim(), false));
        // caskpsn :
        String caskpsn = rs.getString(8);
        askbillHeader.setCaskpsn(caskpsn == null ? null : caskpsn
            .trim());
        // daskdate :
        String daskdate = rs.getString(9);
        askbillHeader.setDaskdate(daskdate == null ? null : new UFDate(
            daskdate.trim(), false));
        // cquotepsn :
        String cquotepsn = rs.getString(10);
        askbillHeader.setCquotepsn(cquotepsn == null ? null : cquotepsn
            .trim());
        // dquotedate :
        String dquotedate = rs.getString(11);
        askbillHeader.setDquotedate(dquotedate == null ? null
            : new UFDate(dquotedate.trim(), false));
        // ctermprotocolid :
        String ctermprotocolid = rs.getString(12);
        askbillHeader.setCtermprotocolid(ctermprotocolid == null ? null
            : ctermprotocolid.trim());
        // caccountyear :
        String caccountyear = rs.getString(13);
        askbillHeader.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(14);
        askbillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // vdef1 :
        String vdef1 = rs.getString(15);
        askbillHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(16);
        askbillHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(17);
        askbillHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(18);
        askbillHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(19);
        askbillHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(20);
        askbillHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vdef7 :
        String vdef7 = rs.getString(21);
        askbillHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
        // vdef8 :
        String vdef8 = rs.getString(22);
        askbillHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
        // vdef9 :
        String vdef9 = rs.getString(23);
        askbillHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
        // vdef10 :
        String vdef10 = rs.getString(24);
        askbillHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
        // cvendorbaseid :
        String cvendorbaseid = rs.getString(25);
        askbillHeader.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        // // vdef11 :
        String vdef11 = rs.getString(26);
        askbillHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(27);
        askbillHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(28);
        askbillHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(29);
        askbillHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(30);
        askbillHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(31);
        askbillHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(32);
        askbillHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(33);
        askbillHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(34);
        askbillHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(35);
        askbillHeader.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(36);
        askbillHeader.setPKDefDoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(37);
        askbillHeader.setPKDefDoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(38);
        askbillHeader.setPKDefDoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(39);
        askbillHeader.setPKDefDoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(40);
        askbillHeader.setPKDefDoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(41);
        askbillHeader.setPKDefDoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(42);
        askbillHeader.setPKDefDoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(43);
        askbillHeader.setPKDefDoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(44);
        askbillHeader.setPKDefDoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(45);
        askbillHeader.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(46);
        askbillHeader.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(47);
        askbillHeader.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(48);
        askbillHeader.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(49);
        askbillHeader.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(50);
        askbillHeader.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(51);
        askbillHeader.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(52);
        askbillHeader.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(53);
        askbillHeader.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(54);
        askbillHeader.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(55);
        askbillHeader.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findHeaderByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    return askbillHeader;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public AskbillItemVO_Old findItemByPrimaryKey(String key)
      throws SQLException, BusinessException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    String sql = "select caskbillid, pk_corp, cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress, nnotaxprice, nintaxprice, bisorder, nordernum, nordernotaxprice, norderintaxprice, nordernotaxmny, ntaxmny, npricetaxmny, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid,vdef7, vdef8, vdef9, vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20 ";
    sql += "from po_askbill_b ";
    sql += "where caskbill_bid = ? ";
    sql += "and dr = 0 ";

    AskbillItemVO_Old askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, key);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        askbillItem = new AskbillItemVO_Old(key);
        // caskbillid :
        String caskbillid = rs.getString(1);
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        // pk_corp :
        String pk_corp = rs.getString(2);
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        // cinventoryid :
        String cmangid = rs.getString(3);
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        // nasknum :
        Object nasknum = rs.getObject(4);
        askbillItem.setNasknum((nasknum == null || "".equals(nasknum.toString()
            .trim())) ? null : new UFDouble(nasknum
            .toString().trim()));
        // vpackmode :
        String vpackmode = rs.getString(5);
        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
            .trim());
        // dreceivedate :
        String dreceivedate = rs.getString(6);
        askbillItem.setDreceivedate(dreceivedate == null ? null
            : new UFDate(dreceivedate.trim(), false));
        // vreveiveaddress :
        String vreveiveaddress = rs.getString(7);
        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
            : vreveiveaddress.trim());
        // nnotaxprice :
        Object nnotaxprice = rs.getObject(8);
        askbillItem.setNnotaxprice((nnotaxprice == null || "".equals(nnotaxprice
            .toString().trim())) ? null : new UFDouble(
            nnotaxprice.toString().trim()));
        // nintaxprice :
        Object nintaxprice = rs.getObject(9);
        askbillItem.setNintaxprice((nintaxprice == null || "".equals(nintaxprice
            .toString().trim())) ? null : new UFDouble(
            nintaxprice.toString().trim()));
        // bisorder :
        Integer bisorder = (Integer) rs.getObject(10);
        askbillItem.setBisorder(bisorder == null ? null : bisorder);
        // nordernum :
        Object nordernum = rs.getObject(11);
        askbillItem.setNordernum((nordernum == null || "".equals(nordernum
            .toString().trim())) ? null : new UFDouble(
            nordernum.toString().trim()));
        // nordernotaxprice :
        Object nordernotaxprice = rs.getObject(12);
        askbillItem
            .setNordernotaxprice((nordernotaxprice == null || "".equals(nordernotaxprice
                .toString().trim())) ? null
                : new UFDouble(nordernotaxprice.toString()
                    .trim()));
        // norderintaxprice :
        Object norderintaxprice = rs.getObject(13);
        askbillItem
            .setNorderintaxprice((norderintaxprice == null || "".equals(norderintaxprice
                .toString().trim())) ? null
                : new UFDouble(norderintaxprice.toString()
                    .trim()));
        // nordernotaxmny :
        Object nordernotaxmny = rs.getObject(14);
        askbillItem
            .setNordernotaxmny((nordernotaxmny == null || "".equals(nordernotaxmny
                .toString().trim())) ? null
                : new UFDouble(nordernotaxmny.toString().trim()));
        // ntaxmny :
        Object ntaxmny = rs.getObject(15);
        askbillItem.setNtaxmny((ntaxmny == null || "".equals(ntaxmny.toString()
            .trim())) ? null : new UFDouble(ntaxmny
            .toString().trim()));
        // npricetaxmny :
        Object npricetaxmny = rs.getObject(16);
        askbillItem
            .setNpricetaxmny((npricetaxmny == null || "".equals(npricetaxmny
                .toString().trim())) ? null
                : new UFDouble(npricetaxmny.toString().trim()));
        // vmemo :
        String vmemo = rs.getString(17);
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        // vdef1 :
        String vdef1 = rs.getString(18);
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(19);
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(20);
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(21);
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(22);
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(23);
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vfree1 :
        String vfree1 = rs.getString(24);
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        // vfree2 :
        String vfree2 = rs.getString(25);
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        // vfree3 :
        String vfree3 = rs.getString(26);
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        // vfree4 :
        String vfree4 = rs.getString(27);
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        // vfree5 :
        String vfree5 = rs.getString(28);
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());
        // 存货基本档案主键
        String cbaseid = rs.getString(29);
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);
        // 单据行号
        String crowno = rs.getString(30);
        askbillItem.setRowno(crowno == null ? null : crowno.trim());
        // 来源信息
        String csourcebilltype = rs.getString("csourcebilltype");
        askbillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        String csourcebillid = rs.getString("csourcebillid");
        askbillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        String csourcebillrowid = rs.getString("csourcebillrowid");
        askbillItem.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        askbillItem
            .setCupsourcebilltype(cupsourcebilltype == null ? null
                : cupsourcebilltype.trim());
        String cupsourcebillid = rs.getString("cupsourcebillid");
        askbillItem.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        askbillItem
            .setCupsourcebillrowid(cupsourcebillrowid == null ? null
                : cupsourcebillrowid.trim());
        // // vdef7 :
        String vdef7 = rs.getString(37);
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(38);
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(39);
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(40);
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(41);
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(42);
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(43);
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(44);
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(45);
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(46);
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(47);
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(48);
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(49);
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(50);
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(51);
        askbillItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1
            .trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(52);
        askbillItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2
            .trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(53);
        askbillItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3
            .trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(54);
        askbillItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4
            .trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(55);
        askbillItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5
            .trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(56);
        askbillItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6
            .trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(57);
        askbillItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7
            .trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(58);
        askbillItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8
            .trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(59);
        askbillItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9
            .trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(60);
        askbillItem.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(61);
        askbillItem.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(62);
        askbillItem.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(63);
        askbillItem.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(64);
        askbillItem.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(65);
        askbillItem.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(66);
        askbillItem.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(67);
        askbillItem.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(68);
        askbillItem.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(69);
        askbillItem.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(70);
        askbillItem.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemByPrimaryKey",
        new Object[] { key });
    /** ********************************************************** */

    return askbillItem;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public Hashtable findItemByPrimaryKeyForPriceAudit(String condition)
      throws SQLException, BusinessException {
    String sql = "select  csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid,caskbill_bid ";
    sql += "from po_askbill_b ";
    sql += "where caskbill_bid in ( " + condition + ") ";
    sql += "and dr = 0 ";

    AskbillItemVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable result = new Hashtable();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        askbillItem = new AskbillItemVO();

        // 来源信息
        String csourcebilltype = rs.getString("csourcebilltype");
        askbillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        String csourcebillid = rs.getString("csourcebillid");
        askbillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        String csourcebillrowid = rs.getString("csourcebillrowid");
        askbillItem.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        askbillItem
            .setCupsourcebilltype(cupsourcebilltype == null ? null
                : cupsourcebilltype.trim());
        String cupsourcebillid = rs.getString("cupsourcebillid");
        askbillItem.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        askbillItem
            .setCupsourcebillrowid(cupsourcebillrowid == null ? null
                : cupsourcebillrowid.trim());
        // 子表ID
        String caskbill_bid = rs.getString("caskbill_bid");
        askbillItem.setPrimaryKey(caskbill_bid == null ? null
            : caskbill_bid.trim());

        if (caskbill_bid != null
            && caskbill_bid.trim().length() > 0) {
          if (!result.containsKey(caskbill_bid)) {
            result.put(caskbill_bid, askbillItem);
          }
        }
      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return result;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public AskbillItemVO_Old[] findItemsForHeader(String key)
      throws SQLException, BusinessException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForHeader",
        new Object[] { key });
    /** ********************************************************** */

    String sql = "select caskbill_bid, caskbillid, pk_corp, cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress, nnotaxprice, nintaxprice, bisorder, nordernum, nordernotaxprice, norderintaxprice, nordernotaxmny, ntaxmny, npricetaxmny, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, ";
    sql += "ntaxrate, deliverdays, crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid,vdef7, vdef8, vdef9, vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20  ";
    sql += "from po_askbill_b ";
    sql += "where caskbillid = ? ";
    sql += "and dr = 0 ";

    AskbillItemVO_Old[] askbillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, key);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        AskbillItemVO_Old askbillItem = new AskbillItemVO_Old();
        //
        String caskbill_bid = rs.getString("caskbill_bid");
        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        //
        String caskbillid = rs.getString("caskbillid");
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cmangid = rs.getString("cmangid");
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        //
        Object nasknum = rs.getObject("nasknum");
        askbillItem.setNasknum((nasknum == null || "".equals(nasknum.toString()
            .trim())) ? null : new UFDouble(nasknum
            .toString().trim()));
        //
        String vpackmode = rs.getString("vpackmode");
        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
            .trim());
        //
        String dreceivedate = rs.getString("dreceivedate");
        askbillItem.setDreceivedate(dreceivedate == null ? null
            : new UFDate(dreceivedate.trim(), false));
        //
        String vreveiveaddress = rs.getString("vreveiveaddress");
        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
            : vreveiveaddress.trim());
        //
        Object nnotaxprice = rs.getObject("nnotaxprice");
        askbillItem.setNnotaxprice((nnotaxprice == null || "".equals(nnotaxprice
            .toString().trim())) ? null : new UFDouble(
            nnotaxprice.toString().trim()));
        //
        Object nintaxprice = rs.getObject("nintaxprice");
        askbillItem.setNintaxprice((nintaxprice == null || "".equals(nintaxprice
            .toString().trim())) ? null : new UFDouble(
            nintaxprice.toString().trim()));
        //
        Integer bisorder = (Integer) rs.getObject("bisorder");
        askbillItem.setBisorder(bisorder == null ? null : bisorder);
        //
        Object nordernum = rs.getObject("nordernum");
        askbillItem.setNordernum((nordernum == null || "".equals(nordernum
            .toString().trim())) ? null : new UFDouble(
            nordernum.toString().trim()));
        //
        Object nordernotaxprice = rs.getObject("nordernotaxprice");
        askbillItem
            .setNordernotaxprice((nordernotaxprice == null || "".equals(nordernotaxprice
                .toString().trim())) ? null
                : new UFDouble(nordernotaxprice.toString()
                    .trim()));
        //
        Object norderintaxprice = rs.getObject("norderintaxprice");
        askbillItem
            .setNorderintaxprice((norderintaxprice == null || "".equals(norderintaxprice
                .toString().trim())) ? null
                : new UFDouble(norderintaxprice.toString()
                    .trim()));
        //
        Object nordernotaxmny = rs.getObject("nordernotaxmny");
        askbillItem
            .setNordernotaxmny((nordernotaxmny == null || "".equals(nordernotaxmny
                .toString().trim())) ? null
                : new UFDouble(nordernotaxmny.toString().trim()));
        //
        Object ntaxmny = rs.getObject("ntaxmny");
        askbillItem.setNtaxmny((ntaxmny == null || "".equals(ntaxmny.toString()
            .trim())) ? null : new UFDouble(ntaxmny
            .toString().trim()));
        //
        Object npricetaxmny = rs.getObject("npricetaxmny");
        askbillItem
            .setNpricetaxmny((npricetaxmny == null || "".equals(npricetaxmny
                .toString().trim())) ? null
                : new UFDouble(npricetaxmny.toString().trim()));
        //
        String vmemo = rs.getString("vmemo");
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vdef1 = rs.getString("vdef1");
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString("vdef2");
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString("vdef3");
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString("vdef4");
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString("vdef5");
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString("vdef6");
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        //
        String vfree1 = rs.getString("vfree1");
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString("vfree2");
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString("vfree3");
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString("vfree4");
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString("vfree5");
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());

        // 存货基本档案主键
        String cbaseid = rs.getString("cbaseid");
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);

        // 税率
        Object oRate = rs.getObject("ntaxrate");
        askbillItem.setTaxratio((oRate == null || "".equals(oRate.toString()
            .trim())) ? null : new UFDouble(oRate
            .toString().trim()));
        // 交货期（天）
        Integer iDays = (Integer) rs.getObject("deliverdays");
        askbillItem.setDeliverdays(iDays);
        // 单据行号
        String crowno = rs.getString("crowno");
        askbillItem.setRowno(crowno == null ? null : crowno.trim());
        // 来源信息
        String csourcebilltype = rs.getString("csourcebilltype");
        askbillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        String csourcebillid = rs.getString("csourcebillid");
        askbillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        String csourcebillrowid = rs.getString("csourcebillrowid");
        askbillItem.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        askbillItem
            .setCupsourcebilltype(cupsourcebilltype == null ? null
                : cupsourcebilltype.trim());
        String cupsourcebillid = rs.getString("cupsourcebillid");
        askbillItem.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        askbillItem
            .setCupsourcebillrowid(cupsourcebillrowid == null ? null
                : cupsourcebillrowid.trim());
        // // vdef7 :
        String vdef7 = rs.getString(40);
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(41);
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(42);
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(43);
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(44);
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(45);
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(46);
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(47);
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(48);
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(49);
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(50);
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(51);
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(52);
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(53);
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(54);
        askbillItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1
            .trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(55);
        askbillItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2
            .trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(56);
        askbillItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3
            .trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(57);
        askbillItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4
            .trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(58);
        askbillItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5
            .trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(59);
        askbillItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6
            .trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(60);
        askbillItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7
            .trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(61);
        askbillItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8
            .trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(62);
        askbillItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9
            .trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(63);
        askbillItem.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(64);
        askbillItem.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(65);
        askbillItem.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(66);
        askbillItem.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(67);
        askbillItem.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(68);
        askbillItem.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(69);
        askbillItem.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(70);
        askbillItem.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(71);
        askbillItem.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(72);
        askbillItem.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(73);
        askbillItem.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

        v.addElement(askbillItem);
      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    askbillItems = new AskbillItemVO_Old[v.size()];
    if (v.size() > 0) {
      v.copyInto(askbillItems);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForHeader",
        new Object[] { key });
    /** ********************************************************** */

    return askbillItems;
  }

  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public VendorVO[] queryVendorDetail(String logCorp, String logUser, String dataPowerCon) throws SQLException,
      BusinessException {

    String sql = "SELECT DISTINCT bd_cubasdoc.custcode, bd_cubasdoc.custname, bd_cumandoc.creditlevel, ";
    sql += "bd_cubasdoc.registerfund, bd_cumandoc.pk_cumandoc, bd_cubasdoc.pk_cubasdoc ";
    sql += "FROM bd_cubasdoc LEFT OUTER JOIN bd_cumandoc ON bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ";
    // sql +="LEFT OUTER JOIN vrm_clientevaluate ON bd_cubasdoc.pk_cubasdoc
    // = vrm_clientevaluate.cvendorbaseid ";
    sql += "WHERE (bd_cumandoc.pk_corp = '"
        + logCorp
        + "') AND (bd_cumandoc.custflag = '1' OR bd_cumandoc.custflag = '3') ";
    sql += "AND (bd_cumandoc.frozenflag = 'N' OR bd_cumandoc.frozenflag IS NULL) AND (bd_cumandoc.sealflag IS NULL) ";
    sql +=" and " + dataPowerCon;
    sql += " ORDER BY bd_cubasdoc.custcode ";
    String sql1 = "select cvendorbaseid,ntotalmark,ts from vrm_clientevaluate ";
    sql1 += "group by cvendorbaseid,ntotalmark,ts ";
    sql1 += "order by cvendorbaseid,ts desc";
    VendorVO[] vendorItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    Connection con1 = null;
    PreparedStatement stmt1 = null;
    ResultSet rs = null;
    Hashtable store = new Hashtable();
    String cvendorbaseid = null;
    String ntotalmark = null;
    try {
      ICreateCorpQueryService ccSrv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
      //判断vrm是否启用
      boolean  isStartCT = ccSrv.isEnabled(logCorp, ProductCode.PROD_VRM);
      if(isStartCT){
      con1 = getConnection();
      stmt1 = con1.prepareStatement(sql1);
      rs = stmt1.executeQuery();
      while (rs.next()) {
        cvendorbaseid = rs.getString(1);
        ntotalmark = rs.getString(2);
        if (cvendorbaseid != null
            && cvendorbaseid.trim().length() > 0
            && ntotalmark != null
            && ntotalmark.trim().length() > 0) {
        }
        if (!store.containsKey(cvendorbaseid)) {
          store.put(cvendorbaseid, ntotalmark);
        }
      }
      rs.close();
      }
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        VendorVO vendorItem = new VendorVO();
        //
        String custcode = rs.getString("custcode");
        vendorItem.setCustcode(custcode == null ? null : custcode
            .trim());
        //
        String custname = rs.getString("custname");
        vendorItem.setCustname(custname == null ? null : custname
            .trim());
        //
        String creditlevel = rs.getString("creditlevel");
        vendorItem.setCreditlevel(creditlevel == null ? null
            : creditlevel.trim());
        //
        Object registerfund = rs.getObject("registerfund");
        vendorItem
            .setRegisterfund((registerfund == null || "".equals(registerfund
                .toString().trim())) ? null
                : new UFDouble(registerfund.toString().trim()));
        //
        String pk_cumandoc = rs.getString("pk_cumandoc");
        vendorItem.setCumandoc(pk_cumandoc == null ? null : pk_cumandoc
            .trim());
        //
        String pk_cubasdoc = rs.getString("pk_cubasdoc");
        vendorItem.setCubasdoc(pk_cubasdoc == null ? null : pk_cubasdoc
            .trim());
        //
        ntotalmark = null;
        if (pk_cubasdoc != null
            && pk_cubasdoc.trim().length() > 0) {
          if (store.get(pk_cubasdoc) != null) {
            ntotalmark = (String) store.get(pk_cubasdoc);
          }
        }
        vendorItem.setNtotalmark(ntotalmark == null ? null : ntotalmark
            .trim());

        v.addElement(vendorItem);
      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt1 != null) {
          stmt1.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con1 != null) {
          con1.close();
        }
      } catch (Exception e) {
      }
    }
    vendorItems = new VendorVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(vendorItems);
    }

    return vendorItems;
  }
  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public VendorVO[] queryVendorDetail(String logCorp) throws SQLException,
      BusinessException {

    String sql = "SELECT DISTINCT bd_cubasdoc.custcode, bd_cubasdoc.custname, bd_cumandoc.creditlevel, ";
    sql += "bd_cubasdoc.registerfund, bd_cumandoc.pk_cumandoc, bd_cubasdoc.pk_cubasdoc ";
    sql += "FROM bd_cubasdoc LEFT OUTER JOIN bd_cumandoc ON bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ";
    // sql +="LEFT OUTER JOIN vrm_clientevaluate ON bd_cubasdoc.pk_cubasdoc
    // = vrm_clientevaluate.cvendorbaseid ";
    sql += "WHERE (bd_cumandoc.pk_corp = '"
        + logCorp
        + "') AND (bd_cumandoc.custflag = '1' OR bd_cumandoc.custflag = '3') ";
    sql += "AND (bd_cumandoc.frozenflag = 'N' OR bd_cumandoc.frozenflag IS NULL) AND (bd_cumandoc.sealflag IS NULL) ";
    sql += " ORDER BY bd_cubasdoc.custcode ";  
    String sql1 = "select cvendorbaseid,ntotalmark,ts from vrm_clientevaluate ";
    sql1 += "group by cvendorbaseid,ntotalmark,ts ";
    sql1 += "order by cvendorbaseid,ts desc";
    VendorVO[] vendorItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    Connection con1 = null;
    PreparedStatement stmt1 = null;
    ResultSet rs = null;
    Hashtable store = new Hashtable();
    String cvendorbaseid = null;
    String ntotalmark = null;
    
    try {
      ICreateCorpQueryService ccSrv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
      //判断vrm是否启用
      boolean  isStartCT = ccSrv.isEnabled(logCorp, ProductCode.PROD_VRM);
      if(isStartCT){
      con1 = getConnection();
      stmt1 = con1.prepareStatement(sql1);
      rs = stmt1.executeQuery();
      while (rs.next()) {
        cvendorbaseid = rs.getString(1);
        ntotalmark = rs.getString(2);
        if (cvendorbaseid != null
            && cvendorbaseid.trim().length() > 0
            && ntotalmark != null
            && ntotalmark.trim().length() > 0) {
        }
        if (!store.containsKey(cvendorbaseid)) {
          store.put(cvendorbaseid, ntotalmark);
        }
      }
      rs.close();
      }
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        VendorVO vendorItem = new VendorVO();
        //
        String custcode = rs.getString("custcode");
        vendorItem.setCustcode(custcode == null ? null : custcode
            .trim());
        //
        String custname = rs.getString("custname");
        vendorItem.setCustname(custname == null ? null : custname
            .trim());
        //
        String creditlevel = rs.getString("creditlevel");
        vendorItem.setCreditlevel(creditlevel == null ? null
            : creditlevel.trim());
        //
        Object registerfund = rs.getObject("registerfund");
        vendorItem
            .setRegisterfund((registerfund == null || "".equals(registerfund
                .toString().trim())) ? null
                : new UFDouble(registerfund.toString().trim()));
        //
        String pk_cumandoc = rs.getString("pk_cumandoc");
        vendorItem.setCumandoc(pk_cumandoc == null ? null : pk_cumandoc
            .trim());
        //
        String pk_cubasdoc = rs.getString("pk_cubasdoc");
        vendorItem.setCubasdoc(pk_cubasdoc == null ? null : pk_cubasdoc
            .trim());
        //
        ntotalmark = null;
        if (pk_cubasdoc != null
            && pk_cubasdoc.trim().length() > 0) {
          if (store.get(pk_cubasdoc) != null) {
            ntotalmark = (String) store.get(pk_cubasdoc);
          }
        }
        vendorItem.setNtotalmark(ntotalmark == null ? null : ntotalmark
            .trim());

        v.addElement(vendorItem);
      }
    } 
    catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt1 != null) {
          stmt1.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con1 != null) {
          con1.close();
        }
      } catch (Exception e) {
      }
    }
    vendorItems = new VendorVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(vendorItems);
    }

    return vendorItems;
  }
  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   * @throws NamingException 
   * @throws SystemException 
   */
  public String[] queryForVendorDetail(String logCorp, String[] vendorMangIDs,String conditionFroInv) throws SQLException,
      BusinessException {

        
    String sql1 = "select cvendormangid,ntotalmark,pk_corp,ts from vrm_clientevaluate ";
    sql1 +="where pk_corp='"+ logCorp +"' ";
    if(conditionFroInv != null && conditionFroInv.trim().length() > 0){
      sql1 +="and  cvendormangid in "+ conditionFroInv +" ";  
    }
    sql1 += "group by cvendormangid,pk_corp,ntotalmark,ts ";
    sql1 += "order by ts desc";
    
    Connection con = null;
    PreparedStatement stmt = null;
    Connection con1 = null;
    PreparedStatement stmt1 = null;
    ResultSet rs = null;
    Hashtable store = new Hashtable();
    String cvendorbaseid = null;
    String ntotalmark = null;
    String pk_corp = null;
    String[] ntotalmarks = new String[vendorMangIDs.length];
    try {
      ICreateCorpQueryService ccSrv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
      //判断vrm是否启用
      boolean  isStartCT = ccSrv.isEnabled(logCorp, ProductCode.PROD_VRM);
      if(isStartCT){
      con1 = getConnection();
      stmt1 = con1.prepareStatement(sql1);
      rs = stmt1.executeQuery();
      while (rs.next()) {
        cvendorbaseid = rs.getString(1);
        ntotalmark = rs.getString(2);
        pk_corp = rs.getString(3);
        if (cvendorbaseid != null
            && cvendorbaseid.trim().length() > 0
            && ntotalmark != null
            && ntotalmark.trim().length() > 0
            && pk_corp != null
            && pk_corp.trim().length() > 0) {
          if (!store.containsKey(cvendorbaseid+pk_corp)) {
            store.put(cvendorbaseid+pk_corp, ntotalmark);
          }
        }
        
          }
      } 
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt1 != null) {
          stmt1.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con1 != null) {
          con1.close();
        }
      } catch (Exception e) {
      }
    }
    if(store.size() > 0){
          for(int i = 0; i < vendorMangIDs.length; i ++){
          if(store.get(vendorMangIDs[i]+logCorp) != null && store.get(vendorMangIDs[i]+logCorp).toString().length() > 0){  
             ntotalmarks[i] = (String)store.get(vendorMangIDs[i]+logCorp);
          }  
          }
    }else{
      ntotalmarks = null;
    }
    return ntotalmarks;
  }
  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public Hashtable querySourceInfoForGenOrder(String condition)
      throws SQLException, BusinessException {

    String sql = "SELECT cpraybill_bid,cpraybillid,csourcebilltype,csourcebillid,csourcebillrowid from  po_praybill_b where dr = 0 and  cpraybill_bid in (";
    sql += "SELECT po_askbill_b.cupsourcebillrowid ";
    sql += "FROM po_askbill inner  join  po_askbill_b on po_askbill.caskbillid = po_askbill_b.caskbillid ";
    sql += "WHERE po_askbill.ibillstatus = 4 and po_askbill_b.cupsourcebilltype = '20' and po_askbill.dr =0 and po_askbill_b.dr =0 and po_askbill_b.caskbill_bid in "
        + condition + " ) ";

    Hashtable queryH = new Hashtable();
    AskbillItemVO item = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        item = new AskbillItemVO();
        //
        String csourcebilltype = rs.getString("csourcebilltype");
        item.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        //
        String csourcebillid = rs.getString("csourcebillid");
        item.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        //
        Object csourcebillrowid = rs.getObject("csourcebillrowid");
        item.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.toString().trim());
        //
        String cupsourcebilltype = IBillType.PRAYBILL;
        item.setCupsourcebilltype(cupsourcebilltype == null ? null
            : cupsourcebilltype.trim());
        //
        String cupsourcebillid = rs.getString("cpraybillid");
        item.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        //
        String cupsourcebillrowid = rs.getString("cpraybill_bid");
        item.setCupsourcebillrowid(cupsourcebillrowid == null ? null
            : cupsourcebillrowid.trim());

//        if (item.getCsourcebillrowid() != null
//            && item.getCsourcebillrowid().trim().length() > 0) {
        if (!queryH.containsKey(item.getCupsourcebillrowid())) {
          queryH.put(item.getCupsourcebillrowid(), item);
        }
//        }
      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return queryH;
  }

  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return Hashtable key--询报价单子表主键--caskbill_bid
   *                    value--询报价单子表VO--AskbillItemVO
   * @param String condition--查询条件
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public Hashtable querySourceInfoForRwPray(String condition)
      throws SQLException, BusinessException {

    String sql = "SELECT po_askbill_b.caskbill_bid, po_askbill_b.csourcebilltype, ";
    sql += "po_askbill_b.csourcebillid, po_askbill_b.csourcebillrowid, po_askbill_b.cupsourcebilltype,po_askbill_b.cupsourcebillid,po_askbill_b.cupsourcebillrowid ";
    sql += "FROM po_askbill left outer join  po_askbill_b on po_askbill.caskbillid = po_askbill_b.caskbillid ";
    sql += "WHERE po_askbill.ibillstatus = 3 and po_askbill.dr =0 and po_askbill_b.dr =0 and po_askbill_b.cupsourcebilltype = '20' and po_askbill_b.caskbill_bid in ("
        + condition + ") ";

    Hashtable queryH = new Hashtable();
    AskbillItemVO item = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        item = new AskbillItemVO();
        //
        String caskbill_bid = rs.getString("caskbill_bid");
        item.setPrimaryKey(caskbill_bid == null ? null : caskbill_bid
            .trim());
        //
        String csourcebilltype = rs.getString("csourcebilltype");
        item.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        //
        String csourcebillid = rs.getString("csourcebillid");
        item.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        //
        Object csourcebillrowid = rs.getObject("csourcebillrowid");
        item.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.toString().trim());
        //
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        item.setCupsourcebilltype(cupsourcebilltype == null ? null
            : cupsourcebilltype.trim());
        //
        String cupsourcebillid = rs.getString("cupsourcebillid");
        item.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        //
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        item.setCupsourcebillrowid(cupsourcebillrowid == null ? null
            : cupsourcebillrowid.trim());

        if (item.getPrimaryKey() != null
            && item.getPrimaryKey().trim().length() > 0) {
          if (!queryH.containsKey(item.getPrimaryKey())) {
            queryH.put(item.getPrimaryKey(), item);
          }
        }
      }
    } catch (Exception e) {
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return queryH;
  }

  /**
   * “请购单生成订单限制方式”选择为“经过价格审批才能生成”,查询满足条件的请购单行。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @throws Exception
   */
  public Hashtable queryIsGenPriceAudit(ArrayList prayRowIds)
      throws SQLException,SystemException,NamingException,BusinessException {
    ResultSet rs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    Connection con1 = null;
    PreparedStatement stmt1 = null;
    Connection con2 = null;
    PreparedStatement stmt2 = null;

    String sql0 = " select po_priceaudit_b.cupsourcebillrowid from po_priceaudit left outer join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid ";
    sql0 += " where po_priceaudit.ibillstatus = 3 and po_priceaudit_b.cupsourcebilltype = '20' and po_priceaudit.dr = 0 and po_priceaudit_b.dr = 0 ";
    String sql1 = "select po_askbill_b.cupsourcebillrowid from po_askbill left outer join po_askbill_b on po_askbill.caskbillid = po_askbill_b.caskbillid where po_askbill_b.cupsourcebilltype = '20' and po_askbill_b.dr = 0 and po_askbill.dr = 0 and  po_askbill_b.caskbill_bid in ";
    String sql2 = "select po_priceaudit_b.cupsourcebillrowid from po_priceaudit left outer join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid ";
    sql2 += " where po_priceaudit.ibillstatus = 3 and po_priceaudit_b.cupsourcebilltype = '29' and po_priceaudit.dr = 0 and po_priceaudit_b.dr = 0 ";
    // 查询请购直接生成价格审批单的请购单行
    con = getConnection();
    stmt = con.prepareStatement(sql0);
    rs = stmt.executeQuery();
    String cupsourcebillrowid = null;
    Hashtable fromPriceAudit = new Hashtable();
    nc.bs.scm.pub.TempTableDMO dmoTmpTblForRowIds = null;
    String strIdSetForRowIds = null;
    try {
      dmoTmpTblForRowIds = new nc.bs.scm.pub.TempTableDMO();
      strIdSetForRowIds = dmoTmpTblForRowIds.insertTempTable(prayRowIds,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU96,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
    } catch (SystemException e1) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e1.getMessage());
      throw e1;
    } catch (NamingException e1) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e1.getMessage());
      throw e1;
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    }
    sql0 += " and  po_priceaudit_b.cupsourcebillrowid in "
        + strIdSetForRowIds;
    if (strIdSetForRowIds == null || "()".equals(strIdSetForRowIds.trim())) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40040701", "UPP40040701-000031")/*
                                   * @res
                                   * "获取存货基本档案主键时出错！请稍后再试！"
                                   */);
    }
    while (rs.next()) {
      cupsourcebillrowid = rs.getString(1);
      if (cupsourcebillrowid != null
          && cupsourcebillrowid.trim().length() > 0
          && !fromPriceAudit.containsKey(cupsourcebillrowid)) {
        fromPriceAudit.put(cupsourcebillrowid, cupsourcebillrowid);
      }
    }
    rs.close();
    // 查询请购单经过询报价单生成价格审批单的询报价单行
    con1 = getConnection();
    stmt1 = con1.prepareStatement(sql2);
    rs = stmt1.executeQuery();
    ArrayList listDisId = new ArrayList();
    while (rs.next()) {
      cupsourcebillrowid = rs.getString(1);
      if (cupsourcebillrowid != null
          && cupsourcebillrowid.trim().length() > 0
          && !fromPriceAudit.containsKey(cupsourcebillrowid)) {
        listDisId.add(cupsourcebillrowid);
      }
    }
    if (listDisId.size() > 0) {
      String strIdSet = null;
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = null;
      try {
        dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        if (strIdSet == null || "()".equals(strIdSet.trim())) {
          throw new SQLException(nc.bs.ml.NCLangResOnserver
              .getInstance().getStrByID("40040701",
                  "UPP40040701-000031")/*
                               * @res
                               * "获取存货基本档案主键时出错！请稍后再试！"
                               */);
        }
        rs.close();
        sql1 += strIdSet;
        sql1 += " and  po_askbill_b.cupsourcebillrowid in "
            + strIdSetForRowIds;
        //
        con2 = getConnection();
        stmt2 = con2.prepareStatement(sql1);
        rs = stmt2.executeQuery();
        while (rs.next()) {
          cupsourcebillrowid = rs.getString(1);
          if (cupsourcebillrowid != null
              && cupsourcebillrowid.trim().length() > 0
              && !fromPriceAudit.containsKey(cupsourcebillrowid)) {
            fromPriceAudit.put(cupsourcebillrowid,
                cupsourcebillrowid);
          }
        }
      } catch (SystemException e) {
        // TODO 自动生成 catch 块
        SCMEnv.out(e.getMessage());
      } catch (NamingException e) {
        // TODO 自动生成 catch 块
        SCMEnv.out(e.getMessage());
      } catch (Exception e) {
        // TODO 自动生成 catch 块
        SCMEnv.out(e.getMessage());
      } finally {
        try {
          if (rs != null)
            rs.close();
        } catch (Exception e) {

        }
        try {
          if (stmt != null) {
            stmt.close();
          }
          if (stmt1 != null) {
            stmt1.close();
          }
          if (stmt2 != null) {
            stmt2.close();
          }
        } catch (Exception e) {
        }
        try {
          if (con != null) {
            con.close();
          }
          if (con1 != null) {
            con1.close();
          }
          if (con2 != null) {
            con2.close();
          }
        } catch (Exception e) {
        }
      }
    }
    return fromPriceAudit;
  }

  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @throws Exception
   * modify by donggq 
   * 算法优化：原查询分两个阶段：1 分别查询询报价单子子表、价格审批单子子表的pk、ts，按照存货管理档案id+供应商id纬度取最新pk
   *                        2 根据第一步查询比较结果再进行价格详细信息查询，返回结果集。
   *         新查询算法：1 从询报价单子子表、价格审批单子子表直接查询处价格的详细信息
   *                   2 比较结果集中的ts，按照存货管理档案id+供应商id纬度选择最新价格信息，返回结果
   * 说明：新算法取消了第二次与数据库的交互，原算法在此操作中使用了临时表，有效率问题。
   */
  public EffectPriceVO[] getEffectAskPrice(String conditionA,
      String conditionB, String pk_corp) throws SQLException,BusinessException {

    EffectPriceVO[] effectPriceVOs = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    Vector vCmangid = new Vector();
    Hashtable hTmp1 = null;
    Hashtable hTmp2 = null;
    ResultSet rs = null;
    // 为查询有效价格子子表ID
    Connection con2 = null;
    PreparedStatement stmt2 = null;
    String sql0 = "select po_askbill_bb1.cvendormangid, po_askbill_bb1.ts,po_askbill_bb1.caskbill_bb1id,po_askbill_b.cmangid,po_askbill.ccurrencytypeid," +
    		" po_askbill_bb1.nquoteprice, po_askbill_bb1.nquotetaxprice, po_askbill_bb1.deliverdays, po_askbill_bb1.dvaliddate, " +
    		"po_askbill_bb1.dinvaliddate,  po_askbill_bb1.caskbillid,po_askbill_bb1.caskbill_bid,po_askbill.vaskbillcode," +
    		"po_askbill_bb1.ntaxrate,po_askbill_bb1.vbdef1,po_askbill_bb1.vbdef2,po_askbill_bb1.vbdef3,po_askbill_bb1.vbdef4," +
    		"po_askbill_bb1.vbdef5,po_askbill_bb1.vbdef6,po_askbill_bb1.vbdef7,po_askbill_bb1.vbdef8,po_askbill_bb1.vbdef9,po_askbill_bb1.vbdef10," +
    		"po_askbill_bb1.vbdef11,po_askbill_bb1.vbdef12,po_askbill_bb1.vbdef13,po_askbill_bb1.vbdef14,po_askbill_bb1.vbdef15,po_askbill_bb1.vbdef16," +
    		"po_askbill_bb1.vbdef17,po_askbill_bb1.vbdef18,po_askbill_bb1.vbdef19,po_askbill_bb1.vbdef20,po_askbill_bb1.pk_bdefdoc1,po_askbill_bb1.pk_bdefdoc2," +
    		"po_askbill_bb1.pk_bdefdoc3,po_askbill_bb1.pk_bdefdoc4,po_askbill_bb1.pk_bdefdoc5,po_askbill_bb1.pk_bdefdoc6,po_askbill_bb1.pk_bdefdoc7,po_askbill_bb1.pk_bdefdoc8," +
    		"po_askbill_bb1.pk_bdefdoc9,po_askbill_bb1.pk_bdefdoc10,po_askbill_bb1.pk_bdefdoc11,po_askbill_bb1.pk_bdefdoc12,po_askbill_bb1.pk_bdefdoc13," +
    		"po_askbill_bb1.pk_bdefdoc14,po_askbill_bb1.pk_bdefdoc15,po_askbill_bb1.pk_bdefdoc16,po_askbill_bb1.pk_bdefdoc17,po_askbill_bb1.pk_bdefdoc18," +
    		"po_askbill_bb1.pk_bdefdoc19,po_askbill_bb1.pk_bdefdoc20 ,po_askbill_bb1.creceiptareaid ,po_askbill_bb1.csendtypeid,po_askbill_bb1.cvendorbaseid  ";
    sql0 += "from po_askbill inner JOIN po_askbill_b ON po_askbill.caskbillid = po_askbill_b.caskbillid LEFT OUTER JOIN po_askbill_bb1 ON po_askbill_bb1.caskbillid = po_askbill_b.caskbillid AND  po_askbill_bb1.caskbill_bid = po_askbill_b.caskbill_bid ";
    sql0 += "left outer join bd_cumandoc on bd_cumandoc.pk_cumandoc = po_askbill_bb1.cvendormangid  ";
    sql0 += "inner join ( "; 
    sql0 += "   SELECT "; 
    sql0 += "     po_askbill_bb1.cvendormangid as cvendormangid, po_askbill_b.cmangid as cmangid,max(po_askbill_bb1.ts) as ts "; 
    sql0 += "   FROM  "; 
    sql0 += "     po_askbill inner JOIN po_askbill_b ON po_askbill.caskbillid = po_askbill_b.caskbillid LEFT OUTER JOIN po_askbill_bb1 ON po_askbill_bb1.caskbillid = po_askbill_b.caskbillid AND  po_askbill_bb1.caskbill_bid = po_askbill_b.caskbill_bid "; 
    sql0 += "         left outer join bd_cumandoc on bd_cumandoc.pk_cumandoc = po_askbill_bb1.cvendormangid  ";
    sql0 += "where " + conditionA +" and  UPPER(bd_cumandoc.frozenflag) <> 'Y' ";
    sql0 += " GROUP BY po_askbill_bb1.cvendormangid, po_askbill_b.cmangid "; 
    sql0 += ")  temp on temp.ts = po_askbill_bb1.ts and temp.cvendormangid=po_askbill_bb1.cvendormangid and temp.cmangid=po_askbill_b.cmangid ";
    sql0 += "where " + conditionA +" and  UPPER(bd_cumandoc.frozenflag) <> 'Y' ";
    Connection con3 = null;
    PreparedStatement stmt3 = null;
    String sql1 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit_b.cmangid," +
    		"po_priceaudit. ccurrencytypeid,po_priceaudit_bb1.nquoteprice, po_priceaudit_bb1.nquotetaxprice, po_priceaudit_bb1.deliverdays, " +
    		"po_priceaudit_bb1.dvaliddate, po_priceaudit_bb1.dinvaliddate, po_priceaudit_bb1.cpriceauditid,po_priceaudit_bb1.cpriceaudit_bid," +
    		"po_priceaudit.vpriceauditcode,po_priceaudit_bb1.ntaxrate," +
    		"po_priceaudit_bb1.vbdef1,po_priceaudit_bb1.vbdef2,po_priceaudit_bb1.vbdef3,po_priceaudit_bb1.vbdef4,po_priceaudit_bb1.vbdef5," +
    		"po_priceaudit_bb1.vbdef6,po_priceaudit_bb1.vbdef7,po_priceaudit_bb1.vbdef8,po_priceaudit_bb1.vbdef9,po_priceaudit_bb1.vbdef10," +
    		"po_priceaudit_bb1.vbdef11,po_priceaudit_bb1.vbdef12,po_priceaudit_bb1.vbdef13,po_priceaudit_bb1.vbdef14,po_priceaudit_bb1.vbdef15," +
    		"po_priceaudit_bb1.vbdef16,po_priceaudit_bb1.vbdef17,po_priceaudit_bb1.vbdef18,po_priceaudit_bb1.vbdef19,po_priceaudit_bb1.vbdef20," +
    		"po_priceaudit_bb1.pk_bdefdoc1,po_priceaudit_bb1.pk_bdefdoc2,po_priceaudit_bb1.pk_bdefdoc3,po_priceaudit_bb1.pk_bdefdoc4," +
    		"po_priceaudit_bb1.pk_bdefdoc5,po_priceaudit_bb1.pk_bdefdoc6,po_priceaudit_bb1.pk_bdefdoc7,po_priceaudit_bb1.pk_bdefdoc8," +
    		"po_priceaudit_bb1.pk_bdefdoc9,po_priceaudit_bb1.pk_bdefdoc10,po_priceaudit_bb1.pk_bdefdoc11,po_priceaudit_bb1.pk_bdefdoc12," +
    		"po_priceaudit_bb1.pk_bdefdoc13,po_priceaudit_bb1.pk_bdefdoc14,po_priceaudit_bb1.pk_bdefdoc15,po_priceaudit_bb1.pk_bdefdoc16," +
    		"po_priceaudit_bb1.pk_bdefdoc17,po_priceaudit_bb1.pk_bdefdoc18,po_priceaudit_bb1.pk_bdefdoc19,po_priceaudit_bb1.pk_bdefdoc20,  " +
    		"po_priceaudit_bb1.creceiptareaid ,po_priceaudit_bb1.csendtypeid,po_priceaudit_bb1.cvendorbaseid ";
    sql1 += "from po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
    sql1 += "left outer join bd_cumandoc on bd_cumandoc.pk_cumandoc = po_priceaudit_bb1.cvendormangid  ";
    sql1 += "inner join ( "; 
    sql1 += "   SELECT "; 
    sql1 += "     po_priceaudit_bb1.cvendormangid as cvendormangid, po_priceaudit_b.cmangid as cmangid,max(po_priceaudit_bb1.ts) as ts "; 
    sql1 += "   FROM  "; 
    sql1 += "     po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid "; 
    sql1 += "         left outer join bd_cumandoc on bd_cumandoc.pk_cumandoc = po_priceaudit_bb1.cvendormangid  ";
    sql1 += "where " + conditionB +" and  UPPER(bd_cumandoc.frozenflag) <> 'Y' ";
    sql1 += " GROUP BY po_priceaudit_bb1.cvendormangid, po_priceaudit_b.cmangid  "; 
    sql1 += ")  temp on temp.ts = po_priceaudit_bb1.ts and temp.cvendormangid=po_priceaudit_bb1.cvendormangid and temp.cmangid=po_priceaudit_b.cmangid ";
    sql1 += "where " + conditionB +" and  UPPER(bd_cumandoc.frozenflag) <> 'Y' ";

    try {
      // 查询有效价格子子表ID（询报价单）
      con2 = getConnection();
      stmt2 = con2.prepareStatement(sql0);
      rs = stmt2.executeQuery();
      //保存询报价单对应同一类存货最新价对应的组合ID(cmangid + cvendormangid)
      Hashtable hBaseIdForAskBill = new Hashtable();
      Vector vTempForAskbill = new Vector();
      
      String cvendormangid = null, cmangid = null,  ts = null;
      
      
      Vector vvv = null;
      EffectPriceVO effectPrice = null;
      while (rs.next()) {
        cvendormangid = rs.getString(1);
        ts = rs.getString(2);
        cmangid = rs.getString(4);
        if (cvendormangid != null
            && cmangid != null
            && !hBaseIdForAskBill.containsKey(cmangid
                + cvendormangid)) {
          effectPrice = new EffectPriceVO();
          //
          String cvendbaseid = rs.getString("cvendorbaseid");
          effectPrice.setCvendbaseid(cvendbaseid == null ? null
              : cvendbaseid.trim());
          
          String cvendmangid = rs.getString("cvendormangid");
          effectPrice.setCvendmangid(cvendmangid == null ? null
              : cvendmangid.trim());
          String ccurrencytypeid = rs.getString("ccurrencytypeid");
          effectPrice.setCcurrencytypeid(ccurrencytypeid == null ? null
              : ccurrencytypeid.trim());
          cmangid = rs.getString("cmangid");
          effectPrice.setCmangid(cmangid == null ? null : cmangid.trim());
          if (cmangid != null && cmangid.trim().length() > 0) {
            // 查询采购最新价
            vCmangid.add(cmangid);
          }
          String nquoteprice = rs.getString("nquoteprice");
          effectPrice.setNquoteprice(nquoteprice == null ? null
              : new UFDouble(nquoteprice.trim()));
          String nquotetaxprice = rs.getString("nquotetaxprice");
          effectPrice.setNquotetaxprice(nquotetaxprice == null ? null
              : new UFDouble(nquotetaxprice.trim()));
          String deliverdays = rs.getString("deliverdays");
          effectPrice.setDeliverdays(deliverdays == null ? null
              : new Integer(deliverdays.trim()));
          String dvalitdate = rs.getString("dvaliddate");
          effectPrice.setDvaliddate(dvalitdate == null ? null
              : new UFDate(dvalitdate.trim()));
          String dinvalitdate = rs.getString("dinvaliddate");
          effectPrice.setDinvaliddate(dinvalitdate == null ? null
              : new UFDate(dinvalitdate.trim()));
          String caskbillid = rs.getString("caskbillid");
          effectPrice.setVpriceauditbillid(caskbillid == null ? null
              : caskbillid.trim());
          String caskbill_bid = rs.getString("caskbill_bid");
          effectPrice.setVpriceauditbill_bid(caskbill_bid == null ? null
              : caskbill_bid.trim());
          String caskbill_bb1id = rs.getString("caskbill_bb1id");
          effectPrice
              .setVpriceauditbill_bbid(caskbill_bb1id == null ? null
                  : caskbill_bb1id.trim());
          String vaskbillcode = rs.getString("vaskbillcode");
          effectPrice.setVpriceauditcode(vaskbillcode == null ? null
              : vaskbillcode.trim());
          Object oTaxrate = rs.getObject("ntaxrate");
          effectPrice.setNtaxrate((oTaxrate == null || "".equals(oTaxrate.toString()
              .trim())) ? null : new UFDouble(oTaxrate.toString().trim()));
          String sTemp = rs.getString("vbdef1");
          effectPrice.setVbdef1(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef2");
          effectPrice.setVbdef2(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef3");
          effectPrice.setVbdef3(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef4");
          effectPrice.setVbdef4(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef5");
          effectPrice.setVbdef5(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef6");
          effectPrice.setVbdef6(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef7");
          effectPrice.setVbdef7(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef8");
          effectPrice.setVbdef8(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef9");
          effectPrice.setVbdef9(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef10");
          effectPrice.setVbdef10(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef11");
          effectPrice.setVbdef11(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef12");
          effectPrice.setVbdef12(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef13");
          effectPrice.setVbdef13(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef14");
          effectPrice.setVbdef14(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef15");
          effectPrice.setVbdef15(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef16");
          effectPrice.setVbdef16(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef17");
          effectPrice.setVbdef17(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef18");
          effectPrice.setVbdef18(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef19");
          effectPrice.setVbdef19(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef20");
          effectPrice.setVbdef20(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc1");
          effectPrice.setPk_bdefdoc1(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc2");
          effectPrice.setPk_bdefdoc2(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc3");
          effectPrice.setPk_bdefdoc3(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc4");
          effectPrice.setPk_bdefdoc4(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc5");
          effectPrice.setPk_bdefdoc5(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc6");
          effectPrice.setPk_bdefdoc6(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc7");
          effectPrice.setPk_bdefdoc7(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc8");
          effectPrice.setPk_bdefdoc8(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc9");
          effectPrice.setPk_bdefdoc9(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc10");
          effectPrice.setPk_bdefdoc10(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc11");
          effectPrice.setPk_bdefdoc11(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc12");
          effectPrice.setPk_bdefdoc12(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc13");
          effectPrice.setPk_bdefdoc13(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc14");
          effectPrice.setPk_bdefdoc14(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc15");
          effectPrice.setPk_bdefdoc15(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc16");
          effectPrice.setPk_bdefdoc16(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc17");
          effectPrice.setPk_bdefdoc17(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc18");
          effectPrice.setPk_bdefdoc18(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc19");
          effectPrice.setPk_bdefdoc19(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc20");
          effectPrice.setPk_bdefdoc20(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("creceiptareaid");
          effectPrice.setCreceiptareaid(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("csendtypeid");
          effectPrice.setCsendtypeid(sTemp == null ? null : sTemp.trim());
          // 设置价格类型为询报价单
          effectPrice.setFpricetype(new Integer(IPriceType.FROMASKBILL).toString());
          
          vvv = new Vector();
          vvv.add(ts);
          vvv.add(effectPrice);
          hBaseIdForAskBill.put(cmangid + cvendormangid, vvv);
          vTempForAskbill.add(cmangid + cvendormangid);
        }
      }
      rs.close();
      // 查询有效价格子子表ID（价格审批单）
      con3 = getConnection();
      stmt3 = con3.prepareStatement(sql1);
      rs = stmt3.executeQuery();
            //保存价格审批单对应同一类存货最新价对应的组合ID(cmangid + cvendormangid)
      Vector vTempForPriceAuditBill = new Vector();
      Hashtable hBaseIdForPriceAuditBill = new Hashtable();
      cvendormangid = null;
      cmangid = null;
      ts = null;
      String tsForAskbill = null;
      String tsForPriceAuditbill = null;
      while (rs.next()) {
        cvendormangid = rs.getString(1);
        ts = rs.getString(2);
        cmangid = rs.getString(4);
        vvv = new Vector();
        if (cvendormangid != null
            && cmangid != null
            && !hBaseIdForPriceAuditBill.containsKey(cmangid
                + cvendormangid)) {
          effectPrice = new EffectPriceVO();
          //
          String cvendbaseid = rs.getString("cvendorbaseid");
          effectPrice.setCvendbaseid(cvendbaseid == null ? null
              : cvendbaseid.trim());
          String cvendmangid = rs.getString("cvendormangid");
          effectPrice.setCvendmangid(cvendmangid == null ? null
              : cvendmangid.trim());
          String ccurrencytypeid = rs.getString("ccurrencytypeid");
          effectPrice.setCcurrencytypeid(ccurrencytypeid == null ? null
              : ccurrencytypeid.trim());
          cmangid = rs.getString("cmangid");
          effectPrice.setCmangid(cmangid == null ? null : cmangid.trim());
          if (cmangid != null && cmangid.trim().length() > 0) {
            // 查询采购最新价
            vCmangid.add(cmangid);
          }
          String nquoteprice = rs.getString("nquoteprice");
          effectPrice.setNquoteprice(nquoteprice == null ? null
              : new UFDouble(nquoteprice.trim()));
          String nquotetaxprice = rs.getString("nquotetaxprice");
          effectPrice.setNquotetaxprice(nquotetaxprice == null ? null
              : new UFDouble(nquotetaxprice.trim()));
          String deliverdays = rs.getString("deliverdays");
          effectPrice.setDeliverdays(deliverdays == null ? null
              : new Integer(deliverdays.trim()));
          String dvalitdate = rs.getString("dvaliddate");
          effectPrice.setDvaliddate(dvalitdate == null ? null
              : new UFDate(dvalitdate.trim()));
          String dinvalitdate = rs.getString("dinvaliddate");
          effectPrice.setDinvaliddate(dinvalitdate == null ? null
              : new UFDate(dinvalitdate.trim()));
          String caskbillid = rs.getString("cpriceauditid");
          effectPrice.setVpriceauditbillid(caskbillid == null ? null
              : caskbillid.trim());
          String caskbill_bid = rs.getString("cpriceaudit_bid");
          effectPrice.setVpriceauditbill_bid(caskbill_bid == null ? null
              : caskbill_bid.trim());
          String caskbill_bb1id = rs.getString("cpriceaudit_bb1id");
          effectPrice
              .setVpriceauditbill_bbid(caskbill_bb1id == null ? null
                  : caskbill_bb1id.trim());
          String vaskbillcode = rs.getString("vpriceauditcode");
          effectPrice.setVpriceauditcode(vaskbillcode == null ? null
              : vaskbillcode.trim());
          Object oTaxrate = rs.getObject("ntaxrate");
          effectPrice.setNtaxrate((oTaxrate == null || "".equals(oTaxrate.toString()
              .trim())) ? null : new UFDouble(oTaxrate.toString().trim()));
          String sTemp = rs.getString("vbdef1");
          effectPrice.setVbdef1(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef2");
          effectPrice.setVbdef2(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef3");
          effectPrice.setVbdef3(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef4");
          effectPrice.setVbdef4(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef5");
          effectPrice.setVbdef5(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef6");
          effectPrice.setVbdef6(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef7");
          effectPrice.setVbdef7(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef8");
          effectPrice.setVbdef8(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef9");
          effectPrice.setVbdef9(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef10");
          effectPrice.setVbdef10(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef11");
          effectPrice.setVbdef11(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef12");
          effectPrice.setVbdef12(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef13");
          effectPrice.setVbdef13(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef14");
          effectPrice.setVbdef14(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef15");
          effectPrice.setVbdef15(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef16");
          effectPrice.setVbdef16(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef17");
          effectPrice.setVbdef17(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef18");
          effectPrice.setVbdef18(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef19");
          effectPrice.setVbdef19(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("vbdef20");
          effectPrice.setVbdef20(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc1");
          effectPrice.setPk_bdefdoc1(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc2");
          effectPrice.setPk_bdefdoc2(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc3");
          effectPrice.setPk_bdefdoc3(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc4");
          effectPrice.setPk_bdefdoc4(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc5");
          effectPrice.setPk_bdefdoc5(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc6");
          effectPrice.setPk_bdefdoc6(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc7");
          effectPrice.setPk_bdefdoc7(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc8");
          effectPrice.setPk_bdefdoc8(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc9");
          effectPrice.setPk_bdefdoc9(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc10");
          effectPrice.setPk_bdefdoc10(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc11");
          effectPrice.setPk_bdefdoc11(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc12");
          effectPrice.setPk_bdefdoc12(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc13");
          effectPrice.setPk_bdefdoc13(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc14");
          effectPrice.setPk_bdefdoc14(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc15");
          effectPrice.setPk_bdefdoc15(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc16");
          effectPrice.setPk_bdefdoc16(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc17");
          effectPrice.setPk_bdefdoc17(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc18");
          effectPrice.setPk_bdefdoc18(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc19");
          effectPrice.setPk_bdefdoc19(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("pk_bdefdoc20");
          effectPrice.setPk_bdefdoc20(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("creceiptareaid");
          effectPrice.setCreceiptareaid(sTemp == null ? null : sTemp.trim());
          sTemp = rs.getString("csendtypeid");
          effectPrice.setCsendtypeid(sTemp == null ? null : sTemp.trim());
          
          // 设置价格类型为价格审批单
          effectPrice.setFpricetype(new Integer(IPriceType.FROMPRICEAUDITBILL).toString());
          
          vvv = new Vector();
          vvv.add(ts);
          vvv.add(effectPrice);
          hBaseIdForPriceAuditBill.put(cmangid + cvendormangid, vvv);
          vTempForPriceAuditBill.add(cmangid + cvendormangid);
        }
      }
      Object cvmangid = null;
      //询报价单与价格审批单比较
      for (int i = 0; i < vTempForAskbill.size(); i++) {
        cvmangid = vTempForAskbill.get(i);
        tsForAskbill = (String) ((Vector) hBaseIdForAskBill
            .get(cvmangid)).get(0);
        effectPrice = (EffectPriceVO)((Vector) hBaseIdForAskBill.get(cvmangid)).get(1);
        if (hBaseIdForAskBill.containsKey(cvmangid)
            && hBaseIdForPriceAuditBill.containsKey(cvmangid)) {
          tsForPriceAuditbill = (String) ((Vector) hBaseIdForPriceAuditBill
              .get(cvmangid)).get(0);
          if (new UFDateTime(tsForAskbill).before(new UFDateTime(
              tsForPriceAuditbill))
              || new UFDateTime(tsForAskbill)
                  .equals(new UFDateTime(tsForPriceAuditbill))) {
            effectPrice = (EffectPriceVO)((Vector) hBaseIdForPriceAuditBill.get(cvmangid)).get(1);
            v.add(effectPrice);
          } 
        } else {
          v.add(effectPrice);
        }
      }
            //价格审批单单与询报价单比较
      for (int i = 0; i < vTempForPriceAuditBill.size(); i++) {
        cvmangid = vTempForPriceAuditBill.get(i);

        tsForPriceAuditbill = (String) ((Vector) hBaseIdForPriceAuditBill
            .get(cvmangid)).get(0);
        
        effectPrice = (EffectPriceVO)((Vector) hBaseIdForPriceAuditBill.get(cvmangid)).get(1);
        if (hBaseIdForAskBill.containsKey(cvmangid)
            && hBaseIdForPriceAuditBill.containsKey(cvmangid)) {
          tsForAskbill = (String) ((Vector) hBaseIdForAskBill
              .get(cvmangid)).get(0);
          if (new UFDateTime(tsForPriceAuditbill).before(new UFDateTime(
              tsForAskbill))
              || new UFDateTime(tsForAskbill)
                  .equals(new UFDateTime(tsForPriceAuditbill))) {
            effectPrice = (EffectPriceVO)((Vector) hBaseIdForAskBill.get(cvmangid)).get(1);
            v.add(effectPrice);
          } 
        } else {
          v.add(effectPrice);
        }
      }
      rs.close();
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt2 != null) {
          stmt2.close();
        }
        if (stmt3 != null) {
          stmt3.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con2 != null) {
          con2.close();
        }
        if (con3 != null) {
          con3.close();
        }
      } catch (Exception e) {
      }
    }

    if (v.size() > 0) {
      effectPriceVOs = new EffectPriceVO[v.size()];
      v.copyInto(effectPriceVOs);
      String cmangid = null;
      // 查询采购最新价
      for (int i = 0; i < effectPriceVOs.length; i++) {
        cmangid = effectPriceVOs[i].getCmangid();
        hTmp1 = new Hashtable();
        hTmp1 = getPriceLastForThanVOHash(vCmangid, pk_corp);
        hTmp2 = new Hashtable();
        if (!hTmp2.containsKey(cmangid)) {
          if (hTmp1 != null && hTmp1.size() > 0) {
            if (hTmp1.get(cmangid) != null
                && hTmp1.get(cmangid).toString().trim()
                    .length() > 0) {
              effectPriceVOs[i].setLastprice((UFDouble) hTmp1
                  .get(cmangid));
              hTmp2.put(cmangid, (UFDouble) hTmp1.get(cmangid));
            }
          }
        } else {
          effectPriceVOs[i].setLastprice((UFDouble) hTmp2
              .get(cmangid));
        }
      }

    }

    return effectPriceVOs;
  }
  /**
   * 作者：zx 功能：为采购管理提供价格。 参数：String[] cmangids, 存货管理ID数组 String[]
   * cvendormangids, 供应商管理ID数组，与cmangids一一对应 String[] ccurrencyids,
   * 币种ID数组，与cmangids一一对应 String sPricePolicy 价格优先策略 返回：UFDouble[]
   * 与cmangids一一对应的供应商存货价格数组 例外： 日期：(2002-6-10 13:25:09)
   */

  public UFDouble[] queryPriceForPO(String[] cmangids,
      String[] cvendormangids, String[] ccurrencyids, String condition,
      String sPricePolicy) throws BusinessException {

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable priceForReturn = new Hashtable();

    UFDouble nPrice[] = new UFDouble[cmangids.length];


//    String sql1 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit_b.CMANGID ";
//    sql1 += "from po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
//    sql1 += "where " + condition;
//    sql1 += " GROUP BY po_priceaudit_bb1.cvendormangid, po_priceaudit_b.CMANGID,po_priceaudit_bb1.ts, po_priceaudit_bb1.cpriceaudit_bb1id ";
//    sql1 += "ORDER BY po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts DESC";
    
    String sql1 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit_b.cmangid ";
    sql1 += "from po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
    sql1 += "inner join ( "; 
    sql1 += "   SELECT "; 
    sql1 += "     po_priceaudit_bb1.cvendormangid as cvendormangid, po_priceaudit_b.cmangid as cmangid,max(po_priceaudit_bb1.ts) as ts "; 
    sql1 += "   FROM  "; 
    sql1 += "     po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid "; 
    sql1 += "where " + condition +" and po_priceaudit_b.dr = 0 and po_priceaudit_bb1.dr = 0 and po_priceaudit.dr = 0 ";
    sql1 += " GROUP BY po_priceaudit_bb1.cvendormangid, po_priceaudit_b.cmangid  "; 
    sql1 += ")  temp on temp.ts = po_priceaudit_bb1.ts and temp.cvendormangid=po_priceaudit_bb1.cvendormangid and temp.cmangid=po_priceaudit_b.cmangid ";
    sql1 += "where " + condition +" and po_priceaudit_b.dr = 0 and po_priceaudit_bb1.dr = 0 and po_priceaudit.dr = 0 ";
  //解决价格审批单新增最新单价后无法取出最新单价问题 2007.12.11
    sql1 += " order by po_priceaudit_bb1.cpriceaudit_bb1id desc ";

    String sql = null;
    if ("无税价格优先".equals(sPricePolicy.trim())) {
      sql = "select po_priceaudit_b.cmangid, po_priceaudit.ccurrencytypeid, ";
      sql += "po_priceaudit_bb1.nquoteprice ";
      sql += "from po_priceaudit inner join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid and po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
      sql += "where " + condition;
    } else if ("含税价格优先".equals(sPricePolicy.trim())) {
      sql = "select po_priceaudit_b.cmangid, po_priceaudit.ccurrencytypeid,";
      sql += "po_priceaudit_bb1.nquotetaxprice ";
      sql += "from po_priceaudit inner join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid and po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
      sql += "where " + condition ;
      
    } else {
      throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4004070101",
              "UPP4004070101-000068")
          + sPricePolicy/* @res "不支持" + sPricePolicy + "价格优先策略！" */);
    }
    // 查询有效价格子子表ID（询报价单）
    Connection con2 = null;
    PreparedStatement stmt2 = null;

    try {
      // 为查询有效价格子子表ID
      con2 = getConnection();
      stmt2 = con2.prepareStatement(sql1);
      rs = stmt2.executeQuery();
      Hashtable hBaseId = new Hashtable();
      String cvendormangid = null, pk = null, ts = null,cmangid = null;
      Vector vTempForPriceAuditBill = new Vector();
      Vector vvv = null;
      while (rs.next()) {
        cvendormangid = rs.getString(1);
        ts = rs.getString(2);
        pk = rs.getString(3);
        cmangid = rs.getString(4);
        if (cvendormangid != null && cvendormangid.trim().length() > 0 && cmangid != null && cmangid.trim().length() > 0 && pk != null
            && !hBaseId.containsKey(cvendormangid+cmangid)) {
          vvv = new Vector();
          vvv.add(pk);
          vvv.add(ts);
          hBaseId.put(cvendormangid+cmangid, vvv);
          vTempForPriceAuditBill.add(pk);
        }
      }
      rs.close();
      // 设定条件
      if (vTempForPriceAuditBill.size() > 0) {
        ArrayList listDisId = new ArrayList();
        for (int i = 0; i < vTempForPriceAuditBill.size(); i++) {
          if (vTempForPriceAuditBill.get(i) == null)
            continue;
          listDisId.add(vTempForPriceAuditBill.get(i));
        }
        if (listDisId.size() <= 0) {
          SCMEnv.out("NCMMOUT:@@=>未获取单据行存货管理档案ID，直接返回");
          return null;
        }
//        String strIdSet = null;
//        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
//        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
//            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
//            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//        if (strIdSet == null || "()".equals(strIdSet.trim())) {
//          throw new SQLException(nc.bs.ml.NCLangResOnserver
//              .getInstance().getStrByID("40040701",
//                  "UPP40040701-000031")/*
//                               * @res
//                               * "获取存货基本档案主键时出错！请稍后再试！"
//                               */);
//        }
        sql += SqlMethod.formInSQL("po_priceaudit_bb1.cpriceaudit_bb1id", listDisId);
//      " and po_priceaudit_bb1.cpriceaudit_bb1id in "
//            + strIdSet;
      }
      // 查询有效价格
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        Object o = rs.getObject(3);
        if (o != null)

          priceForReturn.put(s1 + s2, new UFDouble(o.toString()));




      }

      if (rs != null)
        rs.close();
    } catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt2 != null) {
          stmt2.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con2 != null) {
          con2.close();
        }
      } catch (Exception e) {
      }
    }
    for (int i = 0; i < cmangids.length; i++) {
      if (cmangids[i] != null && cmangids[i].trim().length() > 0
          && ccurrencyids[i] != null
          && ccurrencyids[i].trim().length() > 0) {
        Object oTemp = priceForReturn.get(cmangids[i] + ccurrencyids[i]);
        if (oTemp != null)

          nPrice[i] = (UFDouble) oTemp;
      }
    }

    return nPrice;
  }

  /**
   * 作者：zx 功能：为采购管理提供价格。 参数：String[] cmangids, 存货管理ID数组 String[]
   * cvendormangids, 供应商管理ID数组，与cmangids一一对应 String[] ccurrencyids,
   * 币种ID数组，与cmangids一一对应 String sPricePolicy 价格优先策略 返回：UFDouble[]
   * 与cmangids一一对应的供应商存货价格数组 例外： 日期：(2002-6-10 13:25:09)
   * 
   * 此处根据询价规则进行匹配价格、税率
   * 对于收货地区于运输方式：优先匹配收货地区，如果没有匹配值，则不用匹配运输方式
   * modify by donggq 2008-09-16
   */

  public UFDouble[][] queryPriceForPOOrder(String[] cmangids,
      String[] cvendormangids, String[] ccurrencyids, String condition,
      String sPricePolicy, String[] sRecieptAreas,
		String sSendtype ,String sTempTableName) throws BusinessException {

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Hashtable priceForReturn = new Hashtable();
    Hashtable taxrateForReturn = new Hashtable();
//    UFDouble nPrice[] = new UFDouble[cmangids.length];
    UFDouble[][] nPriceAndTaxrate = new UFDouble[cmangids.length][2];

    
    String sql1 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit_b.cmangid,po_priceaudit_bb1.creceiptareaid,po_priceaudit_bb1.csendtypeid ";
    sql1 += "from po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
    if(sTempTableName != null){
      sql1 += " inner join " + sTempTableName + " on po_priceaudit_b.cmangid = " + sTempTableName +".cmangid and po_priceaudit_bb1.cvendormangid = " + sTempTableName +".cvendormangid ";
    }
    sql1 += "inner join ( "; 
    sql1 += "   SELECT "; 
    sql1 += "     po_priceaudit_bb1.cvendormangid as cvendormangid, po_priceaudit_b.cmangid as cmangid," +
    		"po_priceaudit_bb1.creceiptareaid as creceiptareaid, po_priceaudit_bb1.csendtypeid  as csendtypeid," +
    		"po_priceaudit.ccurrencytypeid as ccurrencytypeid, " +
    		"max(po_priceaudit_bb1.ts) as ts "; 
    sql1 += "   FROM  "; 
    sql1 += "     po_priceaudit inner JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
    if(sTempTableName != null){
      sql1 += " inner join " + sTempTableName + " on po_priceaudit_b.cmangid = " + sTempTableName +".cmangid and po_priceaudit_bb1.cvendormangid = " + sTempTableName +".cvendormangid ";
    }
    sql1 += "where " + condition +" and po_priceaudit_b.dr = 0 and po_priceaudit_bb1.dr = 0 and po_priceaudit.dr = 0 ";
    sql1 += " GROUP BY po_priceaudit_bb1.cvendormangid, po_priceaudit_b.cmangid,po_priceaudit_bb1.creceiptareaid , po_priceaudit_bb1.csendtypeid , po_priceaudit.ccurrencytypeid  "; 
    sql1 += ")  temp on temp.ts = po_priceaudit_bb1.ts and temp.cvendormangid=po_priceaudit_bb1.cvendormangid and temp.cmangid=po_priceaudit_b.cmangid ";
    sql1 += "where " + condition +" and po_priceaudit_b.dr = 0 and po_priceaudit_bb1.dr = 0 and po_priceaudit.dr = 0 ";
  //解决价格审批单新增最新单价后无法取出最新单价问题 2007.12.11
    sql1 += " order by po_priceaudit_bb1.cpriceaudit_bb1id desc ";

    String sql = null;
    if ("无税价格优先".equals(sPricePolicy.trim())) {
      sql = "select po_priceaudit_b.cmangid, po_priceaudit.ccurrencytypeid, ";
      sql += "po_priceaudit_bb1.nquoteprice,po_priceaudit_bb1.ntaxrate,po_priceaudit_bb1.creceiptareaid,po_priceaudit_bb1.csendtypeid ";
      sql += "from po_priceaudit inner join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid and po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
      if(sTempTableName != null){
        sql += " inner join " + sTempTableName + " on po_priceaudit_b.cmangid = " + sTempTableName +".cmangid and po_priceaudit_bb1.cvendormangid = " + sTempTableName +".cvendormangid ";
      }
      sql += "where " + condition;
    } else if ("含税价格优先".equals(sPricePolicy.trim())) {
      sql = "select po_priceaudit_b.cmangid, po_priceaudit.ccurrencytypeid,";
      sql += "po_priceaudit_bb1.nquotetaxprice,po_priceaudit_bb1.ntaxrate,po_priceaudit_bb1.creceiptareaid,po_priceaudit_bb1.csendtypeid  ";
      sql += "from po_priceaudit inner join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid and po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
      if(sTempTableName != null){
        sql += " inner join " + sTempTableName + " on po_priceaudit_b.cmangid = " + sTempTableName +".cmangid and po_priceaudit_bb1.cvendormangid = " + sTempTableName +".cvendormangid ";
      }
      sql += "where po_priceaudit.dr = 0 and po_priceaudit_bb1.dr = 0 and po_priceaudit_b.dr = 0 and " + condition ;
      
    } else {
      throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4004070101",
              "UPP4004070101-000068")
          + sPricePolicy/* @res "不支持" + sPricePolicy + "价格优先策略！" */);
    }
    // 查询有效价格子子表ID（询报价单）
    Connection con2 = null;
    PreparedStatement stmt2 = null;

    try {
      // 为查询有效价格子子表ID
      con2 = getConnection();
      stmt2 = con2.prepareStatement(sql1);
      rs = stmt2.executeQuery();
      Hashtable hBaseId = new Hashtable();
      String cvendormangid = null, pk = null, ts = null,cmangid = null;
      Vector vTempForPriceAuditBill = new Vector();
      Vector vvv = null;
      while (rs.next()) {
        cvendormangid = rs.getString(1);
        ts = rs.getString(2);
        pk = rs.getString(3);
        cmangid = rs.getString(4);
        String creceiptareaid = rs.getString(5);
        String csendtype = rs.getString(6);
        if (cvendormangid != null && cvendormangid.trim().length() > 0 && cmangid != null && cmangid.trim().length() > 0 && pk != null
            && !hBaseId.containsKey(cvendormangid+cmangid+(creceiptareaid == null?"null":creceiptareaid)+(csendtype == null?"null":csendtype))) {
          vvv = new Vector();
          vvv.add(pk);
          vvv.add(ts);
          hBaseId.put(cvendormangid+cmangid+(creceiptareaid == null?"null":creceiptareaid)+(csendtype == null?"null":csendtype), vvv);
          vTempForPriceAuditBill.add(pk);
        }
      }
      rs.close();
      // 设定条件
      if (vTempForPriceAuditBill.size() > 0) {
        ArrayList listDisId = new ArrayList();
        for (int i = 0; i < vTempForPriceAuditBill.size(); i++) {
          if (vTempForPriceAuditBill.get(i) == null)
            continue;
          listDisId.add(vTempForPriceAuditBill.get(i));
        }
        if (listDisId.size() <= 0) {
          SCMEnv.out("NCMMOUT:@@=>未获取单据行存货管理档案ID，直接返回");
          return null;
        }
//        String strIdSet = null;
//        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
//        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
//            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
//            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//        if (strIdSet == null || "()".equals(strIdSet.trim())) {
//          throw new SQLException(nc.bs.ml.NCLangResOnserver
//              .getInstance().getStrByID("40040701",
//                  "UPP40040701-000031")/*
//                               * @res
//                               * "获取存货基本档案主键时出错！请稍后再试！"
//                               */);
//        }
        sql += SqlMethod.formInSQL("po_priceaudit_bb1.cpriceaudit_bb1id", listDisId);
//      " and po_priceaudit_bb1.cpriceaudit_bb1id in "
//            + strIdSet;
      }
      // 查询有效价格
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        String s1 = rs.getString(1);
        String s2 = rs.getString(2);
        Object o = rs.getObject(3);
        Object o2 = rs.getObject(4);
        String receivearea = rs.getString(5);
        String sendtype = rs.getString(6);
        if (o != null){
        	String key = s1 + s2;
        	if(receivearea == null){
        		key += "null";
        	}else{
        		key += receivearea;
        	}
        	if(sendtype == null){
        		key += "null";
        	}else{
        		key += sendtype;
        	}
          priceForReturn.put(key, new UFDouble(o.toString()));
          if(o2 != null){
        	  taxrateForReturn.put(key, new UFDouble(o2.toString()));
          }
        }
      }

      if (rs != null)
        rs.close();
    } catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt2 != null) {
          stmt2.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con2 != null) {
          con2.close();
        }
      } catch (Exception e) {
      }
    }
    HashMap<String, String> hmArea = queryArea(sRecieptAreas);
    
    //此处根据询价规则进行匹配价格、税率
    //对于收货地区于运输方式：优先匹配收货地区，如果没有匹配值，则不用匹配运输方式
    for (int i = 0; i < cmangids.length; i++) {
			if (cmangids[i] != null && cmangids[i].trim().length() > 0
					&& ccurrencyids[i] != null
					&& ccurrencyids[i].trim().length() > 0) {
				String Basekey = cmangids[i] + ccurrencyids[i];
				String key = "";
				/************先进行完全匹配****************/
				if (sRecieptAreas == null || sRecieptAreas[i] == null
						|| sRecieptAreas[i].trim().length() == 0) {
					key = Basekey + "null";
				} else {
					key = Basekey + sRecieptAreas[i];
				}
				if (sSendtype == null || sSendtype.trim().length() == 0) {
					key += "null";
				} else {
					key += sSendtype;
				}
				Object oTemp = priceForReturn.get(key);
				Object rate = taxrateForReturn.get(key);
				if (oTemp != null) {
					// 完整匹配
					nPriceAndTaxrate[i][0] = (UFDouble) oTemp;
					if (rate != null) {
						nPriceAndTaxrate[i][1] = (UFDouble) rate;
					}
					continue;
				}
				/**************end 如果找到则进行下次循环**************/
				/**************如果找不到，再进行收货地区优先匹配**************/
				// 优先匹配收货地区，运输方式为null
				if (sRecieptAreas == null || sRecieptAreas[i] == null
						|| sRecieptAreas[i].trim().length() == 0) {
					key = Basekey + "null";
				} else {
					key = Basekey + sRecieptAreas[i];
				}
				// 运输方式
				key += "null";
				Object oTemp2 = priceForReturn.get(key);
				Object rate2 = taxrateForReturn.get(key);
				if (oTemp2 != null) {
					nPriceAndTaxrate[i][0] = (UFDouble) oTemp2;
					if (rate2 != null) {
						nPriceAndTaxrate[i][1] = (UFDouble) rate2;
					}
					continue;
				} else if (sRecieptAreas != null 
						&& sRecieptAreas[i] != null
						&& sRecieptAreas[i].trim().length() != 0
						&& hmArea.containsKey(sRecieptAreas[i])) {
					// 收货地区有父节点，则找其父节点匹配
					UFDouble[][] tempPriceAndTaxrate = getAreaclPrice(
							priceForReturn, taxrateForReturn, hmArea, hmArea
									.get(sRecieptAreas[i]), Basekey);
					if (tempPriceAndTaxrate != null) {
						nPriceAndTaxrate[i] = tempPriceAndTaxrate[0];
						continue;
					}
				}
				/*************end 如果找到则进行下次循环***************/
				/**************如果找不到，再进行发运方式匹配**************/
				// 此时还没有找到价格，则继续按照发运方式查询
				// 匹配运输方式，收货地区为null
				key = Basekey + "null";
				// 运输方式
				if (sSendtype == null || sSendtype.trim().length() == 0) {
					key += "null";
				} else {
					key += sSendtype;
				}
				Object oTemp3 = priceForReturn.get(key);
				Object rate3 = taxrateForReturn.get(key);
				if (oTemp3 != null) {
					nPriceAndTaxrate[i][0] = (UFDouble) oTemp3;
					if (rate3 != null) {
						nPriceAndTaxrate[i][1] = (UFDouble) rate3;
					}
					continue;
				} 
				/************end****************/
				/************都找不到，则用都为空匹配****************/
					// 运输方式 null，收货地区 null
				key = Basekey + "nullnull";
				Object oTemp4 = priceForReturn.get(key);
				Object rate4 = taxrateForReturn.get(key);
				if (oTemp4 != null) {
					nPriceAndTaxrate[i][0] = (UFDouble) oTemp4;
					if (rate4 != null) {
						nPriceAndTaxrate[i][1] = (UFDouble) rate4;
					}
				}
				/****************************/
			}
		}

    return nPriceAndTaxrate;
  }
  
  /**
	 * 
	 * 查询收货地区分类以及她们的父亲收货地区分类，备用明细查询
	 * <p>
	 * <b>examples:</b>
	 * <p>
	 * 使用示例
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param sarea
	 * @return
	 * @throws BusinessException
	 *             <p>
	 * @author donggq
	 * @time 2008-9-18 上午09:14:25
	 */
  private HashMap<String, String> queryArea(String[] sarea)throws BusinessException{
	  HashMap<String, String> hmRet = new HashMap<String, String>();
	  if(sarea == null || sarea.length == 0){
		  return hmRet;
	  }
	  String sql = "select PK_AREACL,PK_FATHERAREA from BD_AREACL where PK_AREACL = PK_AREACL"
		  +SqlMethod.formInSQL("PK_AREACL", sarea);
	  Connection con = null;
	  PreparedStatement stmt = null;
	  ResultSet rs = null;
	  try{
		  con = getConnection();
	      stmt = con.prepareStatement(sql);
	      rs = stmt.executeQuery();
	      while (rs.next()) {
	        String pk_areacl = rs.getString(1);
	        String pk_father = rs.getString(2);
	        if(pk_father != null){
	        	hmRet.put(pk_areacl, pk_father);
	        }
	      }
	      if (rs != null)
	        rs.close();
	      HashMap<String, String> hmTemp = (HashMap<String, String>)hmRet.clone();
	      while(hmTemp.size() > 0){
	    	  sql = "select PK_AREACL,PK_FATHERAREA from BD_AREACL where PK_AREACL = PK_AREACL"
	    		  +SqlMethod.formInSQL("PK_AREACL", hmTemp.values().toArray(new String[hmTemp.values().size()]));
	    	  con = getConnection();
	    	  stmt = con.prepareStatement(sql);
	    	  rs = stmt.executeQuery();
	    	  hmTemp = new HashMap<String, String>();
	    	  while (rs.next()) {
	    		  String pk_areacl = rs.getString(1);
	    		  String pk_father = rs.getString(2);
	    		  if(pk_father != null){
	    			  hmTemp.put(pk_areacl, pk_father);
	    		  }
	    	  }
	    	  if (rs != null)
	    		  rs.close();
	    	  hmRet.putAll(hmTemp);
	      }
	  }catch (SQLException e) {
	      PubDMO.throwBusinessException(e);
	    } catch (Exception e) {
	      // TODO 自动生成 catch 块
	      SCMEnv.out(e.getMessage());
	    } finally {
	      try {
	        if (rs != null)
	          rs.close();
	      } catch (Exception e) {

	      }
	      try {
	        if (stmt != null) {
	          stmt.close();
	        }
	      } catch (Exception e) {
	      }
	      try {
	        if (con != null) {
	          con.close();
	        }
	      } catch (Exception e) {
	      }
	    }
	  return hmRet;
  }
  private UFDouble[][] getAreaclPrice(Hashtable priceForReturn,Hashtable taxrateForReturn,HashMap<String, String> hmAreaClInfo,String sAreacl,String sBaseKey){
	  UFDouble[][] priceAndTaxrate= new UFDouble[1][2];
	  if(sAreacl == null || sAreacl.trim().length() == 0){
		  sAreacl = "null";
	  }
	  String key = sBaseKey+sAreacl+"null";
	  if(priceForReturn.containsKey(key)){
		  priceAndTaxrate[0][0] =  (UFDouble)priceForReturn.get(key);
		  priceAndTaxrate[0][1] = (UFDouble)taxrateForReturn.get(key);
		  return priceAndTaxrate;
	  }else if(hmAreaClInfo.containsKey(sAreacl)){
		  return getAreaclPrice(priceForReturn, taxrateForReturn, hmAreaClInfo, hmAreaClInfo.get(sAreacl), sBaseKey);
	  }else{
		  return null;
	  }
  }
  
  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public EffectPriceVO[] getEffectPriceForOrder(String condition)
      throws SQLException {

    EffectPriceVO[] effectPriceVOs = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    // 为查询有效价格子子表ID
    Connection con2 = null;
    PreparedStatement stmt2 = null;
    String sql1 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts,po_priceaudit_bb1.cpriceaudit_bb1id ";
    sql1 += "from po_priceaudit LEFT OUTER JOIN po_priceaudit_b ON po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid LEFT OUTER JOIN po_priceaudit_bb1 ON po_priceaudit_bb1.cpriceauditid = po_priceaudit_b.cpriceauditid AND  po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ";
    sql1 += "where " + condition;
    sql1 += " GROUP BY po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts, po_priceaudit_bb1.cpriceaudit_bb1id ";
    sql1 += "ORDER BY po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.ts DESC";
    Connection con4 = null;
    PreparedStatement stmt4 = null;
    String sql2 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit. ccurrencytypeid, po_priceaudit_b. cmangid,";
    sql2 += "po_priceaudit_bb1.nquoteprice, po_priceaudit_bb1.nquotetaxprice, po_priceaudit_bb1.deliverdays, po_priceaudit_bb1.dvaliddate, po_priceaudit_bb1.dinvaliddate, po_priceaudit_bb1.ts, ";
    sql2 += "po_priceaudit_bb1.cpriceauditid,po_priceaudit_bb1.cpriceaudit_bid,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit.vpriceauditcode ";
    sql2 += "from po_priceaudit left outer join po_priceaudit_b on po_priceaudit. cpriceauditid = po_priceaudit_b. cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1. cpriceauditid = po_priceaudit_b. cpriceauditid and po_priceaudit_bb1. cpriceaudit_bid = po_priceaudit_b. cpriceaudit_bid ";
    sql2 += "where " + condition;

    try {
      // 查询有效价格子子表ID（询报价单）
      con2 = getConnection();
      stmt2 = con2.prepareStatement(sql1);
      rs = stmt2.executeQuery();
      Hashtable hBaseId = new Hashtable();
      String cvendormangid = null, pk = null, ts = null;
      Vector vTempForPriceAuditBill = new Vector();
      Vector vvv = null;
      while (rs.next()) {
        cvendormangid = rs.getString(1);
        ts = rs.getString(2);
        pk = rs.getString(3);
        if (cvendormangid != null && pk != null
            && !hBaseId.containsKey(cvendormangid)) {
          vvv = new Vector();
          vvv.add(pk);
          vvv.add(ts);
          hBaseId.put(cvendormangid, vvv);
          vTempForPriceAuditBill.add(pk);
        }
      }
      rs.close();
      // 设定条件
      if (vTempForPriceAuditBill.size() > 0) {
        ArrayList listDisId = new ArrayList();
        for (int i = 0; i < vTempForPriceAuditBill.size(); i++) {
          if (vTempForPriceAuditBill.get(i) == null)
            continue;
          listDisId.add(vTempForPriceAuditBill.get(i));
        }
        if (listDisId.size() <= 0) {
          SCMEnv.out("NCMMOUT:@@=>未获取单据行存货管理档案ID，直接返回");
          return effectPriceVOs;
        }
//        String strIdSet = null;
//        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
//        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
//            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
//            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//        if (strIdSet == null || "()".equals(strIdSet.trim())) {
//          throw new SQLException(nc.bs.ml.NCLangResOnserver
//              .getInstance().getStrByID("40040701",
//                  "UPP40040701-000031")/*
//                               * @res
//                               * "获取存货基本档案主键时出错！请稍后再试！"
//                               */);
//        }
        sql2 += SqlMethod.formInSQL("po_priceaudit_bb1.cpriceaudit_bb1id", listDisId);
//          " and po_priceaudit_bb1.cpriceaudit_bb1id in "
//            + strIdSet;
      }
      // 查询有效价格(价格审批单)
      con4 = getConnection();
      stmt4 = con4.prepareStatement(sql2);
      rs = stmt4.executeQuery();
      EffectPriceVO effectPrice = null;
      while (rs.next()) {
        effectPrice = new EffectPriceVO();
        //
        String cvendmangid = rs.getString("cvendormangid");
        effectPrice.setCvendmangid(cvendmangid == null ? null
            : cvendmangid.trim());
        String ccurrencytypeid = rs.getString("ccurrencytypeid");
        effectPrice.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        String cmangid = rs.getString("cmangid");
        effectPrice.setCmangid(cmangid == null ? null : cmangid.trim());
        String nquoteprice = rs.getString("nquoteprice");
        effectPrice.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.trim()));
        String nquotetaxprice = rs.getString("nquotetaxprice");
        effectPrice.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.trim()));
        String deliverdays = rs.getString("deliverdays");
        effectPrice.setDeliverdays(deliverdays == null ? null
            : new Integer(deliverdays.trim()));
        String dvalitdate = rs.getString("dvaliddate");
        effectPrice.setDvaliddate(dvalitdate == null ? null
            : new UFDate(dvalitdate.trim()));
        String dinvalitdate = rs.getString("dinvaliddate");
        effectPrice.setDinvaliddate(dinvalitdate == null ? null
            : new UFDate(dinvalitdate.trim()));
        String caskbillid = rs.getString("cpriceauditid");
        effectPrice.setVpriceauditbillid(caskbillid == null ? null
            : caskbillid.trim());
        String caskbill_bid = rs.getString("cpriceaudit_bid");
        effectPrice.setVpriceauditbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        String caskbill_bb1id = rs.getString("cpriceaudit_bb1id");
        effectPrice
            .setVpriceauditbill_bbid(caskbill_bb1id == null ? null
                : caskbill_bb1id.trim());
        String vaskbillcode = rs.getString("vpriceauditcode");
        effectPrice.setVpriceauditcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        v.addElement(effectPrice);
      }
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt2 != null) {
          stmt2.close();
        }
        if (stmt4 != null) {
          stmt4.close();
        }
        if (con2 != null) {
          con2.close();
        }
        if (con4 != null) {
          con4.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    effectPriceVOs = new EffectPriceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(effectPriceVOs);
    }

    return effectPriceVOs;
  }

  /**
   * 通过公司查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @throws Exception
   */
  public EffectPriceVO[] getPriceForVendor(String conditionA,
      String conditionB) throws BusinessException {

    EffectPriceVO[] effectPriceVOs = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    String sql = "select po_askbill_bb1. cvendormangid, po_askbill. ccurrencytypeid, po_askbill_b. cmangid,";
    sql += "po_askbill_bb1.nquoteprice, po_askbill_bb1.nquotetaxprice, po_askbill_bb1.deliverdays, po_askbill_bb1.dvaliddate, po_askbill_bb1.dinvaliddate, po_askbill_bb1.ts, ";
    sql += "po_askbill_bb1.caskbillid,po_askbill_bb1.caskbill_bid,po_askbill_bb1.caskbill_bb1id,po_askbill.vaskbillcode ";
    sql += "from po_askbill left outer join po_askbill_b on po_askbill. caskbillid = po_askbill_b. caskbillid  left outer join po_askbill_bb1 on po_askbill_bb1. caskbillid = po_askbill_b. caskbillid and po_askbill_bb1. caskbill_bid = po_askbill_b. caskbill_bid ";
    sql += "where " + conditionA;
    Connection con1 = null;
    PreparedStatement stmt1 = null;
    String sql2 = "select po_priceaudit_bb1.cvendormangid, po_priceaudit. ccurrencytypeid, po_priceaudit_b. cmangid,";
    sql2 += "po_priceaudit_bb1.nquoteprice, po_priceaudit_bb1.nquotetaxprice, po_priceaudit_bb1.deliverdays, po_priceaudit_bb1.dvaliddate, po_priceaudit_bb1.dinvaliddate, po_priceaudit_bb1.ts, ";
    sql2 += "po_priceaudit_bb1.cpriceauditid,po_priceaudit_bb1.cpriceaudit_bid,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit.vpriceauditcode ";
    sql2 += "from po_priceaudit left outer join po_priceaudit_b on po_priceaudit. cpriceauditid = po_priceaudit_b. cpriceauditid  left outer join po_priceaudit_bb1 on po_priceaudit_bb1. cpriceauditid = po_priceaudit_b. cpriceauditid and po_priceaudit_bb1. cpriceaudit_bid = po_priceaudit_b. cpriceaudit_bid ";
    sql2 += "where " + conditionB;

    try {
      // 查询有效价格(询报价单)
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      EffectPriceVO effectPrice = null;
      while (rs.next()) {
        effectPrice = new EffectPriceVO();
        //
        String cvendmangid = rs.getString("cvendormangid");
        effectPrice.setCvendmangid(cvendmangid == null ? null
            : cvendmangid.trim());
        String ccurrencytypeid = rs.getString("ccurrencytypeid");
        effectPrice.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        String cmangid = rs.getString("cmangid");
        effectPrice.setCmangid(cmangid == null ? null : cmangid.trim());
        String nquoteprice = rs.getString("nquoteprice");
        effectPrice.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.trim()));
        String nquotetaxprice = rs.getString("nquotetaxprice");
        effectPrice.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.trim()));
        String deliverdays = rs.getString("deliverdays");
        effectPrice.setDeliverdays(deliverdays == null ? null
            : new Integer(deliverdays.trim()));
        String dvalitdate = rs.getString("dvaliddate");
        effectPrice.setDvaliddate(dvalitdate == null ? null
            : new UFDate(dvalitdate.trim()));
        String dinvalitdate = rs.getString("dinvaliddate");
        effectPrice.setDinvaliddate(dinvalitdate == null ? null
            : new UFDate(dinvalitdate.trim()));
        String caskbillid = rs.getString("caskbillid");
        effectPrice.setVpriceauditbillid(caskbillid == null ? null
            : caskbillid.trim());
        String caskbill_bid = rs.getString("caskbill_bid");
        effectPrice.setVpriceauditbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        String caskbill_bb1id = rs.getString("caskbill_bb1id");
        effectPrice
            .setVpriceauditbill_bbid(caskbill_bb1id == null ? null
                : caskbill_bb1id.trim());
        String vaskbillcode = rs.getString("vaskbillcode");
        effectPrice.setVpriceauditcode(vaskbillcode == null ? null
            : vaskbillcode.trim());

        v.addElement(effectPrice);
      }
      rs.close();
      // 查询有效价格(价格审批单)
      con1 = getConnection();
      stmt1 = con1.prepareStatement(sql2);
      rs = stmt1.executeQuery();
      effectPrice = null;
      while (rs.next()) {
        effectPrice = new EffectPriceVO();
        //
        String cvendmangid = rs.getString("cvendormangid");
        effectPrice.setCvendmangid(cvendmangid == null ? null
            : cvendmangid.trim());
        String ccurrencytypeid = rs.getString("ccurrencytypeid");
        effectPrice.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        String cmangid = rs.getString("cmangid");
        effectPrice.setCmangid(cmangid == null ? null : cmangid.trim());
        String nquoteprice = rs.getString("nquoteprice");
        effectPrice.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.trim()));
        String nquotetaxprice = rs.getString("nquotetaxprice");
        effectPrice.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.trim()));
        String deliverdays = rs.getString("deliverdays");
        effectPrice.setDeliverdays(deliverdays == null ? null
            : new Integer(deliverdays.trim()));
        String dvalitdate = rs.getString("dvaliddate");
        effectPrice.setDvaliddate(dvalitdate == null ? null
            : new UFDate(dvalitdate.trim()));
        String dinvalitdate = rs.getString("dinvaliddate");
        effectPrice.setDinvaliddate(dinvalitdate == null ? null
            : new UFDate(dinvalitdate.trim()));
        String caskbillid = rs.getString("cpriceauditid");
        effectPrice.setVpriceauditbillid(caskbillid == null ? null
            : caskbillid.trim());
        String caskbill_bid = rs.getString("cpriceaudit_bid");
        effectPrice.setVpriceauditbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        String caskbill_bb1id = rs.getString("cpriceaudit_bb1id");
        effectPrice
            .setVpriceauditbill_bbid(caskbill_bb1id == null ? null
                : caskbill_bb1id.trim());
        String vaskbillcode = rs.getString("vpriceauditcode");
        effectPrice.setVpriceauditcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        v.addElement(effectPrice);
      }
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
        if (stmt1 != null) {
          stmt1.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
        if (con1 != null) {
          con1.close();
        }
      } catch (Exception e) {
      }
    }
    effectPriceVOs = new EffectPriceVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(effectPriceVOs);
    }

    return effectPriceVOs;
  }

  /**
   * 判断请购单是否有相应后续询价单 参数：String[] saRowId 请购单行数组 返回值：UFBoolean[] uaExistAfter
   * 注：true表示请购单行存在后续单据，false表示不存在 创建日期：(2005-8-9)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public UFBoolean[] queryIfExecPray(String[] saRowId) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "queryIfExecPray",
        new Object[] { saRowId });
    /** ********************************************************** */
    UFBoolean[] uaExistAfter = new UFBoolean[saRowId.length];
    StringBuffer rowIdCon = new StringBuffer();
    String rowId = null;
    for (int i = 0; i < saRowId.length; i++) {
      rowId = saRowId[i];
      if (i < saRowId.length - 1) {
        rowIdCon.append("'");
        rowIdCon.append(rowId);
        rowIdCon.append("',");
      } else if (i == saRowId.length - 1) {
        rowIdCon.append("'");
        rowIdCon.append(rowId);
        rowIdCon.append("'");
      }

    }
    String sql = "select caskbill_bid,  cupsourcebillrowid  ";
    sql += "from po_askbill_b ";
    sql += "where cupsourcebilltype = '20' ";
    sql += "and dr = 0 ";
    if (rowIdCon.length() > 1) {
      sql += "and cupsourcebillrowid in( " + rowIdCon.toString() + ")";
    }

    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        if (cupsourcebillrowid != null) {
          v.addElement(cupsourcebillrowid);
        }
      }
      for (int i = 0; i < saRowId.length; i++) {
        rowId = saRowId[i];
        if (v.contains(rowId)) {
          uaExistAfter[i] = new UFBoolean(true);
        } else {
          uaExistAfter[i] = new UFBoolean(false);
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "queryIfExecPray",
        new Object[] { saRowId });
    /** ********************************************************** */

    return uaExistAfter;
  }

  /**
   * 判断请购单是否有相应后续询价单 参数：String[] saRowId 请购单行数组 返回值：UFBoolean[] uaExistAfter
   * 注：true表示请购单行存在后续单据，false表示不存在 创建日期：(2005-8-9)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public Hashtable queryEmailAddrForAskSend(String[] saRowId)
      throws SQLException {

    Hashtable result = new Hashtable();
    StringBuffer rowIdCon = new StringBuffer();
    String rowId = null;
    for (int i = 0; i < saRowId.length; i++) {
      rowId = saRowId[i];
      if (i < saRowId.length - 1) {
        rowIdCon.append("'");
        rowIdCon.append(rowId);
        rowIdCon.append("',");
      } else if (i == saRowId.length - 1) {
        rowIdCon.append("'");
        rowIdCon.append(rowId);
        rowIdCon.append("'");
      }

    }
    String sql = "select bd_cumandoc.pk_cumandoc as pk_cumandoc,  bd_cubasdoc.email as  email ";
    sql += "from bd_cubasdoc , bd_cumandoc ";
    sql += "where bd_cubasdoc.pk_cubasdoc = bd_cumandoc.pk_cubasdoc ";
    if (rowIdCon.length() > 1) {
      sql += "and bd_cumandoc.pk_cumandoc in( " + rowIdCon.toString()
          + ") ";
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      String pk_cumandoc = null;
      String email = null;
      while (rs.next()) {
        pk_cumandoc = rs.getString("pk_cumandoc");
        email = rs.getString("email");
        if (pk_cumandoc != null
            && pk_cumandoc.trim().length() > 0
            && email != null
            && email.trim().length() > 0) {
          if (!result.containsKey(pk_cumandoc)) {
            result.put(pk_cumandoc, email);
          }
        }
      }

    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return result;
  }

  /**
   * 向数据库插入一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillHeaderVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String insertHeader(AskbillHeaderVO askbillHeader)
      throws java.sql.SQLException {

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = null;
    ResultSet rs = null;
    try {
      sql = "insert into po_askbill(caskbillid, pk_corp, vaskbillcode, cdeptid, cemployeeid, ccurrencytypeid, dclosedate, caskpsn, daskdate, cquotepsn, dquotedate, ctermprotocolid, caccountyear, ibillstatus, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10,pk_purorg, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,vmemo,bpurchase,tmaketime,tlastmaketime) values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
      con = getConnection();
      stmt = con.prepareStatement(sql);

      // set PK fields:
      key = getOID(askbillHeader.getPk_corp());
      stmt.setString(1, key);
      // set non PK fields:
      if (askbillHeader.getPk_corp() == null) {
        stmt.setNull(2, Types.CHAR);
      } else {
        stmt.setString(2, askbillHeader.getPk_corp());
      }
      if (askbillHeader.getVaskbillcode() == null) {
        stmt.setNull(3, Types.CHAR);
      } else {
        stmt.setString(3, askbillHeader.getVaskbillcode());
      }
      if (askbillHeader.getCdeptid() == null) {
        stmt.setNull(4, Types.CHAR);
      } else {
        stmt.setString(4, askbillHeader.getCdeptid());
      }
      if (askbillHeader.getCemployeeid() == null) {
        stmt.setNull(5, Types.CHAR);
      } else {
        stmt.setString(5, askbillHeader.getCemployeeid());
      }
      if (askbillHeader.getCcurrencytypeid() == null) {
        stmt.setNull(6, Types.CHAR);
      } else {
        stmt.setString(6, askbillHeader.getCcurrencytypeid());
      }
      if (askbillHeader.getDclosedate() == null) {
        stmt.setNull(7, Types.CHAR);
      } else {
        stmt.setString(7, askbillHeader.getDclosedate().toString());
      }
      if (askbillHeader.getCaskpsn() == null) {
        stmt.setNull(8, Types.CHAR);
      } else {
        stmt.setString(8, askbillHeader.getCaskpsn());
      }
      if (askbillHeader.getDaskdate() == null) {
        stmt.setNull(9, Types.CHAR);
      } else {
        stmt.setString(9, askbillHeader.getDaskdate().toString());
      }
      if (askbillHeader.getCquotepsn() == null) {
        stmt.setNull(10, Types.CHAR);
      } else {
        stmt.setString(10, askbillHeader.getCquotepsn());
      }
      if (askbillHeader.getDquotedate() == null) {
        stmt.setNull(11, Types.CHAR);
      } else {
        stmt.setString(11, askbillHeader.getDquotedate().toString());
      }
      if (askbillHeader.getCtermprotocolid() == null) {
        stmt.setNull(12, Types.CHAR);
      } else {
        stmt.setString(12, askbillHeader.getCtermprotocolid());
      }
      if (askbillHeader.getCaccountyear() == null) {
        stmt.setNull(13, Types.CHAR);
      } else {
        stmt.setString(13, askbillHeader.getCaccountyear());
      }
      if (askbillHeader.getIbillstatus() == null) {
        stmt.setString(14, "0");
      } else {
        stmt.setString(14, new Integer(askbillHeader.getIbillstatus())
            .toString());
      }
      if (askbillHeader.getVdef1() == null) {
        stmt.setNull(15, Types.CHAR);
      } else {
        stmt.setString(15, askbillHeader.getVdef1());
      }
      if (askbillHeader.getVdef2() == null) {
        stmt.setNull(16, Types.CHAR);
      } else {
        stmt.setString(16, askbillHeader.getVdef2());
      }
      if (askbillHeader.getVdef3() == null) {
        stmt.setNull(17, Types.CHAR);
      } else {
        stmt.setString(17, askbillHeader.getVdef3());
      }
      if (askbillHeader.getVdef4() == null) {
        stmt.setNull(18, Types.CHAR);
      } else {
        stmt.setString(18, askbillHeader.getVdef4());
      }
      if (askbillHeader.getVdef5() == null) {
        stmt.setNull(19, Types.CHAR);
      } else {
        stmt.setString(19, askbillHeader.getVdef5());
      }
      if (askbillHeader.getVdef6() == null) {
        stmt.setNull(20, Types.CHAR);
      } else {
        stmt.setString(20, askbillHeader.getVdef6());
      }
      if (askbillHeader.getVdef7() == null) {
        stmt.setNull(21, Types.CHAR);
      } else {
        stmt.setString(21, askbillHeader.getVdef7());
      }
      if (askbillHeader.getVdef8() == null) {
        stmt.setNull(22, Types.CHAR);
      } else {
        stmt.setString(22, askbillHeader.getVdef8());
      }
      if (askbillHeader.getVdef9() == null) {
        stmt.setNull(23, Types.CHAR);
      } else {
        stmt.setString(23, askbillHeader.getVdef9());
      }
      if (askbillHeader.getVdef10() == null) {
        stmt.setNull(24, Types.CHAR);
      } else {
        stmt.setString(24, askbillHeader.getVdef10());
      }
      if (askbillHeader.getPk_purorg() == null) {
        stmt.setNull(25, Types.CHAR);
      } else {
        stmt.setString(25, askbillHeader.getPk_purorg());
      }
      if (askbillHeader.getVdef11() == null) {
        stmt.setNull(26, Types.CHAR);
      } else {
        stmt.setString(26, askbillHeader.getVdef11());
      }
      if (askbillHeader.getVdef12() == null) {
        stmt.setNull(27, Types.CHAR);
      } else {
        stmt.setString(27, askbillHeader.getVdef12());
      }
      if (askbillHeader.getVdef13() == null) {
        stmt.setNull(28, Types.CHAR);
      } else {
        stmt.setString(28, askbillHeader.getVdef13());
      }
      if (askbillHeader.getVdef14() == null) {
        stmt.setNull(29, Types.CHAR);
      } else {
        stmt.setString(29, askbillHeader.getVdef14());
      }
      if (askbillHeader.getVdef15() == null) {
        stmt.setNull(30, Types.CHAR);
      } else {
        stmt.setString(30, askbillHeader.getVdef15());
      }
      if (askbillHeader.getVdef16() == null) {
        stmt.setNull(31, Types.CHAR);
      } else {
        stmt.setString(31, askbillHeader.getVdef16());
      }
      if (askbillHeader.getVdef17() == null) {
        stmt.setNull(32, Types.CHAR);
      } else {
        stmt.setString(32, askbillHeader.getVdef17());
      }
      if (askbillHeader.getVdef18() == null) {
        stmt.setNull(33, Types.CHAR);
      } else {
        stmt.setString(33, askbillHeader.getVdef18());
      }
      if (askbillHeader.getVdef19() == null) {
        stmt.setNull(34, Types.CHAR);
      } else {
        stmt.setString(34, askbillHeader.getVdef19());
      }
      if (askbillHeader.getVdef20() == null) {
        stmt.setNull(35, Types.CHAR);
      } else {
        stmt.setString(35, askbillHeader.getVdef20());
      }
      if (askbillHeader.getPk_defdoc1() == null) {
        stmt.setNull(36, Types.CHAR);
      } else {
        stmt.setString(36, askbillHeader.getPk_defdoc1());
      }
      if (askbillHeader.getPk_defdoc2() == null) {
        stmt.setNull(37, Types.CHAR);
      } else {
        stmt.setString(37, askbillHeader.getPk_defdoc2());
      }
      if (askbillHeader.getPk_defdoc3() == null) {
        stmt.setNull(38, Types.CHAR);
      } else {
        stmt.setString(38, askbillHeader.getPk_defdoc3());
      }
      if (askbillHeader.getPk_defdoc4() == null) {
        stmt.setNull(39, Types.CHAR);
      } else {
        stmt.setString(39, askbillHeader.getPk_defdoc4());
      }
      if (askbillHeader.getPk_defdoc5() == null) {
        stmt.setNull(40, Types.CHAR);
      } else {
        stmt.setString(40, askbillHeader.getPk_defdoc5());
      }
      if (askbillHeader.getPk_defdoc6() == null) {
        stmt.setNull(41, Types.CHAR);
      } else {
        stmt.setString(41, askbillHeader.getPk_defdoc6());
      }
      if (askbillHeader.getPk_defdoc7() == null) {
        stmt.setNull(42, Types.CHAR);
      } else {
        stmt.setString(42, askbillHeader.getPk_defdoc7());
      }
      if (askbillHeader.getPk_defdoc8() == null) {
        stmt.setNull(43, Types.CHAR);
      } else {
        stmt.setString(43, askbillHeader.getPk_defdoc8());
      }
      if (askbillHeader.getPk_defdoc9() == null) {
        stmt.setNull(44, Types.CHAR);
      } else {
        stmt.setString(44, askbillHeader.getPk_defdoc9());
      }
      if (askbillHeader.getPk_defdoc10() == null) {
        stmt.setNull(45, Types.CHAR);
      } else {
        stmt.setString(45, askbillHeader.getPk_defdoc10());
      }
      if (askbillHeader.getPk_defdoc11() == null) {
        stmt.setNull(46, Types.CHAR);
      } else {
        stmt.setString(46, askbillHeader.getPk_defdoc11());
      }
      if (askbillHeader.getPk_defdoc12() == null) {
        stmt.setNull(47, Types.CHAR);
      } else {
        stmt.setString(47, askbillHeader.getPk_defdoc12());
      }
      if (askbillHeader.getPk_defdoc13() == null) {
        stmt.setNull(48, Types.CHAR);
      } else {
        stmt.setString(48, askbillHeader.getPk_defdoc13());
      }
      if (askbillHeader.getPk_defdoc14() == null) {
        stmt.setNull(49, Types.CHAR);
      } else {
        stmt.setString(49, askbillHeader.getPk_defdoc14());
      }
      if (askbillHeader.getPk_defdoc15() == null) {
        stmt.setNull(50, Types.CHAR);
      } else {
        stmt.setString(50, askbillHeader.getPk_defdoc15());
      }
      if (askbillHeader.getPk_defdoc16() == null) {
        stmt.setNull(51, Types.CHAR);
      } else {
        stmt.setString(51, askbillHeader.getPk_defdoc16());
      }
      if (askbillHeader.getPk_defdoc17() == null) {
        stmt.setNull(52, Types.CHAR);
      } else {
        stmt.setString(52, askbillHeader.getPk_defdoc17());
      }
      if (askbillHeader.getPk_defdoc18() == null) {
        stmt.setNull(53, Types.CHAR);
      } else {
        stmt.setString(53, askbillHeader.getPk_defdoc18());
      }
      if (askbillHeader.getPk_defdoc19() == null) {
        stmt.setNull(54, Types.CHAR);
      } else {
        stmt.setString(54, askbillHeader.getPk_defdoc19());
      }
      if (askbillHeader.getPk_defdoc20() == null) {
        stmt.setNull(55, Types.CHAR);
      } else {
        stmt.setString(55, askbillHeader.getPk_defdoc20());
      }
      if (askbillHeader.getVmemo() == null) {
        stmt.setNull(56, Types.CHAR);
      } else {
        stmt.setString(56, askbillHeader.getVmemo());
      }
      if (askbillHeader.getBpurchase() == null) {
        stmt.setString(57, "Y");
      } else {
        stmt.setString(57, askbillHeader.getBpurchase().toString());
      }
      if (askbillHeader.getTmaketime() == null) {
        stmt.setNull(58, Types.CHAR);
      } else {
        stmt.setString(58, askbillHeader.getTmaketime());
      }
      if (askbillHeader.getTlastmaketime() == null) {
        stmt.setNull(59, Types.CHAR);
      } else {
        stmt.setString(59, askbillHeader.getTlastmaketime());
      }
      //
      stmt.executeUpdate();
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return key;
  }

  /**
   * 向数据库插入一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillHeaderVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String insertHeaderForPriceAudit(PriceauditHeaderVO askbillHeader)
      throws java.sql.SQLException {

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = null;
    ResultSet rs = null;
    try {
      sql = "insert into po_priceaudit(cpriceauditid, pk_corp, vpriceauditcode, cdeptid, cemployeeid, ccurrencytypeid, coperatorid, dbilldate, cauditpsnid, dauditdate, ctermprotocolid, ibillstatus, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10,pk_purorg, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,vmemo,bpurchase,tmaketime,tlastmaketime) values(?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
      con = getConnection();
      stmt = con.prepareStatement(sql);

      // set PK fields:
      key = getOID(askbillHeader.getPk_corp());
      stmt.setString(1, key);
      // set non PK fields:
      if (askbillHeader.getPk_corp() == null) {
        stmt.setNull(2, Types.CHAR);
      } else {
        stmt.setString(2, askbillHeader.getPk_corp());
      }
      if (askbillHeader.getVpriceauditcode() == null) {
        stmt.setNull(3, Types.CHAR);
      } else {
        stmt.setString(3, askbillHeader.getVpriceauditcode());
      }
      if (askbillHeader.getCdeptid() == null) {
        stmt.setNull(4, Types.CHAR);
      } else {
        stmt.setString(4, askbillHeader.getCdeptid());
      }
      if (askbillHeader.getCemployeeid() == null) {
        stmt.setNull(5, Types.CHAR);
      } else {
        stmt.setString(5, askbillHeader.getCemployeeid());
      }
      if (askbillHeader.getCcurrencytypeid() == null) {
        stmt.setNull(6, Types.CHAR);
      } else {
        stmt.setString(6, askbillHeader.getCcurrencytypeid());
      }
      if (askbillHeader.getCoperatorid() == null) {
        stmt.setNull(7, Types.CHAR);
      } else {
        stmt.setString(7, askbillHeader.getCoperatorid());
      }
      if (askbillHeader.getDbilldate() == null) {
        stmt.setNull(8, Types.CHAR);
      } else {
        stmt.setString(8, askbillHeader.getDbilldate().toString());
      }
      if (askbillHeader.getCauditpsnid() == null) {
        stmt.setNull(9, Types.CHAR);
      } else {
        stmt.setString(9, askbillHeader.getCauditpsnid());
      }
      if (askbillHeader.getDauditdate() == null) {
        stmt.setNull(10, Types.CHAR);
      } else {
        stmt.setString(10, askbillHeader.getDauditdate().toString());
      }
      if (askbillHeader.getCtermprotocolid() == null) {
        stmt.setNull(11, Types.CHAR);
      } else {
        stmt.setString(11, askbillHeader.getCtermprotocolid());
      }
      if (askbillHeader.getIbillstatus() == null) {
        stmt.setInt(12, new Integer(0).intValue());
      } else {
        stmt.setInt(12, askbillHeader.getIbillstatus().intValue());
      }
      if (askbillHeader.getVdef1() == null) {
        stmt.setNull(13, Types.CHAR);
      } else {
        stmt.setString(13, askbillHeader.getVdef1());
      }
      if (askbillHeader.getVdef2() == null) {
        stmt.setNull(14, Types.CHAR);
      } else {
        stmt.setString(14, askbillHeader.getVdef2());
      }
      if (askbillHeader.getVdef3() == null) {
        stmt.setNull(15, Types.CHAR);
      } else {
        stmt.setString(15, askbillHeader.getVdef3());
      }
      if (askbillHeader.getVdef4() == null) {
        stmt.setNull(16, Types.CHAR);
      } else {
        stmt.setString(16, askbillHeader.getVdef4());
      }
      if (askbillHeader.getVdef5() == null) {
        stmt.setNull(17, Types.CHAR);
      } else {
        stmt.setString(17, askbillHeader.getVdef5());
      }
      if (askbillHeader.getVdef6() == null) {
        stmt.setNull(18, Types.CHAR);
      } else {
        stmt.setString(18, askbillHeader.getVdef6());
      }
      if (askbillHeader.getVdef7() == null) {
        stmt.setNull(19, Types.CHAR);
      } else {
        stmt.setString(19, askbillHeader.getVdef7());
      }
      if (askbillHeader.getVdef8() == null) {
        stmt.setNull(20, Types.CHAR);
      } else {
        stmt.setString(20, askbillHeader.getVdef8());
      }
      if (askbillHeader.getVdef9() == null) {
        stmt.setNull(21, Types.CHAR);
      } else {
        stmt.setString(21, askbillHeader.getVdef9());
      }
      if (askbillHeader.getVdef10() == null) {
        stmt.setNull(22, Types.CHAR);
      } else {
        stmt.setString(22, askbillHeader.getVdef10());
      }
      if (askbillHeader.getPk_purorg() == null) {
        stmt.setNull(23, Types.CHAR);
      } else {
        stmt.setString(23, askbillHeader.getPk_purorg());
      }
      if (askbillHeader.getVdef11() == null) {
        stmt.setNull(24, Types.CHAR);
      } else {
        stmt.setString(24, askbillHeader.getVdef11());
      }
      if (askbillHeader.getVdef12() == null) {
        stmt.setNull(25, Types.CHAR);
      } else {
        stmt.setString(25, askbillHeader.getVdef12());
      }
      if (askbillHeader.getVdef13() == null) {
        stmt.setNull(26, Types.CHAR);
      } else {
        stmt.setString(26, askbillHeader.getVdef13());
      }
      if (askbillHeader.getVdef14() == null) {
        stmt.setNull(27, Types.CHAR);
      } else {
        stmt.setString(27, askbillHeader.getVdef14());
      }
      if (askbillHeader.getVdef15() == null) {
        stmt.setNull(28, Types.CHAR);
      } else {
        stmt.setString(28, askbillHeader.getVdef15());
      }
      if (askbillHeader.getVdef16() == null) {
        stmt.setNull(29, Types.CHAR);
      } else {
        stmt.setString(29, askbillHeader.getVdef16());
      }
      if (askbillHeader.getVdef17() == null) {
        stmt.setNull(30, Types.CHAR);
      } else {
        stmt.setString(30, askbillHeader.getVdef17());
      }
      if (askbillHeader.getVdef18() == null) {
        stmt.setNull(31, Types.CHAR);
      } else {
        stmt.setString(31, askbillHeader.getVdef18());
      }
      if (askbillHeader.getVdef19() == null) {
        stmt.setNull(32, Types.CHAR);
      } else {
        stmt.setString(32, askbillHeader.getVdef19());
      }
      if (askbillHeader.getVdef20() == null) {
        stmt.setNull(33, Types.CHAR);
      } else {
        stmt.setString(33, askbillHeader.getVdef20());
      }
      if (askbillHeader.getPk_defdoc1() == null) {
        stmt.setNull(34, Types.CHAR);
      } else {
        stmt.setString(34, askbillHeader.getPk_defdoc1());
      }
      if (askbillHeader.getPk_defdoc2() == null) {
        stmt.setNull(35, Types.CHAR);
      } else {
        stmt.setString(35, askbillHeader.getPk_defdoc2());
      }
      if (askbillHeader.getPk_defdoc3() == null) {
        stmt.setNull(36, Types.CHAR);
      } else {
        stmt.setString(36, askbillHeader.getPk_defdoc3());
      }
      if (askbillHeader.getPk_defdoc4() == null) {
        stmt.setNull(37, Types.CHAR);
      } else {
        stmt.setString(37, askbillHeader.getPk_defdoc4());
      }
      if (askbillHeader.getPk_defdoc5() == null) {
        stmt.setNull(38, Types.CHAR);
      } else {
        stmt.setString(38, askbillHeader.getPk_defdoc5());
      }
      if (askbillHeader.getPk_defdoc6() == null) {
        stmt.setNull(39, Types.CHAR);
      } else {
        stmt.setString(39, askbillHeader.getPk_defdoc6());
      }
      if (askbillHeader.getPk_defdoc7() == null) {
        stmt.setNull(40, Types.CHAR);
      } else {
        stmt.setString(40, askbillHeader.getPk_defdoc7());
      }
      if (askbillHeader.getPk_defdoc8() == null) {
        stmt.setNull(41, Types.CHAR);
      } else {
        stmt.setString(41, askbillHeader.getPk_defdoc8());
      }
      if (askbillHeader.getPk_defdoc9() == null) {
        stmt.setNull(42, Types.CHAR);
      } else {
        stmt.setString(42, askbillHeader.getPk_defdoc9());
      }
      if (askbillHeader.getPk_defdoc10() == null) {
        stmt.setNull(43, Types.CHAR);
      } else {
        stmt.setString(43, askbillHeader.getPk_defdoc10());
      }
      if (askbillHeader.getPk_defdoc11() == null) {
        stmt.setNull(44, Types.CHAR);
      } else {
        stmt.setString(44, askbillHeader.getPk_defdoc11());
      }
      if (askbillHeader.getPk_defdoc12() == null) {
        stmt.setNull(45, Types.CHAR);
      } else {
        stmt.setString(45, askbillHeader.getPk_defdoc12());
      }
      if (askbillHeader.getPk_defdoc13() == null) {
        stmt.setNull(46, Types.CHAR);
      } else {
        stmt.setString(46, askbillHeader.getPk_defdoc13());
      }
      if (askbillHeader.getPk_defdoc14() == null) {
        stmt.setNull(47, Types.CHAR);
      } else {
        stmt.setString(47, askbillHeader.getPk_defdoc14());
      }
      if (askbillHeader.getPk_defdoc15() == null) {
        stmt.setNull(48, Types.CHAR);
      } else {
        stmt.setString(48, askbillHeader.getPk_defdoc15());
      }
      if (askbillHeader.getPk_defdoc16() == null) {
        stmt.setNull(49, Types.CHAR);
      } else {
        stmt.setString(49, askbillHeader.getPk_defdoc16());
      }
      if (askbillHeader.getPk_defdoc17() == null) {
        stmt.setNull(50, Types.CHAR);
      } else {
        stmt.setString(50, askbillHeader.getPk_defdoc17());
      }
      if (askbillHeader.getPk_defdoc18() == null) {
        stmt.setNull(51, Types.CHAR);
      } else {
        stmt.setString(51, askbillHeader.getPk_defdoc18());
      }
      if (askbillHeader.getPk_defdoc19() == null) {
        stmt.setNull(52, Types.CHAR);
      } else {
        stmt.setString(52, askbillHeader.getPk_defdoc19());
      }
      if (askbillHeader.getPk_defdoc20() == null) {
        stmt.setNull(53, Types.CHAR);
      } else {
        stmt.setString(53, askbillHeader.getPk_defdoc20());
      }
      if (askbillHeader.getVmemo() == null) {
        stmt.setNull(54, Types.CHAR);
      } else {
        stmt.setString(54, askbillHeader.getVmemo());
      }
      if (askbillHeader.getBpurchase() == null) {
        stmt.setString(55, "Y");
      } else {
        stmt.setString(55, askbillHeader.getBpurchase().toString());
      }
      if (askbillHeader.getTmaketime() == null) {
        stmt.setNull(56, Types.CHAR);
      } else {
        stmt.setString(56, askbillHeader.getTmaketime());
      }
      if (askbillHeader.getTlastmaketime() == null) {
        stmt.setNull(57, Types.CHAR);
      } else {
        stmt.setString(57, askbillHeader.getTlastmaketime());
      }
      //
      stmt.executeUpdate();
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return key;
  }

  /**
   * 根据主键在数据库中删除一个VO对象(物理删除)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param key
   *            nc.vo.pub.oid.OID
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public void deleteItem(AskbillItemVO_Old vo) throws java.sql.SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "deleteItem",
//        new Object[] { vo });
//    /** ********************************************************** */
//
//    String sql = "delete from po_askbill_b where caskbill_bid = ?";
//
//    Connection con = null;
//    PreparedStatement stmt = null;
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sql);
//      stmt.setString(1, vo.getPrimaryKey());
//      stmt.executeUpdate();
//    } finally {
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "deleteItem",
//        new Object[] { vo });
//    /** ********************************************************** */
//  }

  /**
   * 用一个VO对象的属性更新数据库中的值。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillHeader
   *            nc.vo.pp.ask.AskbillHeaderVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void updateHeader(AskbillHeaderVO askbillHeader)
      throws java.sql.SQLException {
    String sql = "update po_askbill set pk_corp = ?, vaskbillcode = ?, cdeptid = ?, cemployeeid = ?, ccurrencytypeid = ?, dclosedate = ?, caskpsn = ?, daskdate = ?, cquotepsn = ?, dquotedate = ?, ctermprotocolid = ?, caccountyear = ?, ibillstatus = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?,  pk_purorg = ? , vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ?, vmemo= ? ,tmaketime = ?,tlastmaketime = ? where caskbillid = ? ";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // update non PK fields:
      if (askbillHeader.getPk_corp() == null) {
        stmt.setNull(1, Types.CHAR);
      } else {
        stmt.setString(1, askbillHeader.getPk_corp());
      }
      if (askbillHeader.getVaskbillcode() == null) {
        stmt.setNull(2, Types.CHAR);
      } else {
        stmt.setString(2, askbillHeader.getVaskbillcode());
      }
      if (askbillHeader.getCdeptid() == null) {
        stmt.setNull(3, Types.CHAR);
      } else {
        stmt.setString(3, askbillHeader.getCdeptid());
      }
      if (askbillHeader.getCemployeeid() == null) {
        stmt.setNull(4, Types.CHAR);
      } else {
        stmt.setString(4, askbillHeader.getCemployeeid());
      }
      if (askbillHeader.getCcurrencytypeid() == null) {
        stmt.setNull(5, Types.CHAR);
      } else {
        stmt.setString(5, askbillHeader.getCcurrencytypeid());
      }
      if (askbillHeader.getDclosedate() == null) {
        stmt.setNull(6, Types.CHAR);
      } else {
        stmt.setString(6, askbillHeader.getDclosedate().toString());
      }
      if (askbillHeader.getCaskpsn() == null) {
        stmt.setNull(7, Types.CHAR);
      } else {
        stmt.setString(7, askbillHeader.getCaskpsn());
      }
      if (askbillHeader.getDaskdate() == null) {
        stmt.setNull(8, Types.CHAR);
      } else {
        stmt.setString(8, askbillHeader.getDaskdate().toString());
      }
      if (askbillHeader.getCquotepsn() == null) {
        stmt.setNull(9, Types.CHAR);
      } else {
        stmt.setString(9, askbillHeader.getCquotepsn());
      }
      if (askbillHeader.getDquotedate() == null) {
        stmt.setNull(10, Types.CHAR);
      } else {
        stmt.setString(10, askbillHeader.getDquotedate().toString());
      }
      if (askbillHeader.getCtermprotocolid() == null) {
        stmt.setNull(11, Types.CHAR);
      } else {
        stmt.setString(11, askbillHeader.getCtermprotocolid());
      }
      if (askbillHeader.getCaccountyear() == null) {
        stmt.setNull(12, Types.CHAR);
      } else {
        stmt.setString(12, askbillHeader.getCaccountyear());
      }
      if (askbillHeader.getIbillstatus() == null) {
        stmt.setNull(13, Types.INTEGER);
      } else {
        stmt.setString(13, new Integer(askbillHeader.getIbillstatus())
            .toString());
      }
      if (askbillHeader.getVdef1() == null) {
        stmt.setNull(14, Types.CHAR);
      } else {
        stmt.setString(14, askbillHeader.getVdef1());
      }
      if (askbillHeader.getVdef2() == null) {
        stmt.setNull(15, Types.CHAR);
      } else {
        stmt.setString(15, askbillHeader.getVdef2());
      }
      if (askbillHeader.getVdef3() == null) {
        stmt.setNull(16, Types.CHAR);
      } else {
        stmt.setString(16, askbillHeader.getVdef3());
      }
      if (askbillHeader.getVdef4() == null) {
        stmt.setNull(17, Types.CHAR);
      } else {
        stmt.setString(17, askbillHeader.getVdef4());
      }
      if (askbillHeader.getVdef5() == null) {
        stmt.setNull(18, Types.CHAR);
      } else {
        stmt.setString(18, askbillHeader.getVdef5());
      }
      if (askbillHeader.getVdef6() == null) {
        stmt.setNull(19, Types.CHAR);
      } else {
        stmt.setString(19, askbillHeader.getVdef6());
      }
      if (askbillHeader.getVdef7() == null) {
        stmt.setNull(20, Types.CHAR);
      } else {
        stmt.setString(20, askbillHeader.getVdef7());
      }
      if (askbillHeader.getVdef8() == null) {
        stmt.setNull(21, Types.CHAR);
      } else {
        stmt.setString(21, askbillHeader.getVdef8());
      }
      if (askbillHeader.getVdef9() == null) {
        stmt.setNull(22, Types.CHAR);
      } else {
        stmt.setString(22, askbillHeader.getVdef9());
      }
      if (askbillHeader.getVdef10() == null) {
        stmt.setNull(23, Types.CHAR);
      } else {
        stmt.setString(23, askbillHeader.getVdef10());
      }
      // 采购组织
      if (askbillHeader.getPk_purorg() == null) {
        stmt.setNull(24, Types.CHAR);
      } else {
        stmt.setString(24, askbillHeader.getPk_purorg());
      }
      if (askbillHeader.getVdef11() == null) {
        stmt.setNull(25, Types.CHAR);
      } else {
        stmt.setString(25, askbillHeader.getVdef11());
      }
      if (askbillHeader.getVdef12() == null) {
        stmt.setNull(26, Types.CHAR);
      } else {
        stmt.setString(26, askbillHeader.getVdef12());
      }
      if (askbillHeader.getVdef13() == null) {
        stmt.setNull(27, Types.CHAR);
      } else {
        stmt.setString(27, askbillHeader.getVdef13());
      }
      if (askbillHeader.getVdef14() == null) {
        stmt.setNull(28, Types.CHAR);
      } else {
        stmt.setString(28, askbillHeader.getVdef14());
      }
      if (askbillHeader.getVdef15() == null) {
        stmt.setNull(29, Types.CHAR);
      } else {
        stmt.setString(29, askbillHeader.getVdef15());
      }
      if (askbillHeader.getVdef16() == null) {
        stmt.setNull(30, Types.CHAR);
      } else {
        stmt.setString(30, askbillHeader.getVdef16());
      }
      if (askbillHeader.getVdef17() == null) {
        stmt.setNull(31, Types.CHAR);
      } else {
        stmt.setString(31, askbillHeader.getVdef17());
      }
      if (askbillHeader.getVdef18() == null) {
        stmt.setNull(32, Types.CHAR);
      } else {
        stmt.setString(32, askbillHeader.getVdef18());
      }
      if (askbillHeader.getVdef19() == null) {
        stmt.setNull(33, Types.CHAR);
      } else {
        stmt.setString(33, askbillHeader.getVdef19());
      }
      if (askbillHeader.getVdef20() == null) {
        stmt.setNull(34, Types.CHAR);
      } else {
        stmt.setString(34, askbillHeader.getVdef20());
      }
      if (askbillHeader.getPk_defdoc1() == null) {
        stmt.setNull(35, Types.CHAR);
      } else {
        stmt.setString(35, askbillHeader.getPk_defdoc1());
      }
      if (askbillHeader.getPk_defdoc2() == null) {
        stmt.setNull(36, Types.CHAR);
      } else {
        stmt.setString(36, askbillHeader.getPk_defdoc2());
      }
      if (askbillHeader.getPk_defdoc3() == null) {
        stmt.setNull(37, Types.CHAR);
      } else {
        stmt.setString(37, askbillHeader.getPk_defdoc3());
      }
      if (askbillHeader.getPk_defdoc4() == null) {
        stmt.setNull(38, Types.CHAR);
      } else {
        stmt.setString(38, askbillHeader.getPk_defdoc4());
      }
      if (askbillHeader.getPk_defdoc5() == null) {
        stmt.setNull(39, Types.CHAR);
      } else {
        stmt.setString(39, askbillHeader.getPk_defdoc5());
      }
      if (askbillHeader.getPk_defdoc6() == null) {
        stmt.setNull(40, Types.CHAR);
      } else {
        stmt.setString(40, askbillHeader.getPk_defdoc6());
      }
      if (askbillHeader.getPk_defdoc7() == null) {
        stmt.setNull(41, Types.CHAR);
      } else {
        stmt.setString(41, askbillHeader.getPk_defdoc7());
      }
      if (askbillHeader.getPk_defdoc8() == null) {
        stmt.setNull(42, Types.CHAR);
      } else {
        stmt.setString(42, askbillHeader.getPk_defdoc8());
      }
      if (askbillHeader.getPk_defdoc9() == null) {
        stmt.setNull(43, Types.CHAR);
      } else {
        stmt.setString(43, askbillHeader.getPk_defdoc9());
      }
      if (askbillHeader.getPk_defdoc10() == null) {
        stmt.setNull(44, Types.CHAR);
      } else {
        stmt.setString(44, askbillHeader.getPk_defdoc10());
      }
      if (askbillHeader.getPk_defdoc11() == null) {
        stmt.setNull(45, Types.CHAR);
      } else {
        stmt.setString(45, askbillHeader.getPk_defdoc11());
      }
      if (askbillHeader.getPk_defdoc12() == null) {
        stmt.setNull(46, Types.CHAR);
      } else {
        stmt.setString(46, askbillHeader.getPk_defdoc12());
      }
      if (askbillHeader.getPk_defdoc13() == null) {
        stmt.setNull(47, Types.CHAR);
      } else {
        stmt.setString(47, askbillHeader.getPk_defdoc13());
      }
      if (askbillHeader.getPk_defdoc14() == null) {
        stmt.setNull(48, Types.CHAR);
      } else {
        stmt.setString(48, askbillHeader.getPk_defdoc14());
      }
      if (askbillHeader.getPk_defdoc15() == null) {
        stmt.setNull(49, Types.CHAR);
      } else {
        stmt.setString(49, askbillHeader.getPk_defdoc15());
      }
      if (askbillHeader.getPk_defdoc16() == null) {
        stmt.setNull(50, Types.CHAR);
      } else {
        stmt.setString(50, askbillHeader.getPk_defdoc16());
      }
      if (askbillHeader.getPk_defdoc17() == null) {
        stmt.setNull(51, Types.CHAR);
      } else {
        stmt.setString(51, askbillHeader.getPk_defdoc17());
      }
      if (askbillHeader.getPk_defdoc18() == null) {
        stmt.setNull(52, Types.CHAR);
      } else {
        stmt.setString(52, askbillHeader.getPk_defdoc18());
      }
      if (askbillHeader.getPk_defdoc19() == null) {
        stmt.setNull(53, Types.CHAR);
      } else {
        stmt.setString(53, askbillHeader.getPk_defdoc19());
      }
      if (askbillHeader.getPk_defdoc20() == null) {
        stmt.setNull(54, Types.CHAR);
      } else {
        stmt.setString(54, askbillHeader.getPk_defdoc20());
      }
      if (askbillHeader.getVmemo() == null) {
        stmt.setNull(55, Types.CHAR);
      } else {
        stmt.setString(55, askbillHeader.getVmemo());
      }
      if (askbillHeader.getTmaketime() == null) {
        stmt.setNull(56, Types.CHAR);
      } else {
        stmt.setString(56, askbillHeader.getTmaketime());
      }
      if (askbillHeader.getTlastmaketime() == null) {
        stmt.setNull(57, Types.CHAR);
      } else {
        stmt.setString(57, askbillHeader.getTlastmaketime());
      }
      stmt.setString(58, askbillHeader.getPrimaryKey());
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 用一个VO对象的属性更新数据库中的值。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillHeader
   *            nc.vo.pp.ask.AskbillHeaderVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void updateHeaderForPriceAudit(PriceauditHeaderVO askbillHeader)
      throws java.sql.SQLException {
    String sql = "update po_priceaudit set pk_corp = ?, vpriceauditcode = ?, cdeptid = ?, cemployeeid = ?, ccurrencytypeid = ?,  coperatorid = ?, dbilldate = ?, cauditpsnid = ?, dauditdate = ?, ctermprotocolid = ?,  ibillstatus = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?,  pk_purorg = ? , vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ?, vmemo= ? ,tmaketime = ?,tlastmaketime = ?,taudittime = ?  where cpriceauditid = ? ";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // update non PK fields:
      if (askbillHeader.getPk_corp() == null) {
        stmt.setNull(1, Types.CHAR);
      } else {
        stmt.setString(1, askbillHeader.getPk_corp());
      }
      if (askbillHeader.getVpriceauditcode() == null) {
        stmt.setNull(2, Types.CHAR);
      } else {
        stmt.setString(2, askbillHeader.getVpriceauditcode());
      }
      if (askbillHeader.getCdeptid() == null) {
        stmt.setNull(3, Types.CHAR);
      } else {
        stmt.setString(3, askbillHeader.getCdeptid());
      }
      if (askbillHeader.getCemployeeid() == null) {
        stmt.setNull(4, Types.CHAR);
      } else {
        stmt.setString(4, askbillHeader.getCemployeeid());
      }
      if (askbillHeader.getCcurrencytypeid() == null) {
        stmt.setNull(5, Types.CHAR);
      } else {
        stmt.setString(5, askbillHeader.getCcurrencytypeid());
      }
      if (askbillHeader.getCoperatorid() == null) {
        stmt.setNull(6, Types.CHAR);
      } else {
        stmt.setString(6, askbillHeader.getCoperatorid());
      }
      if (askbillHeader.getDbilldate() == null) {
        stmt.setNull(7, Types.CHAR);
      } else {
        stmt.setString(7, askbillHeader.getDbilldate().toString());
      }
      if (askbillHeader.getCauditpsnid() == null) {
        stmt.setNull(8, Types.CHAR);
      } else {
        stmt.setString(8, askbillHeader.getCauditpsnid());
      }
      if (askbillHeader.getDauditdate() == null) {
        stmt.setNull(9, Types.CHAR);
      } else {
        stmt.setString(9, askbillHeader.getDauditdate().toString());
      }
      if (askbillHeader.getCtermprotocolid() == null) {
        stmt.setNull(10, Types.CHAR);
      } else {
        stmt.setString(10, askbillHeader.getCtermprotocolid());
      }
      if (askbillHeader.getIbillstatus() == null) {
        stmt.setNull(11, Types.INTEGER);
      } else {
        stmt.setInt(11, askbillHeader.getIbillstatus().intValue());
      }
      if (askbillHeader.getVdef1() == null) {
        stmt.setNull(12, Types.CHAR);
      } else {
        stmt.setString(12, askbillHeader.getVdef1());
      }
      if (askbillHeader.getVdef2() == null) {
        stmt.setNull(13, Types.CHAR);
      } else {
        stmt.setString(13, askbillHeader.getVdef2());
      }
      if (askbillHeader.getVdef3() == null) {
        stmt.setNull(14, Types.CHAR);
      } else {
        stmt.setString(14, askbillHeader.getVdef3());
      }
      if (askbillHeader.getVdef4() == null) {
        stmt.setNull(15, Types.CHAR);
      } else {
        stmt.setString(15, askbillHeader.getVdef4());
      }
      if (askbillHeader.getVdef5() == null) {
        stmt.setNull(16, Types.CHAR);
      } else {
        stmt.setString(16, askbillHeader.getVdef5());
      }
      if (askbillHeader.getVdef6() == null) {
        stmt.setNull(17, Types.CHAR);
      } else {
        stmt.setString(17, askbillHeader.getVdef6());
      }
      if (askbillHeader.getVdef7() == null) {
        stmt.setNull(18, Types.CHAR);
      } else {
        stmt.setString(18, askbillHeader.getVdef7());
      }
      if (askbillHeader.getVdef8() == null) {
        stmt.setNull(19, Types.CHAR);
      } else {
        stmt.setString(19, askbillHeader.getVdef8());
      }
      if (askbillHeader.getVdef9() == null) {
        stmt.setNull(20, Types.CHAR);
      } else {
        stmt.setString(20, askbillHeader.getVdef9());
      }
      if (askbillHeader.getVdef10() == null) {
        stmt.setNull(21, Types.CHAR);
      } else {
        stmt.setString(21, askbillHeader.getVdef10());
      }
      // 采购组织
      if (askbillHeader.getPk_purorg() == null) {
        stmt.setNull(22, Types.CHAR);
      } else {
        stmt.setString(22, askbillHeader.getPk_purorg());
      }
      if (askbillHeader.getVdef11() == null) {
        stmt.setNull(23, Types.CHAR);
      } else {
        stmt.setString(23, askbillHeader.getVdef11());
      }
      if (askbillHeader.getVdef12() == null) {
        stmt.setNull(24, Types.CHAR);
      } else {
        stmt.setString(24, askbillHeader.getVdef12());
      }
      if (askbillHeader.getVdef13() == null) {
        stmt.setNull(25, Types.CHAR);
      } else {
        stmt.setString(25, askbillHeader.getVdef13());
      }
      if (askbillHeader.getVdef14() == null) {
        stmt.setNull(26, Types.CHAR);
      } else {
        stmt.setString(26, askbillHeader.getVdef14());
      }
      if (askbillHeader.getVdef15() == null) {
        stmt.setNull(27, Types.CHAR);
      } else {
        stmt.setString(27, askbillHeader.getVdef15());
      }
      if (askbillHeader.getVdef16() == null) {
        stmt.setNull(28, Types.CHAR);
      } else {
        stmt.setString(28, askbillHeader.getVdef16());
      }
      if (askbillHeader.getVdef17() == null) {
        stmt.setNull(29, Types.CHAR);
      } else {
        stmt.setString(29, askbillHeader.getVdef17());
      }
      if (askbillHeader.getVdef18() == null) {
        stmt.setNull(30, Types.CHAR);
      } else {
        stmt.setString(30, askbillHeader.getVdef18());
      }
      if (askbillHeader.getVdef19() == null) {
        stmt.setNull(31, Types.CHAR);
      } else {
        stmt.setString(31, askbillHeader.getVdef19());
      }
      if (askbillHeader.getVdef20() == null) {
        stmt.setNull(32, Types.CHAR);
      } else {
        stmt.setString(32, askbillHeader.getVdef20());
      }
      if (askbillHeader.getPk_defdoc1() == null) {
        stmt.setNull(33, Types.CHAR);
      } else {
        stmt.setString(33, askbillHeader.getPk_defdoc1());
      }
      if (askbillHeader.getPk_defdoc2() == null) {
        stmt.setNull(34, Types.CHAR);
      } else {
        stmt.setString(34, askbillHeader.getPk_defdoc2());
      }
      if (askbillHeader.getPk_defdoc3() == null) {
        stmt.setNull(35, Types.CHAR);
      } else {
        stmt.setString(35, askbillHeader.getPk_defdoc3());
      }
      if (askbillHeader.getPk_defdoc4() == null) {
        stmt.setNull(36, Types.CHAR);
      } else {
        stmt.setString(36, askbillHeader.getPk_defdoc4());
      }
      if (askbillHeader.getPk_defdoc5() == null) {
        stmt.setNull(37, Types.CHAR);
      } else {
        stmt.setString(37, askbillHeader.getPk_defdoc5());
      }
      if (askbillHeader.getPk_defdoc6() == null) {
        stmt.setNull(38, Types.CHAR);
      } else {
        stmt.setString(38, askbillHeader.getPk_defdoc6());
      }
      if (askbillHeader.getPk_defdoc7() == null) {
        stmt.setNull(39, Types.CHAR);
      } else {
        stmt.setString(39, askbillHeader.getPk_defdoc7());
      }
      if (askbillHeader.getPk_defdoc8() == null) {
        stmt.setNull(40, Types.CHAR);
      } else {
        stmt.setString(40, askbillHeader.getPk_defdoc8());
      }
      if (askbillHeader.getPk_defdoc9() == null) {
        stmt.setNull(41, Types.CHAR);
      } else {
        stmt.setString(41, askbillHeader.getPk_defdoc9());
      }
      if (askbillHeader.getPk_defdoc10() == null) {
        stmt.setNull(42, Types.CHAR);
      } else {
        stmt.setString(42, askbillHeader.getPk_defdoc10());
      }
      if (askbillHeader.getPk_defdoc11() == null) {
        stmt.setNull(43, Types.CHAR);
      } else {
        stmt.setString(43, askbillHeader.getPk_defdoc11());
      }
      if (askbillHeader.getPk_defdoc12() == null) {
        stmt.setNull(44, Types.CHAR);
      } else {
        stmt.setString(44, askbillHeader.getPk_defdoc12());
      }
      if (askbillHeader.getPk_defdoc13() == null) {
        stmt.setNull(45, Types.CHAR);
      } else {
        stmt.setString(45, askbillHeader.getPk_defdoc13());
      }
      if (askbillHeader.getPk_defdoc14() == null) {
        stmt.setNull(46, Types.CHAR);
      } else {
        stmt.setString(46, askbillHeader.getPk_defdoc14());
      }
      if (askbillHeader.getPk_defdoc15() == null) {
        stmt.setNull(47, Types.CHAR);
      } else {
        stmt.setString(47, askbillHeader.getPk_defdoc15());
      }
      if (askbillHeader.getPk_defdoc16() == null) {
        stmt.setNull(48, Types.CHAR);
      } else {
        stmt.setString(48, askbillHeader.getPk_defdoc16());
      }
      if (askbillHeader.getPk_defdoc17() == null) {
        stmt.setNull(49, Types.CHAR);
      } else {
        stmt.setString(49, askbillHeader.getPk_defdoc17());
      }
      if (askbillHeader.getPk_defdoc18() == null) {
        stmt.setNull(50, Types.CHAR);
      } else {
        stmt.setString(50, askbillHeader.getPk_defdoc18());
      }
      if (askbillHeader.getPk_defdoc19() == null) {
        stmt.setNull(51, Types.CHAR);
      } else {
        stmt.setString(51, askbillHeader.getPk_defdoc19());
      }
      if (askbillHeader.getPk_defdoc20() == null) {
        stmt.setNull(52, Types.CHAR);
      } else {
        stmt.setString(52, askbillHeader.getPk_defdoc20());
      }
      if (askbillHeader.getVmemo() == null) {
        stmt.setNull(53, Types.CHAR);
      } else {
        stmt.setString(53, askbillHeader.getVmemo());
      }
      if (askbillHeader.getTmaketime() == null) {
        stmt.setNull(54, Types.CHAR);
      } else {
        stmt.setString(54, askbillHeader.getTmaketime());
      }
      if (askbillHeader.getTlastmaketime() == null) {
        stmt.setNull(55, Types.CHAR);
      } else {
        stmt.setString(55, askbillHeader.getTlastmaketime());
      }
      if (askbillHeader.getTmaketime() == null) {
        stmt.setNull(56, Types.CHAR);
      } else {
        stmt.setString(56, askbillHeader.getTmaketime());
      }
      stmt.setString(57, askbillHeader.getPrimaryKey());
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 用一个VO对象的属性更新数据库中的值。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public void updateItem(AskbillItemVO_Old askbillItem)
//      throws java.sql.SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItem",
//        new Object[] { askbillItem });
//    /** ********************************************************** */
//
//    // String sql = "update po_askbill_b set caskbillid = ?, pk_corp = ?,
//    // cmangid = ?, nasknum = ?, vpackmode = ?, dreceivedate = ?,
//    // vreveiveaddress = ?, nnotaxprice = ?, nintaxprice = ?, bisorder = ?,
//    // nordernum = ?, nordernotaxprice = ?, norderintaxprice = ?,
//    // nordernotaxmny = ?, ntaxmny = ?, npricetaxmny = ?, vmemo = ?, vdef1 =
//    // ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?,
//    // vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, crowno =
//    // ?, csourcebilltype = ?, csourcebillid = ?, csourcebillrowid = ?,
//    // cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?
//    // where caskbill_bid = ?";
//    String sql = "update po_askbill_b set caskbillid = ?, pk_corp = ?, cmangid = ?, nasknum = ?, vpackmode = ?, dreceivedate = ?, vreveiveaddress = ?, nnotaxprice = ?, nintaxprice = ?, bisorder = ?, nordernum = ?, nordernotaxprice = ?, norderintaxprice = ?, nordernotaxmny = ?, ntaxmny = ?, npricetaxmny = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, crowno = ?, csourcebilltype = ?, csourcebillid = ?, csourcebillrowid = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ? , vdef7= ?, vdef8= ?, vdef9= ?, vdef10= ?, vdef11= ?, vdef12= ?, vdef13= ?, vdef14= ?, vdef15= ?, vdef16= ?, vdef17= ?, vdef18= ?, vdef19= ?, vdef20= ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ? where caskbill_bid = ?";
//
//    Connection con = null;
//    PreparedStatement stmt = null;
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sql);
//      // update non PK fields:
//      if (askbillItem.getCaskbillid() == null) {
//        stmt.setNull(1, Types.CHAR);
//      } else {
//        stmt.setString(1, askbillItem.getCaskbillid());
//      }
//      if (askbillItem.getPk_corp() == null) {
//        stmt.setNull(2, Types.CHAR);
//      } else {
//        stmt.setString(2, askbillItem.getPk_corp());
//      }
//      if (askbillItem.getCmangid() == null) {
//        stmt.setNull(3, Types.CHAR);
//      } else {
//        stmt.setString(3, askbillItem.getCmangid());
//      }
//      if (askbillItem.getNasknum() == null) {
//        stmt.setNull(4, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(4, askbillItem.getNasknum().toBigDecimal());
//      }
//      if (askbillItem.getVpackmode() == null) {
//        stmt.setNull(5, Types.CHAR);
//      } else {
//        stmt.setString(5, askbillItem.getVpackmode());
//      }
//      if (askbillItem.getDreceivedate() == null) {
//        stmt.setNull(6, Types.CHAR);
//      } else {
//        stmt.setString(6, askbillItem.getDreceivedate().toString());
//      }
//      if (askbillItem.getVreveiveaddress() == null) {
//        stmt.setNull(7, Types.CHAR);
//      } else {
//        stmt.setString(7, askbillItem.getVreveiveaddress());
//      }
//      if (askbillItem.getNnotaxprice() == null) {
//        stmt.setNull(8, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(8, askbillItem.getNnotaxprice()
//            .toBigDecimal());
//      }
//      if (askbillItem.getNintaxprice() == null) {
//        stmt.setNull(9, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(9, askbillItem.getNintaxprice()
//            .toBigDecimal());
//      }
//      if (askbillItem.getBisorder() == null) {
//        stmt.setNull(10, Types.INTEGER);
//      } else {
//        stmt.setInt(10, askbillItem.getBisorder().intValue());
//      }
//      if (askbillItem.getNordernum() == null) {
//        stmt.setNull(11, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(11, askbillItem.getNordernum()
//            .toBigDecimal());
//      }
//      if (askbillItem.getNordernotaxprice() == null) {
//        stmt.setNull(12, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(12, askbillItem.getNordernotaxprice()
//            .toBigDecimal());
//      }
//      if (askbillItem.getNorderintaxprice() == null) {
//        stmt.setNull(13, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(13, askbillItem.getNorderintaxprice()
//            .toBigDecimal());
//      }
//      if (askbillItem.getNordernotaxmny() == null) {
//        stmt.setNull(14, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(14, askbillItem.getNordernotaxmny()
//            .toBigDecimal());
//      }
//      if (askbillItem.getNtaxmny() == null) {
//        stmt.setNull(15, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(15, askbillItem.getNtaxmny().toBigDecimal());
//      }
//      if (askbillItem.getNpricetaxmny() == null) {
//        stmt.setNull(16, Types.INTEGER);
//      } else {
//        stmt.setBigDecimal(16, askbillItem.getNpricetaxmny()
//            .toBigDecimal());
//      }
//      if (askbillItem.getVmemo() == null) {
//        stmt.setNull(17, Types.CHAR);
//      } else {
//        stmt.setString(17, askbillItem.getVmemo());
//      }
//      if (askbillItem.getVdef1() == null) {
//        stmt.setNull(18, Types.CHAR);
//      } else {
//        stmt.setString(18, askbillItem.getVdef1());
//      }
//      if (askbillItem.getVdef2() == null) {
//        stmt.setNull(19, Types.CHAR);
//      } else {
//        stmt.setString(19, askbillItem.getVdef2());
//      }
//      if (askbillItem.getVdef3() == null) {
//        stmt.setNull(20, Types.CHAR);
//      } else {
//        stmt.setString(20, askbillItem.getVdef3());
//      }
//      if (askbillItem.getVdef4() == null) {
//        stmt.setNull(21, Types.CHAR);
//      } else {
//        stmt.setString(21, askbillItem.getVdef4());
//      }
//      if (askbillItem.getVdef5() == null) {
//        stmt.setNull(22, Types.CHAR);
//      } else {
//        stmt.setString(22, askbillItem.getVdef5());
//      }
//      if (askbillItem.getVdef6() == null) {
//        stmt.setNull(23, Types.CHAR);
//      } else {
//        stmt.setString(23, askbillItem.getVdef6());
//      }
//      if (askbillItem.getVfree1() == null) {
//        stmt.setNull(24, Types.CHAR);
//      } else {
//        stmt.setString(24, askbillItem.getVfree1());
//      }
//      if (askbillItem.getVfree2() == null) {
//        stmt.setNull(25, Types.CHAR);
//      } else {
//        stmt.setString(25, askbillItem.getVfree2());
//      }
//      if (askbillItem.getVfree3() == null) {
//        stmt.setNull(26, Types.CHAR);
//      } else {
//        stmt.setString(26, askbillItem.getVfree3());
//      }
//      if (askbillItem.getVfree4() == null) {
//        stmt.setNull(27, Types.CHAR);
//      } else {
//        stmt.setString(27, askbillItem.getVfree4());
//      }
//      if (askbillItem.getVfree5() == null) {
//        stmt.setNull(28, Types.CHAR);
//      } else {
//        stmt.setString(28, askbillItem.getVfree5());
//      }
//      if (askbillItem.getCbaseid() == null) {
//        stmt.setNull(29, Types.CHAR);
//      } else {
//        stmt.setString(29, askbillItem.getCbaseid());
//      }
//      // crowno
//      if (askbillItem.getRowno() == null) {
//        stmt.setNull(30, Types.CHAR);
//      } else {
//        stmt.setString(30, askbillItem.getRowno());
//      }
//      // 来源信息
//      if (askbillItem.getCsourcebilltype() == null) {
//        stmt.setNull(31, Types.CHAR);
//      } else {
//        stmt.setString(31, askbillItem.getCsourcebilltype());
//      }
//      if (askbillItem.getCsourcebillid() == null) {
//        stmt.setNull(32, Types.CHAR);
//      } else {
//        stmt.setString(32, askbillItem.getCsourcebillid());
//      }
//      if (askbillItem.getCsourcebillrowid() == null) {
//        stmt.setNull(33, Types.CHAR);
//      } else {
//        stmt.setString(33, askbillItem.getCsourcebillrowid());
//      }
//      if (askbillItem.getCupsourcebilltype() == null) {
//        stmt.setNull(34, Types.CHAR);
//      } else {
//        stmt.setString(34, askbillItem.getCupsourcebilltype());
//      }
//      if (askbillItem.getCupsourcebillid() == null) {
//        stmt.setNull(35, Types.CHAR);
//      } else {
//        stmt.setString(35, askbillItem.getCupsourcebillid());
//      }
//      if (askbillItem.getCupsourcebillrowid() == null) {
//        stmt.setNull(36, Types.CHAR);
//      } else {
//        stmt.setString(36, askbillItem.getCupsourcebillrowid());
//      }
//      if (askbillItem.getVdef7() == null) {
//        stmt.setNull(37, Types.CHAR);
//      } else {
//        stmt.setString(37, askbillItem.getVdef7());
//      }
//      if (askbillItem.getVdef8() == null) {
//        stmt.setNull(38, Types.CHAR);
//      } else {
//        stmt.setString(38, askbillItem.getVdef8());
//      }
//      if (askbillItem.getVdef9() == null) {
//        stmt.setNull(39, Types.CHAR);
//      } else {
//        stmt.setString(39, askbillItem.getVdef9());
//      }
//      if (askbillItem.getVdef10() == null) {
//        stmt.setNull(40, Types.CHAR);
//      } else {
//        stmt.setString(40, askbillItem.getVdef10());
//      }
//      if (askbillItem.getVdef11() == null) {
//        stmt.setNull(41, Types.CHAR);
//      } else {
//        stmt.setString(41, askbillItem.getVdef11());
//      }
//      if (askbillItem.getVdef12() == null) {
//        stmt.setNull(42, Types.CHAR);
//      } else {
//        stmt.setString(42, askbillItem.getVdef12());
//      }
//      if (askbillItem.getVdef13() == null) {
//        stmt.setNull(43, Types.CHAR);
//      } else {
//        stmt.setString(43, askbillItem.getVdef13());
//      }
//      if (askbillItem.getVdef14() == null) {
//        stmt.setNull(44, Types.CHAR);
//      } else {
//        stmt.setString(44, askbillItem.getVdef14());
//      }
//      if (askbillItem.getVdef15() == null) {
//        stmt.setNull(45, Types.CHAR);
//      } else {
//        stmt.setString(45, askbillItem.getVdef15());
//      }
//      if (askbillItem.getVdef16() == null) {
//        stmt.setNull(46, Types.CHAR);
//      } else {
//        stmt.setString(46, askbillItem.getVdef16());
//      }
//      if (askbillItem.getVdef17() == null) {
//        stmt.setNull(47, Types.CHAR);
//      } else {
//        stmt.setString(47, askbillItem.getVdef17());
//      }
//      if (askbillItem.getVdef18() == null) {
//        stmt.setNull(48, Types.CHAR);
//      } else {
//        stmt.setString(48, askbillItem.getVdef18());
//      }
//      if (askbillItem.getVdef19() == null) {
//        stmt.setNull(49, Types.CHAR);
//      } else {
//        stmt.setString(49, askbillItem.getVdef19());
//      }
//      if (askbillItem.getVdef20() == null) {
//        stmt.setNull(50, Types.CHAR);
//      } else {
//        stmt.setString(50, askbillItem.getVdef20());
//      }
//      if (askbillItem.getPKDefDoc1() == null) {
//        stmt.setNull(51, Types.CHAR);
//      } else {
//        stmt.setString(51, askbillItem.getPKDefDoc1());
//      }
//      if (askbillItem.getPKDefDoc2() == null) {
//        stmt.setNull(52, Types.CHAR);
//      } else {
//        stmt.setString(52, askbillItem.getPKDefDoc2());
//      }
//      if (askbillItem.getPKDefDoc3() == null) {
//        stmt.setNull(53, Types.CHAR);
//      } else {
//        stmt.setString(53, askbillItem.getPKDefDoc3());
//      }
//      if (askbillItem.getPKDefDoc4() == null) {
//        stmt.setNull(54, Types.CHAR);
//      } else {
//        stmt.setString(54, askbillItem.getPKDefDoc4());
//      }
//      if (askbillItem.getPKDefDoc5() == null) {
//        stmt.setNull(55, Types.CHAR);
//      } else {
//        stmt.setString(55, askbillItem.getPKDefDoc5());
//      }
//      if (askbillItem.getPKDefDoc6() == null) {
//        stmt.setNull(56, Types.CHAR);
//      } else {
//        stmt.setString(56, askbillItem.getPKDefDoc6());
//      }
//      if (askbillItem.getPKDefDoc7() == null) {
//        stmt.setNull(57, Types.CHAR);
//      } else {
//        stmt.setString(57, askbillItem.getPKDefDoc7());
//      }
//      if (askbillItem.getPKDefDoc8() == null) {
//        stmt.setNull(58, Types.CHAR);
//      } else {
//        stmt.setString(58, askbillItem.getPKDefDoc8());
//      }
//      if (askbillItem.getPKDefDoc9() == null) {
//        stmt.setNull(59, Types.CHAR);
//      } else {
//        stmt.setString(59, askbillItem.getPKDefDoc9());
//      }
//      if (askbillItem.getPKDefDoc10() == null) {
//        stmt.setNull(60, Types.CHAR);
//      } else {
//        stmt.setString(60, askbillItem.getPKDefDoc10());
//      }
//      if (askbillItem.getPKDefDoc11() == null) {
//        stmt.setNull(61, Types.CHAR);
//      } else {
//        stmt.setString(61, askbillItem.getPKDefDoc11());
//      }
//      if (askbillItem.getPKDefDoc12() == null) {
//        stmt.setNull(62, Types.CHAR);
//      } else {
//        stmt.setString(62, askbillItem.getPKDefDoc12());
//      }
//      if (askbillItem.getPKDefDoc13() == null) {
//        stmt.setNull(63, Types.CHAR);
//      } else {
//        stmt.setString(63, askbillItem.getPKDefDoc13());
//      }
//      if (askbillItem.getPKDefDoc14() == null) {
//        stmt.setNull(64, Types.CHAR);
//      } else {
//        stmt.setString(64, askbillItem.getPKDefDoc14());
//      }
//      if (askbillItem.getPKDefDoc15() == null) {
//        stmt.setNull(65, Types.CHAR);
//      } else {
//        stmt.setString(65, askbillItem.getPKDefDoc15());
//      }
//      if (askbillItem.getPKDefDoc16() == null) {
//        stmt.setNull(66, Types.CHAR);
//      } else {
//        stmt.setString(66, askbillItem.getPKDefDoc16());
//      }
//      if (askbillItem.getPKDefDoc17() == null) {
//        stmt.setNull(67, Types.CHAR);
//      } else {
//        stmt.setString(67, askbillItem.getPKDefDoc17());
//      }
//      if (askbillItem.getPKDefDoc18() == null) {
//        stmt.setNull(68, Types.CHAR);
//      } else {
//        stmt.setString(68, askbillItem.getPKDefDoc18());
//      }
//      if (askbillItem.getPKDefDoc19() == null) {
//        stmt.setNull(69, Types.CHAR);
//      } else {
//        stmt.setString(69, askbillItem.getPKDefDoc19());
//      }
//      if (askbillItem.getPKDefDoc20() == null) {
//        stmt.setNull(70, Types.CHAR);
//      } else {
//        stmt.setString(70, askbillItem.getPKDefDoc20());
//      }
//      // find record by PK fields:
//      // stmt.setString(72, askbillItem.getPrimaryKey());
//      stmt.setString(71, askbillItem.getPrimaryKey());
//      //
//      stmt.executeUpdate();
//    } finally {
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItem",
//        new Object[] { askbillItem });
//    /** ********************************************************** */
//  }

  /**
   * 询价单明细统计 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param unitCode
   *            String
   * @exception java.sql.SQLException
   *                异常说明。 #关联的基础数据表 bd_cubasdoc, bd_cumandoc, bd_invbasdoc,
   *                bd_invmandoc, bd_taxitems, bd_payterm, bd_deptdoc,
   *                bd_psndoc, bd_measdoc, bd_currtype, sm_user as sm_user1,
   *                询价人 sm_user as sm_user2 报价人
   */
  public AskbillItemMergeVO[] findAskItemsForDetailVOMy(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findAskItemsForDetailVOMy", new Object[] { strSQL });
    /** ********************************************************** */
    StringBuffer sql = new StringBuffer(" ");
    sql.append(" SELECT ");
    sql
        .append("po_askbill_b.caskbill_bid, po_askbill_b.caskbillid, po_askbill_b.pk_corp, ");
    sql
        .append("po_askbill_b.cmangid, po_askbill_b.nasknum, po_askbill_b.vpackmode, ");
    sql
        .append("po_askbill_b.dreceivedate, po_askbill_b.vreveiveaddress, po_askbill_bb1.nquoteprice, ");
    sql
        .append("po_askbill_bb1.nquotetaxprice,  ");
//    sql
//        .append("po_askbill_b.nordernotaxprice, po_askbill_b.norderintaxprice, ");
//    sql
//        .append("po_askbill_b.nordernotaxmny, po_askbill_b.ntaxmny, po_askbill_b.npricetaxmny, ");
    sql
        .append("po_askbill_b.vmemo, po_askbill_b.vdef1, po_askbill_b.vdef2, po_askbill_b.vdef3, ");
    sql
        .append("po_askbill_b.vdef4, po_askbill_b.vdef5, po_askbill_b.vdef6, po_askbill_b.vfree1, ");
    sql
        .append("po_askbill_b.vfree2, po_askbill_b.vfree3, po_askbill_b.vfree4, po_askbill_b.vfree5, ");

    sql
        .append("po_askbill_bb1.cvendorbaseid, po_askbill.cdeptid, po_askbill.cemployeeid, ");
    sql
        .append("po_askbill.ccurrencytypeid, po_askbill.ctermprotocolid, po_askbill.dclosedate, ");
    sql
        .append("po_askbill.daskdate, po_askbill.caskpsn, po_askbill.dquotedate, ");
    sql
        .append("po_askbill.cquotepsn, po_askbill.ibillstatus, po_askbill.vaskbillcode, po_askbill_b.cbaseid, ");
    sql.append("po_askbill_bb1.cvendormangid, ");
    // 全部显示名称
    sql.append("bd_invbasdoc.invcode, ");
    sql.append("bd_invbasdoc.invname, ");
    sql.append("bd_invbasdoc.invspec, ");
    sql.append("bd_invbasdoc.invtype, ");
    sql.append("bd_measdoc.measname, ");
    sql.append("po_askbill_bb1.ntaxrate, ");
    sql.append("bd_cubasdoc.custshortname, ");
    sql.append("bd_payterm.termname, ");
    sql.append("bd_currtype.currtypename, ");
    sql.append("bd_psndoc.psnname, ");
    sql.append("bd_deptdoc.deptname, ");
    sql.append("sm_user1.user_name, ");
    sql.append("sm_user2.user_name, ");
    sql.append("po_askbill_bb1.deliverdays,");
    sql.append("po_askbill_b.crowno, ");
    sql
        .append("po_askbill_b.vdef7, po_askbill_b.vdef8, po_askbill_b.vdef9, po_askbill_b.vdef10,po_askbill_b.vdef11, po_askbill_b.vdef12, po_askbill_b.vdef13, po_askbill_b.vdef14, po_askbill_b.vdef15, po_askbill_b.vdef16, po_askbill_b.vdef17, po_askbill_b.vdef18, po_askbill_b.vdef19, po_askbill_b.vdef20,po_askbill_b.pk_defdoc1,po_askbill_b.pk_defdoc2,po_askbill_b.pk_defdoc3,po_askbill_b.pk_defdoc4,po_askbill_b.pk_defdoc5,po_askbill_b.pk_defdoc6,po_askbill_b.pk_defdoc7,po_askbill_b.pk_defdoc8,po_askbill_b.pk_defdoc9,po_askbill_b.pk_defdoc10,po_askbill_b.pk_defdoc11,po_askbill_b.pk_defdoc12,po_askbill_b.pk_defdoc13,po_askbill_b.pk_defdoc14,po_askbill_b.pk_defdoc15,po_askbill_b.pk_defdoc16,po_askbill_b.pk_defdoc17,po_askbill_b.pk_defdoc18,po_askbill_b.pk_defdoc19,po_askbill_b.pk_defdoc20, ");
    sql.append("po_askbill_bb1.dvaliddate,po_askbill_bb1.dinvaliddate,po_askbill.pk_purorg ");
    sql.append(strSQL);

    AskbillItemMergeVO[] askbillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      // stmt.setString(1, strQueryCondition);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070201")); 
      //
      while (rs.next()) {
        AskbillItemMergeVO askbillItem = new AskbillItemMergeVO();
        //
        String caskbill_bid = rs.getString(1);
        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        //
        String caskbillid = rs.getString(2);
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString(3);
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cmangid = rs.getString(4);
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        //
        Object nasknum = rs.getObject(5);
        askbillItem.setNasknum((nasknum == null || "".equals(nasknum.toString()
            .trim())) ? null : new UFDouble(nasknum
            .toString().trim()));
        //
        String vpackmode = rs.getString(6);
        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
            .trim());
        //
        String dreceivedate = rs.getString(7);
        askbillItem.setDreceivedate(dreceivedate == null ? null
            : new UFDate(dreceivedate.trim(), false));
        //
        String vreveiveaddress = rs.getString(8);
        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
            : vreveiveaddress.trim());
        //
        Object nnotaxprice = rs.getObject(9);
        askbillItem.setNquoteprice((nnotaxprice == null || "".equals(nnotaxprice
            .toString().trim())) ? null : new UFDouble(
            nnotaxprice.toString().trim()));
        //
        Object nintaxprice = rs.getObject(10);
        askbillItem.setNquotetaxprice((nintaxprice == null || "".equals(nintaxprice
            .toString().trim())) ? null : new UFDouble(
            nintaxprice.toString().trim()));
        //
        String vmemo = rs.getString(11);
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vdef1 = rs.getString(12);
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString(13);
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString(14);
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString(15);
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString(16);
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString(17);
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        //
        String vfree1 = rs.getString(18);
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString(19);
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString(20);
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString(21);
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString(22);
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());

        // 扩充VO部分
        String cvendorbaseid = rs.getString(23);
        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid);

        String cdeptid = rs.getString(24);
        askbillItem.setCdeptid(cdeptid == null ? null : cdeptid);

        String cemployeeid = rs.getString(25);
        askbillItem.setCemployeeid(cemployeeid == null ? null
            : cemployeeid);

        String ccurrency = rs.getString(26);
        askbillItem.setCcurrencytypeid(ccurrency == null ? null
            : ccurrency);

        String cterm = rs.getString(27);
        askbillItem.setCtermprotocolid(cterm == null ? null : cterm);

        String closedate = rs.getString(28);
        UFDate dclosedate = (closedate == null
            || ""
            .equals(closedate.trim())) ? null : new UFDate(closedate, false);
        askbillItem.setDclosedate(dclosedate);

        String askdate = rs.getString(29);
        UFDate daskdate = (askdate == null  || "".equals(askdate
            .trim())) ? null : new UFDate(askdate, false);
        askbillItem.setDaskdate(daskdate);

        String caskpsn = rs.getString(30);
        askbillItem.setCaskpsn(caskpsn == null ? null : caskpsn);

        String quotedate = rs.getString(31);
        UFDate dquotedate = (quotedate == null
             || ""
            .equals(quotedate.trim())) ? null : new UFDate(quotedate, false);
        askbillItem.setDquotedate(dquotedate);

        String cquotepsn = rs.getString(32);
        askbillItem.setCquotepsn(cquotepsn == null ? null : cquotepsn);

        // 单据状态
        Integer status = (Integer) rs.getObject(33);
        askbillItem.setIbillstatus(status == null ? null : status);

        // 询价单编码
        String code = rs.getString(34);
        askbillItem.setVaskbillcode(code == null ? null : code);

        // 存货基本档案主键
        String cbaseid = rs.getString(35);
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);

        // 供应商管理档案ID
        String cvendormangid = rs.getString(36);
        askbillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid);

        // 名称
        // sql.append( "bd_invbasdoc.invcode, ");
        // sql.append( "bd_invbasdoc.invname, ");
        // sql.append( "bd_invbasdoc.invspec, ");
        // sql.append( "bd_invbasdoc.invtype, ");
        // sql.append( "bd_measdoc.measname, ");
        // sql.append( "bd_taxitems.taxratio, ");
        // sql.append( "bd_cubasdoc.custshortname, ");
        // sql.append( "bd_payterm.termname, ");
        // sql.append( "bd_currtype.currtypename, ");
        // sql.append( "bd_psndoc.psnname, ");
        // sql.append( "bd_deptdoc.deptname, ");
        // sql.append( "sm_user1.user_name, ");
        // sql.append( "sm_user2.user_name ");
        String invcode = rs.getString(37);
        askbillItem.setInvcode(invcode == null ? null : invcode.trim());
        String invname = rs.getString(38);
        askbillItem.setInvname(invname == null ? null : invname.trim());
        String invspec = rs.getString(39);
        askbillItem.setInvspec(invspec == null ? null : invspec.trim());
        String invtype = rs.getString(40);
        askbillItem.setInvtype(invtype == null ? null : invtype.trim());
        String measname = rs.getString(41);
        askbillItem.setCmainmeasname(measname == null ? null : measname
            .trim());
        // 税率（存货） 5.3税率从子子表中取 modify by donggq 2008-03-17
        Object taxratio = rs.getObject(42);
        askbillItem.setTaxratioInv((taxratio == null || "".equals(taxratio
            .toString().trim())) ? null : new UFDouble(
            taxratio.toString().trim()));
        askbillItem.setNtaxrate((taxratio == null || "".equals(taxratio
            .toString().trim())) ? null : new UFDouble(
            taxratio.toString().trim()));
        String custname = rs.getString(43);
        askbillItem.setCustname(custname == null ? null : custname
            .trim());
        String termname = rs.getString(44);
        askbillItem.setTermname(termname == null ? null : termname
            .trim());
        String currtypename = rs.getString(45);
        askbillItem.setCurrname(currtypename == null ? null
            : currtypename.trim());
        String psnname = rs.getString(46);
        askbillItem.setCemployeeidname(psnname == null ? null : psnname
            .trim());
        String deptname = rs.getString(47);
        askbillItem.setCdeptidname(deptname == null ? null : deptname
            .trim());
        String caskpsnname = rs.getString(48);
        askbillItem.setCaskpsnname(caskpsnname == null ? null
            : caskpsnname.trim());
        String cquotepsnname = rs.getString(49);
        askbillItem.setCquotepsnname(cquotepsnname == null ? null
            : cquotepsnname.trim());
        // 税率(报价)
//        Object oRate = rs.getObject(50);
//        askbillItem.setTaxratio((oRate == null || oRate.toString()
//            .trim().equals("")) ? null : new UFDouble(oRate
//            .toString().trim()));
        // 交货期（天）
        Integer iDays = (Integer) rs.getObject(50);
        askbillItem.setDeliverdays(iDays);
        // 单据行号
        String crowno = rs.getString(51);
        askbillItem.setCrowno(crowno == null ? null : crowno.trim());
        // // vdef7 :
        String vdef7 = rs.getString(52);
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(53);
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(54);
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(55);
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(56);
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(57);
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(58);
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(59);
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(60);
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(61);
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(62);
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(63);
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(64);
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(65);
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(66);
        askbillItem.setPk_defdoc1(pk_defdoc1 == null ? null : pk_defdoc1
            .trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(67);
        askbillItem.setPk_defdoc2(pk_defdoc2 == null ? null : pk_defdoc2
            .trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(68);
        askbillItem.setPk_defdoc3(pk_defdoc3 == null ? null : pk_defdoc3
            .trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(69);
        askbillItem.setPk_defdoc4(pk_defdoc4 == null ? null : pk_defdoc4
            .trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(70);
        askbillItem.setPk_defdoc5(pk_defdoc5 == null ? null : pk_defdoc5
            .trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(71);
        askbillItem.setPk_defdoc6(pk_defdoc6 == null ? null : pk_defdoc6
            .trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(72);
        askbillItem.setPk_defdoc7(pk_defdoc7 == null ? null : pk_defdoc7
            .trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(73);
        askbillItem.setPk_defdoc8(pk_defdoc8 == null ? null : pk_defdoc8
            .trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(74);
        askbillItem.setPk_defdoc9(pk_defdoc9 == null ? null : pk_defdoc9
            .trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(75);
        askbillItem.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(76);
        askbillItem.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(77);
        askbillItem.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(78);
        askbillItem.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(79);
        askbillItem.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(80);
        askbillItem.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(81);
        askbillItem.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(82);
        askbillItem.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(83);
        askbillItem.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(84);
        askbillItem.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(85);
        askbillItem.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
//         // dvaliddate :
        String dvaliddate = rs.getString(86);
        askbillItem.setDvaliddate(dvaliddate == null ? null
            : new UFDate(dvaliddate.trim()));
//         // dinvaliddate :
        String dinvaliddate = rs.getString(87);
        askbillItem.setDinvaliddate(dinvaliddate == null ? null
            : new UFDate(dinvaliddate.trim()));
         // pk_purorg :
        String purorg = rs.getString(88);
        askbillItem.setPk_purorg(purorg == null ? null
            : purorg.trim());

        v.addElement(askbillItem);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    if (v.size() > 0) {
      askbillItems = new AskbillItemMergeVO[v.size()];
      v.copyInto(askbillItems);
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForDetailVOMy",
        new Object[] { strSQL });
    /** ********************************************************** */

    return askbillItems;
  }
  /**
   * 询价单明细统计 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param unitCode
   *            String
   * @exception java.sql.SQLException
   *                异常说明。 #关联的基础数据表 bd_cubasdoc, bd_cumandoc, bd_invbasdoc,
   *                bd_invmandoc, bd_taxitems, bd_payterm, bd_deptdoc,
   *                bd_psndoc, bd_measdoc, bd_currtype, sm_user as sm_user1,
   *                询价人 sm_user as sm_user2 报价人
   */
  public AskbillItemMergeVO[] findAskItemsForDetailVOMyForFree(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findAskItemsForDetailVOMy", new Object[] { strSQL });
    /** ********************************************************** */
    StringBuffer sql = new StringBuffer(" ");
    sql.append(" SELECT ");
    sql
        .append("po_askbill_b.caskbill_bid, po_askbill_b.caskbillid, po_askbill_b.pk_corp, ");
    sql
        .append("po_askbill_b.cmangid, po_askbill_b.nasknum, po_askbill_b.vpackmode, ");
    sql
        .append("po_askbill_b.dreceivedate, po_askbill_b.vreveiveaddress, ");
//    sql
//        .append("po_askbill_bb1.nquotetaxprice,  ");
//    sql
//        .append("po_askbill_b.nordernotaxprice, po_askbill_b.norderintaxprice, ");
//    sql
//        .append("po_askbill_b.nordernotaxmny, po_askbill_b.ntaxmny, po_askbill_b.npricetaxmny, ");
    sql
        .append("po_askbill_b.vmemo, po_askbill_b.vdef1, po_askbill_b.vdef2, po_askbill_b.vdef3, ");
    sql
        .append("po_askbill_b.vdef4, po_askbill_b.vdef5, po_askbill_b.vdef6, po_askbill_b.vfree1, ");
    sql
        .append("po_askbill_b.vfree2, po_askbill_b.vfree3, po_askbill_b.vfree4, po_askbill_b.vfree5, ");

    sql
        .append(" po_askbill.cdeptid, po_askbill.cemployeeid, ");
    sql
        .append("po_askbill.ccurrencytypeid, po_askbill.ctermprotocolid, po_askbill.dclosedate, ");
    sql
        .append("po_askbill.daskdate, po_askbill.caskpsn, po_askbill.dquotedate, ");
    sql
        .append("po_askbill.cquotepsn, po_askbill.ibillstatus, po_askbill.vaskbillcode, po_askbill_b.cbaseid, ");
//    sql.append("po_askbill_bb1.cvendormangid, ");
    // 全部显示名称
    sql.append("bd_invbasdoc.invcode, ");
    sql.append("bd_invbasdoc.invname, ");
    sql.append("bd_invbasdoc.invspec, ");
    sql.append("bd_invbasdoc.invtype, ");
    sql.append("bd_measdoc.measname, ");
//    sql.append("po_askbill_b.ntaxrate, ");
//    sql.append("bd_cubasdoc.custshortname, ");
    sql.append("bd_payterm.termname, ");
    sql.append("bd_currtype.currtypename, ");
    sql.append("bd_psndoc.psnname, ");
    sql.append("bd_deptdoc.deptname, ");
    sql.append("sm_user1.user_name, ");
    sql.append("sm_user2.user_name, ");
//    sql.append("po_askbill_b.ntaxrate, ");
//    sql.append("po_askbill_bb1.deliverdays,");
    sql.append("po_askbill_b.crowno, ");
    sql
        .append("po_askbill_b.vdef7, po_askbill_b.vdef8, po_askbill_b.vdef9, po_askbill_b.vdef10,po_askbill_b.vdef11, po_askbill_b.vdef12, po_askbill_b.vdef13, po_askbill_b.vdef14, po_askbill_b.vdef15, po_askbill_b.vdef16, po_askbill_b.vdef17, po_askbill_b.vdef18, po_askbill_b.vdef19, po_askbill_b.vdef20,po_askbill_b.pk_defdoc1,po_askbill_b.pk_defdoc2,po_askbill_b.pk_defdoc3,po_askbill_b.pk_defdoc4,po_askbill_b.pk_defdoc5,po_askbill_b.pk_defdoc6,po_askbill_b.pk_defdoc7,po_askbill_b.pk_defdoc8,po_askbill_b.pk_defdoc9,po_askbill_b.pk_defdoc10,po_askbill_b.pk_defdoc11,po_askbill_b.pk_defdoc12,po_askbill_b.pk_defdoc13,po_askbill_b.pk_defdoc14,po_askbill_b.pk_defdoc15,po_askbill_b.pk_defdoc16,po_askbill_b.pk_defdoc17,po_askbill_b.pk_defdoc18,po_askbill_b.pk_defdoc19,po_askbill_b.pk_defdoc20, ");
    sql.append("po_askbill.pk_purorg ");
    sql.append(strSQL);

    AskbillItemMergeVO[] askbillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      // stmt.setString(1, strQueryCondition);
      rs = stmt.executeQuery();
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070201")); 
      //
      while (rs.next()) {
        AskbillItemMergeVO askbillItem = new AskbillItemMergeVO();
        //
        int index = 1;
        String caskbill_bid = rs.getString(index++);
        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        //
        String caskbillid = rs.getString(index++);
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString(index++);
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cmangid = rs.getString(index++);
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        //
        Object nasknum = rs.getObject(index++);
        askbillItem.setNasknum((nasknum == null || "".equals(nasknum.toString()
            .trim())) ? null : new UFDouble(nasknum
            .toString().trim()));
        //
        String vpackmode = rs.getString(index++);
        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
            .trim());
        //
        String dreceivedate = rs.getString(index++);
        askbillItem.setDreceivedate(dreceivedate == null ? null
            : new UFDate(dreceivedate.trim(), false));
        //
        String vreveiveaddress = rs.getString(index++);
        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
            : vreveiveaddress.trim());
        //
//        Object nnotaxprice = rs.getObject(9);
//        askbillItem.setNquoteprice((nnotaxprice == null || nnotaxprice
//            .toString().trim().equals("")) ? null : new UFDouble(
//            nnotaxprice.toString().trim()));
        //
//        Object nintaxprice = rs.getObject(10);
//        askbillItem.setNquotetaxprice((nintaxprice == null || nintaxprice
//            .toString().trim().equals("")) ? null : new UFDouble(
//            nintaxprice.toString().trim()));
        //
        String vmemo = rs.getString(index++);
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vdef1 = rs.getString(index++);
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString(index++);
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString(index++);
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString(index++);
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString(index++);
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString(index++);
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        //
        String vfree1 = rs.getString(index++);
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString(index++);
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString(index++);
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString(index++);
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString(index++);
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());

        // 扩充VO部分
//        String cvendorbaseid = rs.getString(23);
//        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
//            : cvendorbaseid);

        String cdeptid = rs.getString(index++);
        askbillItem.setCdeptid(cdeptid == null ? null : cdeptid);

        String cemployeeid = rs.getString(index++);
        askbillItem.setCemployeeid(cemployeeid == null ? null
            : cemployeeid);

        String ccurrency = rs.getString(index++);
        askbillItem.setCcurrencytypeid(ccurrency == null ? null
            : ccurrency);

        String cterm = rs.getString(index++);
        askbillItem.setCtermprotocolid(cterm == null ? null : cterm);

        String closedate = rs.getString(index++);
        UFDate dclosedate = (closedate == null
             || ""
            .equals(closedate.trim())) ? null : new UFDate(closedate, false);
        askbillItem.setDclosedate(dclosedate);

        String askdate = rs.getString(index++);
        UFDate daskdate = (askdate == null  || "".equals(askdate
            .trim())) ? null : new UFDate(askdate, false);
        askbillItem.setDaskdate(daskdate);

        String caskpsn = rs.getString(index++);
        askbillItem.setCaskpsn(caskpsn == null ? null : caskpsn);

        String quotedate = rs.getString(index++);
        UFDate dquotedate = (quotedate == null
            || quotedate.equals(null) || ""
            .equals(quotedate.trim())) ? null : new UFDate(quotedate, false);
        askbillItem.setDquotedate(dquotedate);

        String cquotepsn = rs.getString(index++);
        askbillItem.setCquotepsn(cquotepsn == null ? null : cquotepsn);

        // 单据状态
        Integer status = (Integer) rs.getObject(index++);
        askbillItem.setIbillstatus(status == null ? null : status);

        // 询价单编码
        String code = rs.getString(index++);
        askbillItem.setVaskbillcode(code == null ? null : code);

        // 存货基本档案主键
        String cbaseid = rs.getString(index++);
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);

        // 供应商管理档案ID
//        String cvendormangid = rs.getString(36);
//        askbillItem.setCvendormangid(cvendormangid == null ? null
//            : cvendormangid);

        // 名称
        // sql.append( "bd_invbasdoc.invcode, ");
        // sql.append( "bd_invbasdoc.invname, ");
        // sql.append( "bd_invbasdoc.invspec, ");
        // sql.append( "bd_invbasdoc.invtype, ");
        // sql.append( "bd_measdoc.measname, ");
        // sql.append( "bd_taxitems.taxratio, ");
        // sql.append( "bd_cubasdoc.custshortname, ");
        // sql.append( "bd_payterm.termname, ");
        // sql.append( "bd_currtype.currtypename, ");
        // sql.append( "bd_psndoc.psnname, ");
        // sql.append( "bd_deptdoc.deptname, ");
        // sql.append( "sm_user1.user_name, ");
        // sql.append( "sm_user2.user_name ");
        String invcode = rs.getString(index++);
        askbillItem.setInvcode(invcode == null ? null : invcode.trim());
        String invname = rs.getString(index++);
        askbillItem.setInvname(invname == null ? null : invname.trim());
        String invspec = rs.getString(index++);
        askbillItem.setInvspec(invspec == null ? null : invspec.trim());
        String invtype = rs.getString(index++);
        askbillItem.setInvtype(invtype == null ? null : invtype.trim());
        String measname = rs.getString(index++);
        askbillItem.setCmainmeasname(measname == null ? null : measname
            .trim());
        // 税率（存货） 自由状态的询报价单不询税率 since5.3 modify by donggq
        Object taxratio = null;//rs.getObject(38);
        askbillItem.setTaxratioInv((taxratio == null || "".equals(taxratio
            .toString().trim())) ? null : new UFDouble(
            taxratio.toString().trim()));
        askbillItem.setNtaxrate((taxratio == null || "".equals(taxratio
            .toString().trim())) ? null : new UFDouble(
            taxratio.toString().trim()));
//        String custname = rs.getString(43);
//        askbillItem.setCustname(custname == null ? null : custname
//            .trim());
        String termname = rs.getString(index++);
        askbillItem.setTermname(termname == null ? null : termname
            .trim());
        String currtypename = rs.getString(index++);
        askbillItem.setCurrname(currtypename == null ? null
            : currtypename.trim());
        String psnname = rs.getString(index++);
        askbillItem.setCemployeeidname(psnname == null ? null : psnname
            .trim());
        String deptname = rs.getString(index++);
        askbillItem.setCdeptidname(deptname == null ? null : deptname
            .trim());
        String caskpsnname = rs.getString(index++);
        askbillItem.setCaskpsnname(caskpsnname == null ? null
            : caskpsnname.trim());
        String cquotepsnname = rs.getString(index++);
        askbillItem.setCquotepsnname(cquotepsnname == null ? null
            : cquotepsnname.trim());
        // 税率(报价)
//        Object oRate = rs.getObject(50);
//        askbillItem.setTaxratio((oRate == null || oRate.toString()
//            .trim().equals("")) ? null : new UFDouble(oRate
//            .toString().trim()));
        // 交货期（天）
//        Integer iDays = (Integer) rs.getObject(45);
//        askbillItem.setDeliverdays(iDays);
        // 单据行号
        String crowno = rs.getString(index++);
        askbillItem.setCrowno(crowno == null ? null : crowno.trim());
        // // vdef7 :
        String vdef7 = rs.getString(index++);
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(index++);
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(index++);
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(index++);
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(index++);
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(index++);
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(index++);
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(index++);
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(index++);
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(index++);
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(index++);
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(index++);
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(index++);
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(index++);
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(index++);
        askbillItem.setPk_defdoc1(pk_defdoc1 == null ? null : pk_defdoc1
            .trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(index++);
        askbillItem.setPk_defdoc2(pk_defdoc2 == null ? null : pk_defdoc2
            .trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(index++);
        askbillItem.setPk_defdoc3(pk_defdoc3 == null ? null : pk_defdoc3
            .trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(index++);
        askbillItem.setPk_defdoc4(pk_defdoc4 == null ? null : pk_defdoc4
            .trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(index++);
        askbillItem.setPk_defdoc5(pk_defdoc5 == null ? null : pk_defdoc5
            .trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(index++);
        askbillItem.setPk_defdoc6(pk_defdoc6 == null ? null : pk_defdoc6
            .trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(index++);
        askbillItem.setPk_defdoc7(pk_defdoc7 == null ? null : pk_defdoc7
            .trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(index++);
        askbillItem.setPk_defdoc8(pk_defdoc8 == null ? null : pk_defdoc8
            .trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(index++);
        askbillItem.setPk_defdoc9(pk_defdoc9 == null ? null : pk_defdoc9
            .trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(index++);
        askbillItem.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(index++);
        askbillItem.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(index++);
        askbillItem.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(index++);
        askbillItem.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(index++);
        askbillItem.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(index++);
        askbillItem.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(index++);
        askbillItem.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(index++);
        askbillItem.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(index++);
        askbillItem.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(index++);
        askbillItem.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(index++);
        askbillItem.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
//         // dvaliddate :
//        String dvaliddate = rs.getString(86);
//        askbillItem.setDvaliddate(dvaliddate == null ? null
//            : new UFDate(dvaliddate.trim()));
//         // dinvaliddate :
//        String dinvaliddate = rs.getString(87);
//        askbillItem.setDinvaliddate(dinvaliddate == null ? null
//            : new UFDate(dinvaliddate.trim()));
         // pk_purorg :
        String purorg = rs.getString(index++);
        askbillItem.setPk_purorg(purorg == null ? null
            : purorg.trim());

        v.addElement(askbillItem);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    if (v.size() > 0) {
      askbillItems = new AskbillItemMergeVO[v.size()];
      v.copyInto(askbillItems);
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForDetailVOMy",
        new Object[] { strSQL });
    /** ********************************************************** */

    return askbillItems;
  }
  /**
   * 为供应商报价查询表体[]
   * 
   * 创建日期：(2001-7-9)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param String
   *            pkInvman
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public AskbillItemVO_Old[] findAskItemsForVendorQuoteVOMy(String strSQL)
//      throws SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
//        "findAskItemsForVendorQuoteVOMy", new Object[] { strSQL });
//    /** ********************************************************** */
//
//    StringBuffer sql = new StringBuffer(
//        " SELECT po_askbill_b.caskbill_bid, po_askbill_b.caskbillid, po_askbill_b.pk_corp, ");
//    sql
//        .append("      po_askbill_b.cmangid, po_askbill_b.nasknum, po_askbill_b.vpackmode,  ");
//    sql
//        .append("      po_askbill_b.dreceivedate, po_askbill_b.vreveiveaddress, po_askbill_b.nnotaxprice,  ");
//    sql
//        .append("      po_askbill_b.nintaxprice, po_askbill_b.bisorder, po_askbill_b.nordernum,  ");
//    sql
//        .append("      po_askbill_b.nordernotaxprice, po_askbill_b.norderintaxprice,  ");
//    sql
//        .append("      po_askbill_b.nordernotaxmny, po_askbill_b.ntaxmny, po_askbill_b.npricetaxmny,  ");
//    sql
//        .append("    po_askbill_b.vmemo, po_askbill_b.vdef1, po_askbill_b.vdef2, po_askbill_b.vdef3,  ");
//    sql
//        .append("      po_askbill_b.vdef4, po_askbill_b.vdef5, po_askbill_b.vdef6, po_askbill_b.vfree1,  ");
//    sql
//        .append("      po_askbill_b.vfree2, po_askbill_b.vfree3, po_askbill_b.vfree4, po_askbill_b.vfree5, po_askbill_b.cbaseid,  ");
//
//    // 附加字段
//    sql.append("     bd_cubasdoc.custshortname, bd_invbasdoc.invcode,  ");
//    sql
//        .append("      bd_invbasdoc.invname, bd_invbasdoc.invspec, bd_invbasdoc.invtype,  ");
//    sql
//        .append("      bd_measdoc.measname, bd_taxitems.taxratio, bd_invmandoc.planprice,  ");
//    sql
//        .append("    bd_invmandoc.costprice, po_askbill.dquotedate, po_askbill_b.crowno  ");
//    sql
//        .append("po_askbill_b.vdef7, po_askbill_b.vdef8, po_askbill_b.vdef9, po_askbill_b.vdef10,po_askbill_b.vdef11, po_askbill_b.vdef12, po_askbill_b.vdef13, po_askbill_b.vdef14, po_askbill_b.vdef15, po_askbill_b.vdef16, po_askbill_b.vdef17, po_askbill_b.vdef18, po_askbill_b.vdef19, po_askbill_b.vdef20,po_askbill_b.pk_defdoc1,po_askbill_b.pk_defdoc2,po_askbill_b.pk_defdoc3,po_askbill_b.pk_defdoc4,po_askbill_b.pk_defdoc5,po_askbill_b.pk_defdoc6,po_askbill_b.pk_defdoc7,po_askbill_b.pk_defdoc8,po_askbill_b.pk_defdoc9,po_askbill_b.pk_defdoc10,po_askbill_b.pk_defdoc11,po_askbill_b.pk_defdoc12,po_askbill_b.pk_defdoc13,po_askbill_b.pk_defdoc14,po_askbill_b.pk_defdoc15,po_askbill_b.pk_defdoc16,po_askbill_b.pk_defdoc17,po_askbill_b.pk_defdoc18,po_askbill_b.pk_defdoc19,po_askbill_b.pk_defdoc20 ");
//
//    sql.append(strSQL);
//
//    AskbillItemVO_Old[] askbillItems = null;
//    Vector v = new Vector();
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sql.toString());
//      rs = stmt.executeQuery();
//      //
//      while (rs.next()) {
//        AskbillItemVO_Old askbillItem = new AskbillItemVO_Old();
//        //
//        String caskbill_bid = rs.getString(1);
//        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
//            : caskbill_bid.trim());
//        //
//        String caskbillid = rs.getString(2);
//        askbillItem.setCaskbillid(caskbillid == null ? null
//            : caskbillid.trim());
//        //
//        String pk_corp = rs.getString(3);
//        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
//        //
//        String cmangid = rs.getString(4);
//        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
//        //
//        Object nasknum = rs.getObject(5);
//        askbillItem.setNasknum((nasknum == null || nasknum.toString()
//            .trim().equals("")) ? null : new UFDouble(nasknum
//            .toString().trim()));
//        //
//        String vpackmode = rs.getString(6);
//        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
//            .trim());
//        //
//        String dreceivedate = rs.getString(7);
//        askbillItem.setDreceivedate(dreceivedate == null ? null
//            : new UFDate(dreceivedate.trim(), false));
//        //
//        String vreveiveaddress = rs.getString(8);
//        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
//            : vreveiveaddress.trim());
//        //
//        Object nnotaxprice = rs.getObject(9);
//        askbillItem.setNnotaxprice((nnotaxprice == null || nnotaxprice
//            .toString().trim().equals("")) ? null : new UFDouble(
//            nnotaxprice.toString().trim()));
//        //
//        Object nintaxprice = rs.getObject(10);
//        askbillItem.setNintaxprice((nintaxprice == null || nintaxprice
//            .toString().trim().equals("")) ? null : new UFDouble(
//            nintaxprice.toString().trim()));
//        //
//        Integer bisorder = (Integer) rs.getObject(11);
//        askbillItem.setBisorder(bisorder == null ? null : bisorder);
//        //
//        Object nordernum = rs.getObject(12);
//        askbillItem.setNordernum((nordernum == null || nordernum
//            .toString().trim().equals("")) ? null : new UFDouble(
//            nordernum.toString().trim()));
//        //
//        Object nordernotaxprice = rs.getObject(13);
//        askbillItem
//            .setNordernotaxprice((nordernotaxprice == null || nordernotaxprice
//                .toString().trim().equals("")) ? null
//                : new UFDouble(nordernotaxprice.toString()
//                    .trim()));
//        //
//        Object norderintaxprice = rs.getObject(14);
//        askbillItem
//            .setNorderintaxprice((norderintaxprice == null || norderintaxprice
//                .toString().trim().equals("")) ? null
//                : new UFDouble(norderintaxprice.toString()
//                    .trim()));
//        //
//        Object nordernotaxmny = rs.getObject(15);
//        askbillItem
//            .setNordernotaxmny((nordernotaxmny == null || nordernotaxmny
//                .toString().trim().equals("")) ? null
//                : new UFDouble(nordernotaxmny.toString().trim()));
//        //
//        Object ntaxmny = rs.getObject(16);
//        askbillItem.setNtaxmny((ntaxmny == null || ntaxmny.toString()
//            .trim().equals("")) ? null : new UFDouble(ntaxmny
//            .toString().trim()));
//        //
//        Object npricetaxmny = rs.getObject(17);
//        askbillItem
//            .setNpricetaxmny((npricetaxmny == null || npricetaxmny
//                .toString().trim().equals("")) ? null
//                : new UFDouble(npricetaxmny.toString().trim()));
//        //
//        String vmemo = rs.getString(18);
//        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
//        //
//        String vdef1 = rs.getString(19);
//        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
//        //
//        String vdef2 = rs.getString(20);
//        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
//        //
//        String vdef3 = rs.getString(21);
//        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
//        //
//        String vdef4 = rs.getString(22);
//        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
//        //
//        String vdef5 = rs.getString(23);
//        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
//        //
//        String vdef6 = rs.getString(24);
//        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
//        //
//        String vfree1 = rs.getString(25);
//        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
//        //
//        String vfree2 = rs.getString(26);
//        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
//        //
//        String vfree3 = rs.getString(27);
//        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
//        //
//        String vfree4 = rs.getString(28);
//        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
//        //
//        String vfree5 = rs.getString(29);
//        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());
//
//        // 存货基本档案主键
//        String cbaseid = rs.getString(30);
//        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);
//
//        // 附加字段
//        String vendor = rs.getString(31);
//        askbillItem.setCustname(vendor == null ? null : vendor);
//
//        String code = rs.getString(32);
//        askbillItem.setInvcode(code == null ? null : code);
//
//        String name = rs.getString(33);
//        askbillItem.setInvname(name == null ? null : name);
//
//        String spec = rs.getString(34);
//        askbillItem.setInvspec(spec == null ? null : spec);
//
//        String type = rs.getString(35);
//        askbillItem.setInvtype(type == null ? null : type);
//
//        String meas = rs.getString(36);
//        askbillItem.setMeasureName(meas == null ? null : meas);
//
//        Object tax = rs.getObject(37);
//        askbillItem.setTaxratio((tax == null || tax.toString().trim()
//            .equals("")) ? null : new UFDouble(tax.toString()
//            .trim()));
//
//        Object pp = rs.getObject(38);
//        askbillItem.setPlanprice((pp == null || pp.toString().trim()
//            .equals("")) ? null
//            : new UFDouble(pp.toString().trim()));
//
//        Object cp = rs.getObject(39);
//        askbillItem.setCostprice((cp == null || cp.toString().trim()
//            .equals("")) ? null
//            : new UFDouble(cp.toString().trim()));
//
//        String quotedate = rs.getString(40);
//        askbillItem.setDquotedate(quotedate == null ? null
//            : new UFDate(quotedate.trim(), false));
//        // 单据行号
//        String crowno = rs.getString(41);
//        askbillItem.setRowno(crowno == null ? null : crowno.trim());
//        // // vdef7 :
//        String vdef7 = rs.getString(42);
//        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
//        // // vdef8 :
//        String vdef8 = rs.getString(43);
//        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
//        // // vdef9 :
//        String vdef9 = rs.getString(44);
//        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
//        // // vdef10 :
//        String vdef10 = rs.getString(45);
//        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
//        // // vdef11 :
//        String vdef11 = rs.getString(46);
//        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
//        // // vdef12 :
//        String vdef12 = rs.getString(47);
//        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
//        // // vdef13 :
//        String vdef13 = rs.getString(48);
//        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
//        // // vdef14 :
//        String vdef14 = rs.getString(49);
//        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
//        // // vdef15 :
//        String vdef15 = rs.getString(50);
//        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
//        // // vdef16 :
//        String vdef16 = rs.getString(51);
//        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
//        // // vdef17 :
//        String vdef17 = rs.getString(52);
//        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
//        // // vdef18 :
//        String vdef18 = rs.getString(53);
//        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
//        // // vdef19 :
//        String vdef19 = rs.getString(54);
//        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
//        // // vdef20 :
//        String vdef20 = rs.getString(55);
//        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());
//
//        // // pk_defdoc1 :
//        String pk_defdoc1 = rs.getString(56);
//        askbillItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1
//            .trim());
//        // // pk_defdoc2 :
//        String pk_defdoc2 = rs.getString(57);
//        askbillItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2
//            .trim());
//        // // pk_defdoc3 :
//        String pk_defdoc3 = rs.getString(58);
//        askbillItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3
//            .trim());
//        // // pk_defdoc4 :
//        String pk_defdoc4 = rs.getString(59);
//        askbillItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4
//            .trim());
//        // // pk_defdoc5 :
//        String pk_defdoc5 = rs.getString(60);
//        askbillItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5
//            .trim());
//        // // pk_defdoc6 :
//        String pk_defdoc6 = rs.getString(61);
//        askbillItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6
//            .trim());
//        // // pk_defdoc7 :
//        String pk_defdoc7 = rs.getString(62);
//        askbillItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7
//            .trim());
//        // // pk_defdoc8 :
//        String pk_defdoc8 = rs.getString(63);
//        askbillItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8
//            .trim());
//        // // pk_defdoc9 :
//        String pk_defdoc9 = rs.getString(64);
//        askbillItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9
//            .trim());
//        // // pk_defdoc10 :
//        String pk_defdoc10 = rs.getString(65);
//        askbillItem.setPKDefDoc10(pk_defdoc10 == null ? null
//            : pk_defdoc10.trim());
//        // // pk_defdoc11 :
//        String pk_defdoc11 = rs.getString(66);
//        askbillItem.setPKDefDoc11(pk_defdoc11 == null ? null
//            : pk_defdoc11.trim());
//        // // pk_defdoc12 :
//        String pk_defdoc12 = rs.getString(67);
//        askbillItem.setPKDefDoc12(pk_defdoc12 == null ? null
//            : pk_defdoc12.trim());
//        // // pk_defdoc13 :
//        String pk_defdoc13 = rs.getString(68);
//        askbillItem.setPKDefDoc13(pk_defdoc13 == null ? null
//            : pk_defdoc13.trim());
//        // // pk_defdoc14 :
//        String pk_defdoc14 = rs.getString(69);
//        askbillItem.setPKDefDoc14(pk_defdoc14 == null ? null
//            : pk_defdoc14.trim());
//        // // pk_defdoc15 :
//        String pk_defdoc15 = rs.getString(70);
//        askbillItem.setPKDefDoc15(pk_defdoc15 == null ? null
//            : pk_defdoc15.trim());
//        // // pk_defdoc16 :
//        String pk_defdoc16 = rs.getString(71);
//        askbillItem.setPKDefDoc16(pk_defdoc16 == null ? null
//            : pk_defdoc16.trim());
//        // // pk_defdoc17 :
//        String pk_defdoc17 = rs.getString(72);
//        askbillItem.setPKDefDoc17(pk_defdoc17 == null ? null
//            : pk_defdoc17.trim());
//        // // pk_defdoc18 :
//        String pk_defdoc18 = rs.getString(73);
//        askbillItem.setPKDefDoc18(pk_defdoc18 == null ? null
//            : pk_defdoc18.trim());
//        // // pk_defdoc19 :
//        String pk_defdoc19 = rs.getString(74);
//        askbillItem.setPKDefDoc19(pk_defdoc19 == null ? null
//            : pk_defdoc19.trim());
//        // // pk_defdoc20 :
//        String pk_defdoc20 = rs.getString(75);
//        askbillItem.setPKDefDoc20(pk_defdoc20 == null ? null
//            : pk_defdoc20.trim());
//
//        v.addElement(askbillItem);
//      }
//    } finally {
//      try {
//        if (rs != null)
//          rs.close();
//      } catch (Exception e) {
//
//      }
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//    if (v.size() > 0) {
//      askbillItems = new AskbillItemVO_Old[v.size()];
//      v.copyInto(askbillItems);
//    }
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
//        "findAskItemsForVendorQuoteVOMy", new Object[] { strSQL });
//    /** ********************************************************** */
//
//    return askbillItems;
//  }

  /**
   * <p>
   *询报价单新增保存
   * <p>
   * 创建日期：(2001-09-25)
   * @return Vector  0---AskbillHeaderVO
   *                  1---AskbillItemVO[]
   *                  2---AskbillItemBVO[]
   *                  3---AskbillItemVendorVO[]
   * @param vo
   *            nc.vo.pp.ask.AskbillVO
   * @throws SQLException 
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public Vector insertForAskBill(Vector resultV) throws BusinessException, SQLException {

    AskbillHeaderVO headerVO = (AskbillHeaderVO) resultV.get(0);
    AskbillItemVO[] itemVOs = (AskbillItemVO[]) resultV.get(1);
    AskbillItemBVO[] itemBVOs = (AskbillItemBVO[]) resultV.get(2);
    AskbillItemVendorVO[] itemVendorVOs = (AskbillItemVendorVO[]) resultV.get(3);
    AskbillVO askBillVO = new AskbillVO();
    askBillVO.setParentVO(headerVO);
    askBillVO.setChildrenVO(itemVOs);
    nc.bs.pu.pub.GetSysBillCode codeDmo = null;
    String vAskCode = null;
//    PraybillImpl prayBO = new PraybillImpl();

    // 插入表头：
    // 获得单据号
    try {
      codeDmo = new nc.bs.pu.pub.GetSysBillCode();
      vAskCode = codeDmo.getSysBillNO(askBillVO);
      headerVO.setVaskbillcode(vAskCode);
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    }
    String key = insertHeader(headerVO);
    headerVO.setCaskbillid(key);

    // 插入子表各项
    // 处理所有外键
    for (int i = 0; i < itemVOs.length; i++) {
      itemVOs[i].setCaskbillid(key);
    }
    // 一次性插入所有子表
    itemVOs = insertItemMyArray(itemVOs);
    // 保证子表和子子表对应的正确性
    Hashtable itemH = new Hashtable();
    String sperialNum = null;
    String caskbill_bid = null;
    for (int i = 0; i < itemVOs.length; i++) {
      sperialNum = itemVOs[i].getSpecialNum();
      if (sperialNum != null && sperialNum.trim() != null
          && !itemH.containsKey(sperialNum)) {
        caskbill_bid = itemVOs[i].getCaskbill_bid();
        itemH.put(sperialNum, caskbill_bid);
      }
    }

    // 插入供应商子表各项
    // 处理所有外键
    String caskbill_b1id = null;
    String cvendormangid = null;
    Hashtable itemVendorH = new Hashtable();
    if (itemVendorVOs != null && itemVendorVOs.length > 0) {
      for (int i = 0; i < itemVendorVOs.length; i++) {
        itemVendorVOs[i].setCaskbillid(key);
      }
      // 一次性插入所有子表
      itemVendorVOs = insertItemVendorMyArray(itemVendorVOs);
      // 保证子表和子子表对应的正确性
      for (int i = 0; i < itemVendorVOs.length; i++) {
        cvendormangid = itemVendorVOs[i].getCvendormangid();
        if (cvendormangid != null && cvendormangid.trim() != null
            && !itemVendorH.containsKey(cvendormangid)) {
          caskbill_b1id = itemVendorVOs[i].getCaskbill_b1id();
          itemVendorH.put(cvendormangid, caskbill_b1id);
        }
      }
    }
    if (itemBVOs != null && itemBVOs.length > 0) {
      // 插入子子表各项
      // 处理所有外键
      for (int i = 0; i < itemBVOs.length; i++) {
        itemBVOs[i].setCaskbillid(key);
        sperialNum = itemBVOs[i].getSpecialNum();
        caskbill_bid = (String) itemH.get(sperialNum);
        itemBVOs[i].setCaskbill_bid(caskbill_bid);
        cvendormangid = itemBVOs[i].getCvendmangid();
        if (cvendormangid != null
            && cvendormangid.trim().length() > 0 && itemVendorH.get(cvendormangid) != null && itemVendorH.get(cvendormangid).toString().trim().length() > 0) {
          caskbill_b1id = (String) itemVendorH.get(cvendormangid);
        }
        itemBVOs[i].setCaskbill_b1id(caskbill_b1id);
      }
      // 一次性插入所有子表
      itemBVOs = insertItemBMyArray(itemBVOs);
    }
        Hashtable result = new Hashtable();
    // 主表
        result = queryTs(key, new Integer(IPosition.HEAD).toString());
    if (result != null && result.size() > 0) {
      headerVO.setTs((String)result.get(key));
    }
    // 子表
    result = queryTs(key, new Integer(IPosition.BODY).toString());
    if (result != null && result.size() > 0 &&  itemVOs != null
        && itemVOs.length > 0) {
      for (int i = 0; i < itemVOs.length; i++) {
        itemVOs[i].setTs((String)result.get(itemVOs[i].getPrimaryKey()));
      }
    }
    if (itemBVOs != null && itemBVOs.length > 0) {
      // 子子表
      result = queryTs(key, new Integer(IPosition.BBODY).toString());
      if (result != null && result.size() > 0 && itemBVOs != null
          && itemBVOs.length > 0) {
        for (int i = 0; i < itemBVOs.length; i++) {
          itemBVOs[i].setTs((String)result.get(itemBVOs[i].getPrimaryKey()));
        }
      }
    }
    // 供应商子表
    if (itemVendorVOs != null && itemVendorVOs.length > 0) {
      result = queryTs(key, new Integer(IPosition.VBODY).toString());
      if (result != null && result.size() > 0 && itemVendorVOs != null
          && itemVendorVOs.length > 0) {
        for (int i = 0; i < itemVendorVOs.length; i++) {
          itemVendorVOs[i].setTs((String)result.get(itemVendorVOs[i].getPrimaryKey()));
        }
      }
    }
    // 回写累计生成询价数量
//    ParaRewriteVO paraVo = new ParaRewriteVO();
//    Vector rowIdsTemp = new Vector();
//    Vector headIdsTemp = new Vector();
//    Vector numTemp = new Vector();
//    String[] rowIds = null;
//    String[] headIds = null;
//    UFDouble[] num = null;
//    // AskbillItemVO[] itemVO = null;
//    rowIds = new String[itemVOs.length];
//    num = new UFDouble[itemVOs.length];
//    for (int j = 0; j < itemVOs.length; j++) {
//      if (itemVOs[j].getCupsourcebilltype() != null
//          && itemVOs[j].getCupsourcebilltype().equals(IBillType.PRAYBILL)) {
//        rowIdsTemp.add(itemVOs[j].getCupsourcebillrowid());
//        headIdsTemp.add(itemVOs[j].getCupsourcebillid());
//        numTemp.add(itemVOs[j].getNasknum());
//      }
//    }
//    if (rowIdsTemp.size() > 0 && numTemp.size() > 0
//        && rowIdsTemp.size() == numTemp.size()) {
//      rowIds = new String[rowIdsTemp.size()];
//      rowIdsTemp.copyInto(rowIds);
//      headIds = new String[headIdsTemp.size()];
//      headIdsTemp.copyInto(headIds);
//      num = new UFDouble[numTemp.size()];
//      numTemp.copyInto(num);
//      paraVo.setCBodyIdArray(rowIds);
//      paraVo.setCHeadIdArray(headIds);
//      paraVo.setDNumArray(num);
//      try {
//        prayBO.updateNaccAskNum(paraVo, new Integer(IOperation.ADD).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
    // 组织数据
    resultV = new Vector();
    resultV.add(headerVO);
    resultV.add(itemVOs);
    resultV.add(itemBVOs);
    resultV.add(itemVendorVOs);
    return resultV;
  }

  /**
   * <p>
   * 注意插入方法返回含主键的VO
   * <p>
   * 创建日期：(2001-09-25)
   * 
   * @param vo
   *            nc.vo.pp.ask.AskbillVO
   * @throws SQLException 
   * @throws Exception
   */
  public Vector insertForPriceAuditBill(Vector v) throws BusinessException, SQLException {

    PriceauditHeaderVO headerVO = (PriceauditHeaderVO) v.get(0);
    PriceauditBVO[] itemVOs = (PriceauditBVO[]) v.get(1);
    PriceauditBb1VO[] itemBVOs = (PriceauditBb1VO[]) v.get(2);
    PriceauditVO askBillVO = new PriceauditVO();
    askBillVO.setParentVO(headerVO);
    askBillVO.setChildrenVO(itemVOs);
    nc.bs.pu.pub.GetSysBillCode codeDmo = null;
    String vAskCode = null;
//    PraybillImpl prayBO = new PraybillImpl();

    // 插入表头：
    // 获得单据号
    try {
      codeDmo = new nc.bs.pu.pub.GetSysBillCode();
      vAskCode = codeDmo.getSysBillNO(askBillVO);
      headerVO.setVpriceauditcode(vAskCode);
    } catch (Exception e) {
      // TODO 自动生成 catch 块
      SCMEnv.out(e.getMessage());
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    }
    String key = insertHeaderForPriceAudit(headerVO);
    headerVO.setPrimaryKey(key);

    // 插入子表各项
    // 处理所有外键
    Vector vCmangid  =new Vector();
    for (int i = 0; i < itemVOs.length; i++) {
      itemVOs[i].setCpriceauditid(key);
      if(itemVOs[i].getCmangid() != null && !vCmangid.contains(itemVOs[i].getCmangid())){
        vCmangid.add(itemVOs[i].getCmangid());
      }
    }
    // 一次性插入所有子表
    itemVOs = insertItemMyArrayForPriceAudit(itemVOs);
    // 保证子表和子子表对应的正确性
    Hashtable itemH = new Hashtable();
    Hashtable itemHT = new Hashtable();
    Hashtable itemHForBody = new Hashtable();
//    PriceauditBVO itemVOT = null;
    String sperialNum = null;
    String cmangid = null;
    String caskbill_bid = null;
    Hashtable hTmp2 = new Hashtable();
    Hashtable hTmp1 = new Hashtable();
    hTmp1 = getPriceLastForThanVOHash(vCmangid, headerVO.getPk_corp());
    for (int i = 0; i < itemVOs.length; i++) {
          // 查询采购最新价
        cmangid = itemVOs[i].getCmangid();
        
        if (!hTmp2.containsKey(cmangid)) {
          if (hTmp1 != null && hTmp1.size() > 0) {
            if (hTmp1.get(cmangid) != null
                && hTmp1.get(cmangid).toString().trim()
                    .length() > 0) {
              itemVOs[i].setLastprice((UFDouble) hTmp1
                  .get(cmangid));
              hTmp2.put(cmangid, (UFDouble) hTmp1
                  .get(cmangid));
            }
          }
        } else {
          itemVOs[i].setLastprice((UFDouble) hTmp2
              .get(cmangid));
        }
      sperialNum = itemVOs[i].getSpecialnum();
      cmangid = itemVOs[i].getCmangid();
      caskbill_bid = itemVOs[i].getPrimaryKey();
      if (sperialNum != null && sperialNum.trim().length() > 0
          && !itemH.containsKey(sperialNum)) {

        itemH.put(sperialNum, caskbill_bid);
        if (itemVOs[i].getCupsourcebilltype() != null
            && itemVOs[i].getCupsourcebilltype().trim()
                .length() > 0) {
          itemHT.put(sperialNum.substring(0,20), itemVOs[i]);
        }
      }
      if (caskbill_bid != null && caskbill_bid.trim().length() > 0 && cmangid != null && cmangid.trim().length() > 0
          && !itemHForBody.containsKey(caskbill_bid)) {
        itemHForBody.put(caskbill_bid, sperialNum);
      }
    }
    if (itemBVOs != null && itemBVOs.length > 0) {
      // 插入子子表各项
      // 处理所有外键
      String cquotebillid = null;
      for (int i = 0; i < itemBVOs.length; i++) {
        itemBVOs[i].setCpriceauditid(key);
        sperialNum = itemBVOs[i].getSpecialnum();
        cquotebillid = itemBVOs[i].getCquotebillid();
        caskbill_bid = (String) itemH.get(sperialNum);
        itemBVOs[i].setCpriceaudit_bid(caskbill_bid);
        if (
            //itemHT.get(sperialNum.substring(0,20)) == null
            //&& 
            (cquotebillid == null || (cquotebillid != null && cquotebillid
                .trim().length() == 0))) {// 报价来源处理
          itemBVOs[i].setCquotebillid(key);
          itemBVOs[i].setCquotebill_bid(caskbill_bid);
          itemBVOs[i].setCquotebill_bb1id("self");
          itemBVOs[i].setVquotebillcode(vAskCode);
        }
      }
      // 一次性插入所有子子表
      itemBVOs = insertItemBMyArrayForPriceAudit(itemBVOs);

    }
        Hashtable resultH = new Hashtable();
    // 主表
        resultH = queryTsForPriceAudit(key, new Integer(IPosition.HEAD).toString());
    //if (hts != null && hts.length > 0) {
      headerVO.setTs((String)resultH.get(key));
    //}
    // 子表
    Vector rowIdsFromAskBill = new Vector();
    resultH = queryTsForPriceAudit(key, new Integer(IPosition.BODY).toString());
//    if (bts != null && bts.length > 0 && itemVOs != null
//        && itemVOs.length > 0) {
      for (int i = 0; i < itemVOs.length; i++) {
        itemVOs[i].setTs((String)resultH.get(itemVOs[i].getPrimaryKey()));
        if (itemVOs[i].getCupsourcebilltype() != null
            && "29".equals(itemVOs[i].getCupsourcebilltype())) {// 询报价转价格审批单
          if (!rowIdsFromAskBill.contains(itemVOs[i].getCupsourcebillid())) {
            rowIdsFromAskBill.add(itemVOs[i].getCupsourcebillid());
          }
        }
      }
//    }
    if (itemBVOs != null && itemBVOs.length > 0) {
      // 排序：无订货信息的按照价格排序，有订货价格的按照订货标志的表体行，按照采购优先级顺序显示
      itemBVOs = queryItemBForPriceAuditByHid(new String[] { key });
      // 赋特殊号的值
      for (int i = 0; i < itemBVOs.length; i++) {
        itemBVOs[i].setSpecialnum((String) itemHForBody.get(itemBVOs[i]
            .getCpriceaudit_bid()));
      }
      // 子子表
      resultH = queryTsForPriceAudit(key, new Integer(IPosition.BBODY).toString());
//      if (bb1ts != null && bb1ts.length > 0 && itemBVOs != null
//          && itemBVOs.length > 0) {
        for (int i = 0; i < itemBVOs.length; i++) {
          itemBVOs[i].setTs((String)resultH.get(itemBVOs[i].getPrimaryKey()));
        }
//      }
    }

    // 回写生成价格审批单次数
//    ParaRewriteVO paraVo = new ParaRewriteVO();
//    Vector rowIdsTemp = new Vector();
//    Vector headIdsTemp = new Vector();
//    Vector numTemp = new Vector();
//    String[] rowIds = null;
//    String[] headIds = null;
//    UFDouble[] num = null;
//    rowIds = new String[itemVOs.length];
//    num = new UFDouble[itemVOs.length];
//    Vector upPk = new Vector();
//    Hashtable itemTempH = new Hashtable();
//    for (int j = 0; j < itemVOs.length; j++) {
//      if (itemVOs[j].getCupsourcebilltype() != null
//          && itemVOs[j].getCupsourcebilltype().equals(IBillType.PRAYBILL)) {// 请购转价格审批单
//        rowIdsTemp.add(itemVOs[j].getCupsourcebillrowid());
//        headIdsTemp.add(itemVOs[j].getCupsourcebillid());
//        numTemp.add(itemVOs[j].getNnum());
//      } else if (itemVOs[j].getCupsourcebilltype() != null
//          && itemVOs[j].getCupsourcebilltype().equals(IBillType.ASKBILL)) {// 询报价转价格审批单
//        upPk.add(itemVOs[j].getCupsourcebillrowid());
//        if (itemVOs[j].getNnum() != null
//            && itemVOs[j].getNnum().toString().trim().length() > 0) {
//          itemTempH.put(itemVOs[j].getCupsourcebillrowid(),
//              itemVOs[j].getNnum());
//        } else {
//          itemTempH.put(itemVOs[j].getCupsourcebillrowid(),
//              new UFDouble(0.00));
//        }
//      }
//    }
//    // 询报价转价格审批单对来源于请购单的行也需要回写
//    if (upPk.size() > 0) {
//      Hashtable result = null;
//      StringBuffer sqlCondition = new StringBuffer();
//      AskbillItemVO itemT = null;
//      for (int i = 0; i < upPk.size(); i++) {
//        if (i < upPk.size() - 1) {
//          sqlCondition.append("'" + upPk.get(i).toString().trim()
//              + "',");
//        } else {
//          sqlCondition.append("'" + upPk.get(i).toString().trim()
//              + "'");
//        }
//      }
//
//      AskbillDMO dmo;
//      try {
//        dmo = new AskbillDMO();
//        // 查询询报价单来源于请购单的行
//        result = dmo.querySourceInfoForRwPray(sqlCondition.toString());
//      } catch (SystemException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      } catch (NamingException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//      if (result.size() > 0) {
//        for (int i = 0; i < upPk.size(); i++) {
//          itemT = (AskbillItemVO) result.get(upPk.get(i));
//          rowIdsTemp.add(itemT.getCupsourcebillrowid());
//          headIdsTemp.add(itemT.getCupsourcebillid());
//          numTemp.add(itemTempH.get(upPk.get(i)));
//        }
//      }
//    }
//    // 回写请购单生成价格审批单次数字段
//    if (rowIdsTemp.size() > 0 && numTemp.size() > 0
//        && rowIdsTemp.size() == numTemp.size()) {
//      rowIds = new String[rowIdsTemp.size()];
//      rowIdsTemp.copyInto(rowIds);
//      headIds = new String[headIdsTemp.size()];
//      headIdsTemp.copyInto(headIds);
//      num = new UFDouble[numTemp.size()];
//      numTemp.copyInto(num);
//      paraVo.setCBodyIdArray(rowIds);
//      paraVo.setCHeadIdArray(headIds);
//      paraVo.setDNumArray(num);
//      try {
//        prayBO.updateNaccPriceAuditNum(paraVo, new Integer(IOperation.ADD).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
//    // 回写询报价单完成标志
//    ReWriteAskBillStatus(rowIdsFromAskBill, 0);
    // 组织数据
    v = new Vector();
    v.add(headerVO);
    v.add(itemVOs);
    v.add(itemBVOs);
    v.add(rowIdsFromAskBill);
    return v;
  }

  /**
   * @功能：给表头赋值： ------------------存货名称，存货编码，规格，型号，参考成本，计划价，主计量单位
   * @作者：周晓 创建日期：(2001-7-11 15:40:31)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @param headers
   *            nc.vo.pp.ask.AnalyseHeaderVO[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void setStockExecInvMy(AnalyseHeaderVO[] headers)
      throws java.sql.SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "setStockExecInvMy",
        new Object[] { headers });
    /** ********************************************************** */
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      String sql = "select bd_invbasdoc.invname, bd_invbasdoc.invcode ,bd_invbasdoc.invspec,bd_invbasdoc.invtype,bd_invmandoc.costprice,bd_invmandoc.planprice,bd_measdoc.measname from bd_invmandoc, bd_invbasdoc, bd_measdoc where bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc and bd_invbasdoc.pk_invbasdoc = bd_measdoc.pk_measdoc and bd_invmandoc.pk_invmandoc = ? ";
      con = getConnection();
      stmt = con.prepareStatement(sql);
      for (int i = 0; i < headers.length; i++) {
        stmt.setString(1, headers[i].getCmangid());
          rs = stmt.executeQuery();
        while (rs.next()) {

          String invname = rs.getString(1);
          String invcode = rs.getString(2);
          String invspec = rs.getString(3);
          String invtype = rs.getString(4);
          Object cost = rs.getObject(5);
          Object plan = rs.getObject(6);
          String measname = rs.getString(7);

          headers[i].setInvname(invname == null ? null : invname
              .trim());
          headers[i].setInvcode(invcode == null ? null : invcode
              .trim());
          headers[i].setSpec(invspec == null ? null : invspec.trim());
          headers[i].setType(invtype == null ? null : invtype.trim());
          headers[i].setPcost((cost == null || ""
              .equals(cost.toString().trim())) ? null : new UFDouble(cost.toString()
              .trim()));
          headers[i].setPplan((plan == null || ""
              .equals(plan.toString().trim())) ? null : new UFDouble(plan.toString()
              .trim()));
          headers[i].setMeasure(measname == null ? null : measname
              .trim());
        }
        if (rs != null)
          rs.close();
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "setStockExecInvMy",
        new Object[] { headers });
    /** ********************************************************** */
  }

  /**
   * @功能：根据一个存货主键给比价VO赋相关存货相关信息值
   * @作者：周晓 创建日期：(2001-6-16 17:32:46)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @param vo
   *            nc.vo.pp.ask.ThanresultHeaderVO
   * @param pk_invdoc
   *            java.lang.String
   */
  public void setThanHeaderInvValuesMy(ThanresultHeaderVO vo, String pk_invdoc)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "setThanHeaderInvValuesMy",
        new Object[] { vo, pk_invdoc });
    /** ********************************************************** */

    String sql = "SELECT bd_invbasdoc.invcode, bd_invbasdoc.invname, bd_invbasdoc.invspec, bd_invbasdoc.invtype, bd_taxitems.taxratio, bd_measdoc.measname FROM bd_invbasdoc INNER JOIN bd_measdoc ON bd_invbasdoc.pk_measdoc = bd_measdoc.pk_measdoc INNER JOIN bd_taxitems ON bd_invbasdoc.pk_taxitems = bd_taxitems.pk_taxitems WHERE pk_invbasdoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_invdoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        String invcode = rs.getString(1);
        vo.setInvcode(invcode == null ? null : invcode.trim());

        String invname = rs.getString(2);
        vo.setInvname(invname == null ? null : invname.trim());

        String invtype = rs.getString(3);
        vo.setType(invtype == null ? null : invtype.trim());

        String invspec = rs.getString(4);
        vo.setSpec(invspec == null ? null : invspec.trim());

        Object taxrate = rs.getObject(5);
        vo.setTaxratio((taxrate == null || ""
            .equals(taxrate.toString().trim())) ? null : new UFDouble(taxrate.toString()
            .trim()));

        String measdoc = rs.getString(6);
        vo.setCmainmeasname(measdoc == null ? null : measdoc.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "setThanHeaderInvValuesMy",
        new Object[] { vo, pk_invdoc });
    /** ********************************************************** */

  }

  /**
   * @功能：根据一个存货主键作供应商的报价(最价)统计
   * @作者：周晓 创建日期：(2001-07-10 08:32:46)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @param vo
   *            nc.vo.pp.ask.AnalyseHeaderVO
   * @param pk_invdoc
   *            java.lang.String
   */
  public void setVQTailPriceValuesMy(AnalyseHeaderVO vo, String pk_invmandoc,
      boolean isintax) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "setVQTailPriceValuesMy",
        new Object[] { vo, pk_invmandoc, new UFBoolean(isintax) });
    /** ********************************************************** */

    StringBuffer sql = new StringBuffer(" SELECT ");
    if (isintax) {
      sql
          .append(" (cast(SUM(nintaxprice * nordernum) as decimal(20,8)) / cast((CASE WHEN SUM(nordernum) = 0 THEN 1 ELSE SUM(nordernum) END) as decimal(20,8))) AS pavg, ");
      sql.append(" MAX(nintaxprice) AS pmax, ");
      sql.append(" MIN(nintaxprice) AS pmin ");
    } else {
      sql
          .append(" (cast(SUM(nnotaxprice * nordernum) as decimal(20,8)) / cast((CASE WHEN SUM(nordernum) = 0 THEN 1 ELSE SUM(nordernum) END) as decimal(20,8))) AS pavg, ");
      sql.append(" MAX(nnotaxprice) AS pmax, ");
      sql.append(" MIN(nnotaxprice) AS pmin ");
    }
    sql.append(" FROM po_askbill_b ");
    sql.append(" WHERE (po_askbill_b.cmangid = ? ) ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());

      stmt.setString(1, pk_invmandoc);

      rs = stmt.executeQuery();
      if (rs.next()) {
        Object avgprice = rs.getObject("pavg");
        vo.setPavg((avgprice == null || ""
            .equals(avgprice.toString().trim())) ? null : new UFDouble(avgprice.toString()
            .trim()));

        Object maxprice = rs.getObject("pmax");
        vo.setPmax((maxprice == null || ""
            .equals(maxprice.toString().trim())) ? null : new UFDouble(maxprice.toString()
            .trim()));

        Object minprice = rs.getObject("pmin");
        vo.setPmin((minprice == null || ""
            .equals(minprice.toString().trim())) ? null : new UFDouble(minprice.toString()
            .trim()));
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "setVQTailPriceValuesMy",
        new Object[] { vo, pk_invmandoc, new UFBoolean(isintax) });
    /** ********************************************************** */

  }

  /**
   * @功能：把比价结果写入询价单
   * @作者：周晓 创建日期：(2001-6-18 19:47:15)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @param thanitems
   *            nc.vo.pp.ask.ThanresultItemVO[]
   */
  public void updateAskbillItemsByThanResultMy(ThanresultItemVO thanitem)
      throws SQLException {

    if (thanitem != null) {
      // 与前端 ThanUI.initFieldsEditbale() 相对应
      String sql = " update po_askbill_b set nordernum = ?, nordernotaxprice = ?, norderintaxprice = ?, nordernotaxmny = ?, ntaxmny = ?,  npricetaxmny = ? , bisorder = ?, vmemo = ? where caskbill_bid = ? ";

      Connection con = null;
      PreparedStatement stmt = null;

      try {
        con = getConnection();
        stmt = con.prepareStatement(sql);

        if (thanitem.getNordernum() == null) {
          stmt.setNull(1, Types.INTEGER);
        } else {
          stmt.setBigDecimal(1, thanitem.getNordernum()
              .toBigDecimal());
        }

        if (thanitem.getNordernotaxprice() == null) {
          stmt.setNull(2, Types.INTEGER);
        } else {
          stmt.setBigDecimal(2, thanitem.getNordernotaxprice()
              .toBigDecimal());
        }

        if (thanitem.getNorderintaxprice() == null) {
          stmt.setNull(3, Types.INTEGER);
        } else {
          stmt.setBigDecimal(3, thanitem.getNorderintaxprice()
              .toBigDecimal());
        }

        if (thanitem.getNordernotaxmny() == null) {
          stmt.setNull(4, Types.INTEGER);
        } else {
          stmt.setBigDecimal(4, thanitem.getNordernotaxmny()
              .toBigDecimal());
        }

        if (thanitem.getNtaxmny() == null) {
          stmt.setNull(5, Types.INTEGER);
        } else {
          stmt.setBigDecimal(5, thanitem.getNtaxmny().toBigDecimal());
        }

        if (thanitem.getNpricetaxmny() == null) {
          stmt.setNull(6, Types.INTEGER);
        } else {
          stmt.setBigDecimal(6, thanitem.getNpricetaxmny()
              .toBigDecimal());
        }

        if (thanitem.getBisorder() == null) {
          stmt.setNull(7, Types.INTEGER);
        } else {
          stmt.setInt(7, thanitem.getBisorder().intValue());
        }

        if (thanitem.getVmemo() == null
            || thanitem.getVmemo().trim().length() <= 0) {
          stmt.setString(8, "");
        } else {
          stmt.setString(8, thanitem.getVmemo().trim());
        }

        // 表体主键
        stmt.setString(9, thanitem.getCaskbill_bid());

        stmt.executeUpdate();

      } finally {
        try {
          if (stmt != null) {
            stmt.close();
          }
        } catch (Exception e) {
        }
        try {
          if (con != null) {
            con.close();
          }
        } catch (Exception e) {
        }
      }

    }

  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyByItems(AskbillItemVO[] vos)
      throws java.sql.SQLException {

    if (vos == null || vos.length <= 0)
      return;
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "deleBodyByItems",
        new Object[] { vos });
    /** ********************************************************** */

    String sql = "update po_askbill_b set dr = dr + 1 where caskbill_bid in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.length; i++) {
      if (vos[i].getPrimaryKey() == null)
        continue;
      listDisId.add(vos[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "deleBodyByItems",
        new Object[] { vos });
    /** ********************************************************** */
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyByItemsForPriceAudit(PriceauditBVO[] vos)
      throws java.sql.SQLException {

    if (vos == null || vos.length <= 0)
      return;
    String sql = "update po_priceaudit_b set dr = dr + 1 where cpriceaudit_bid in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.length; i++) {
      if (vos[i].getPrimaryKey() == null)
        continue;
      listDisId.add(vos[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByItems(AskbillItemBVO[] vos)
      throws java.sql.SQLException {

    if (vos == null || vos.length <= 0)
      return;
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbill_bb1id in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.length; i++) {
      if (vos[i].getPrimaryKey() == null)
        continue;
      listDisId.add(vos[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByItems(ArrayList bIDs,String key ) throws java.sql.SQLException {

    if (bIDs == null || bIDs.size() <= 0)
      return;
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbillid = '" + key + "' and caskbill_bb1id not in ";
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(bIDs,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByItemsForAll(String cakbillid)
      throws java.sql.SQLException {

    if (cakbillid == null)
      return;
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbillid = '"
        + cakbillid + "'";
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByItemsForPriceAudit(PriceauditBb1VO[] vos)
      throws java.sql.SQLException {

    if (vos == null || vos.length <= 0)
      return;
    String sql = "update po_priceaudit_bb1 set dr = dr + 1 where cpriceaudit_bb1id in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.length; i++) {
      if (vos[i].getPrimaryKey() == null)
        continue;
      listDisId.add(vos[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByBodyItemsForPriceAudit(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_priceaudit_bb1 set dr = dr + 1 where cpriceauditid = '"
        + key + "' and cpriceaudit_bid not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByBodyItemsForAskBill(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbillid = '"
        + key + "' and caskbill_bid not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByBodyItemsForPriceAuditLinesDel(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_priceaudit_bb1 set dr = dr + 1 where cpriceauditid = '"
        + key + "' and cpriceaudit_bb1id not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyBByBodyItemsForAskBillLinesDel(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbillid = '"
        + key + "' and caskbill_bb1id not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyByBodyItemsForPriceAudit(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_priceaudit_b set dr = dr + 1 where cpriceauditid = '"
        + key + "' and cpriceaudit_bid not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyByBodyItemsForAskBill(String key, Vector vos)
      throws java.sql.SQLException {

    if (vos == null || vos.size() <= 0)
      return;
    String sql = "update po_askbill_b set dr = dr + 1 where caskbillid = '"
        + key + "' and caskbill_bid not in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.size(); i++) {
      if (vos.get(i) == null)
        continue;
      listDisId.add(vos.get(i));
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyVendorByItems(AskbillItemVendorVO[] vos)
      throws java.sql.SQLException {

    if (vos == null || vos.length <= 0)
      return;
    String sql = "update po_askbill_b1 set dr = dr + 1 where caskbill_b1id in ";
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < vos.length; i++) {
      if (vos[i].getPrimaryKey() == null)
        continue;
      listDisId.add(vos[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyVendorByItems(ArrayList vendorIDs,String key )
      throws java.sql.SQLException {

    if (vendorIDs == null || vendorIDs.size() <= 0)
      return;
    String sql = "update po_askbill_b1 set dr = dr + 1 where  caskbillid = '" + key +"' and caskbill_b1id not in ";

    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(vendorIDs,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 批删除子表数据 (dr++) czp 2004-02-11 效率优化
   */
  public void deleBodyVendorByItemsForAll(String caksbillid)
      throws java.sql.SQLException {

    if (caksbillid == null)
      return;
    String sql = "update po_askbill_b1 set dr = dr + 1 where caskbillid = '"
        + caksbillid + "'";
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      //
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 根据主键在数据库中删除主子表数据（dr++）
   * 
   * czp 2003-06-27 效率优化
   */
  public void deleHeadBodyByHIds(String[] saHId) throws java.sql.SQLException {

    if (saHId == null || saHId.length <= 0)
      return;
    ArrayList listDisId = new ArrayList();
    int iLen = saHId.length;
    for (int i = 0; i < iLen; i++) {
      if (saHId[i] == null)
        continue;
      listDisId.add(saHId[i]);
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU96,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    String sqlh = "update po_askbill  set dr = dr + 1 where caskbillid in "
        + strIdSet;
    String sqlb = "update po_askbill_b  set dr = dr + 1 where caskbillid in "
        + strIdSet;
    String sqlb1 = "update po_askbill_b1  set dr = dr + 1 where caskbillid in "
        + strIdSet;
    String sqlbb1 = "update po_askbill_bb1  set dr = dr + 1 where caskbillid in "
        + strIdSet;

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      // 子子表
      stmt = con.prepareStatement(sqlbb1);
      stmt.executeUpdate();
      stmt.close();
      // 子表
      stmt = con.prepareStatement(sqlb);
      stmt.executeUpdate();
      stmt.close();
      // 供应商子表
      stmt = con.prepareStatement(sqlb1);
      stmt.executeUpdate();
      stmt.close();
      // 主表
      stmt = con.prepareStatement(sqlh);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 根据主键在数据库中删除主子表数据（dr++）
   * 
   * czp 2003-06-27 效率优化
   */
  public void deleHeadBodyByHIdsForPriceAudit(String[] saHId)
      throws java.sql.SQLException {

    if (saHId == null || saHId.length <= 0)
      return;
    ArrayList listDisId = new ArrayList();
    int iLen = saHId.length;
    for (int i = 0; i < iLen; i++) {
      if (saHId[i] == null)
        continue;
      listDisId.add(saHId[i]);
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU96,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    String sqlh = "update po_priceaudit  set dr = dr + 1 where cpriceauditid in "
        + strIdSet;
    String sqlb = "update po_priceaudit_b  set dr = dr + 1 where cpriceauditid in "
        + strIdSet;
    String sqlb1 = "update po_priceaudit_bb1  set dr = dr + 1 where cpriceauditid in "
        + strIdSet;

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      // 子子表
      stmt = con.prepareStatement(sqlb1);
      stmt.executeUpdate();
      stmt.close();
      // 子表
      stmt = con.prepareStatement(sqlb);
      stmt.executeUpdate();
      stmt.close();
      // 主表
      stmt = con.prepareStatement(sqlh);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 根据主键在数据库中删除一个VO对象(逻辑删除)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param key
   *            nc.vo.pub.oid.OID
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void deleteItemMy(AskbillItemVO_Old vo) throws java.sql.SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "deleteItemMy",
        new Object[] { vo });
    /** ********************************************************** */

    String sql = "update po_askbill_b set dr = dr + 1 where caskbill_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, vo.getPrimaryKey());
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "deleteItemMy",
        new Object[] { vo });
    /** ********************************************************** */
  }

  /**
   * 根据主键在数据库中删除一个VO对象(逻辑删除)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param key
   *            nc.vo.pub.oid.OID
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void deleteItemMyForPriceAudit(PriceauditBVO vo)
      throws java.sql.SQLException {
    String sql = "update po_priceaudit_b set dr = dr + 1 where cpriceaudit_bid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, vo.getPrimaryKey());
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

  }

  /**
   * 根据主键在数据库中删除一个VO对象(逻辑删除)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param key
   *            nc.vo.pub.oid.OID
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void deleteItemBMy(AskbillItemBVO vo) throws java.sql.SQLException {
    String sql = "update po_askbill_bb1 set dr = dr + 1 where caskbill_bb1id = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, vo.getPrimaryKey());
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillHeaderVO
   * @param unitCode
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillHeaderVO[] findAllHeadersByCondSQLMy(String strSQL)
      throws SQLException {

    String sql = "select DISTINCT po_askbill.pk_corp, ltrim(rtrim(po_askbill.vaskbillcode)), po_askbill.cdeptid, po_askbill.cemployeeid, po_askbill.ccurrencytypeid, po_askbill.dclosedate, po_askbill.caskpsn, po_askbill.daskdate, po_askbill.cquotepsn, po_askbill.dquotedate, po_askbill.ctermprotocolid, po_askbill.caccountyear, po_askbill.ibillstatus, po_askbill.vdef1, po_askbill.vdef2, po_askbill.vdef3, po_askbill.vdef4, po_askbill.vdef5, po_askbill.vdef6, po_askbill.vdef7, po_askbill.vdef8, po_askbill.vdef9, po_askbill.vdef10, po_askbill.caskbillid, po_askbill.pk_purorg,po_askbill.ts ,po_askbill.vdef11, po_askbill.vdef12, po_askbill.vdef13, po_askbill.vdef14, po_askbill.vdef15, po_askbill.vdef16, po_askbill.vdef17, po_askbill.vdef18, po_askbill.vdef19, po_askbill.vdef20,po_askbill.pk_defdoc1,po_askbill.pk_defdoc2,po_askbill.pk_defdoc3,po_askbill.pk_defdoc4,po_askbill.pk_defdoc5,po_askbill.pk_defdoc6,po_askbill.pk_defdoc7,po_askbill.pk_defdoc8,po_askbill.pk_defdoc9,po_askbill.pk_defdoc10,po_askbill.pk_defdoc11,po_askbill.pk_defdoc12,po_askbill.pk_defdoc13,po_askbill.pk_defdoc14,po_askbill.pk_defdoc15,po_askbill.pk_defdoc16,po_askbill.pk_defdoc17,po_askbill.pk_defdoc18,po_askbill.pk_defdoc19,po_askbill.pk_defdoc20,po_askbill.vmemo,po_askbill.bpurchase,po_askbill.tmaketime,po_askbill.tlastmaketime ";
    sql += strSQL;

    AskbillHeaderVO[] askbillHeaders = null;
    AskbillHeaderVO askbillHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector();
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {

        askbillHeader = new AskbillHeaderVO();
        // pk_corp :
        String pk_corp = rs.getString(1);
        askbillHeader.setPk_corp(pk_corp == null ? null : pk_corp
            .trim());
        // vaskbillcode :
        String vaskbillcode = rs.getString(2);
        askbillHeader.setVaskbillcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        // cdeptid :
        String cdeptid = rs.getString(3);
        askbillHeader.setCdeptid(cdeptid == null ? null : cdeptid
            .trim());
        // cemployeeid :
        String cemployeeid = rs.getString(4);
        askbillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // ccurrencytypeid :
        String ccurrencytypeid = rs.getString(5);
        askbillHeader.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        // dclosedate :
        String dclosedate = rs.getString(6);
        askbillHeader.setDclosedate(dclosedate == null ? null
            : new UFDate(dclosedate.trim(), false));
        // caskpsn :
        String caskpsn = rs.getString(7);
        askbillHeader.setCaskpsn(caskpsn == null ? null : caskpsn
            .trim());
        // daskdate :
        String daskdate = rs.getString(8);
        askbillHeader.setDaskdate(daskdate == null ? null : new UFDate(
            daskdate.trim(), false));
        // cquotepsn :
        String cquotepsn = rs.getString(9);
        askbillHeader.setCquotepsn(cquotepsn == null ? null : cquotepsn
            .trim());
        // dquotedate :
        String dquotedate = rs.getString(10);
        askbillHeader.setDquotedate(dquotedate == null ? null
            : new UFDate(dquotedate.trim(), false));
        // ctermprotocolid :
        String ctermprotocolid = rs.getString(11);
        askbillHeader.setCtermprotocolid(ctermprotocolid == null ? null
            : ctermprotocolid.trim());
        // caccountyear :
        String caccountyear = rs.getString(12);
        askbillHeader.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(13);
        askbillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus.toString());
        // vdef1 :
        String vdef1 = rs.getString(14);
        askbillHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(15);
        askbillHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(16);
        askbillHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(17);
        askbillHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(18);
        askbillHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(19);
        askbillHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vdef7 :
        String vdef7 = rs.getString(20);
        askbillHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
        // vdef8 :
        String vdef8 = rs.getString(21);
        askbillHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
        // vdef9 :
        String vdef9 = rs.getString(22);
        askbillHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
        // vdef10 :
        String vdef10 = rs.getString(23);
        askbillHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
        // 主键
        String key = rs.getString(24);
        askbillHeader.setPrimaryKey(key);
        // pk_purorg :
        String pk_purorg = rs.getString(25);
        askbillHeader.setPk_purorg(pk_purorg == null ? null : pk_purorg
            .trim());
        // ts
        String ts = rs.getString(26);
        askbillHeader.setTs(ts == null ? null : ts.trim());
        // // vdef11 :
        String vdef11 = rs.getString(27);
        askbillHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(28);
        askbillHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(29);
        askbillHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(30);
        askbillHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(31);
        askbillHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(32);
        askbillHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(33);
        askbillHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(34);
        askbillHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(35);
        askbillHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(36);
        askbillHeader.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(37);
        askbillHeader.setPk_defdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(38);
        askbillHeader.setPk_defdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(39);
        askbillHeader.setPk_defdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(40);
        askbillHeader.setPk_defdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(41);
        askbillHeader.setPk_defdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(42);
        askbillHeader.setPk_defdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(43);
        askbillHeader.setPk_defdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(44);
        askbillHeader.setPk_defdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(45);
        askbillHeader.setPk_defdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(46);
        askbillHeader.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(47);
        askbillHeader.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(48);
        askbillHeader.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(49);
        askbillHeader.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(50);
        askbillHeader.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(51);
        askbillHeader.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(52);
        askbillHeader.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(53);
        askbillHeader.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(54);
        askbillHeader.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(55);
        askbillHeader.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(56);
        askbillHeader.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        // // pk_defdoc20 :
        String vmemo = rs.getString(57);
        askbillHeader.setVmemo(vmemo == null ? null : vmemo.trim());
        // // pk_defdoc20 :
        String bpurchase = rs.getString(58);
        askbillHeader.setBpurchase(bpurchase == null ? null
            : new UFBoolean(bpurchase.trim()));
        // // tlastmaketime :
        String tmaketime = rs.getString(59);
        askbillHeader.setTmaketime(tmaketime == null ? null : tmaketime
            .trim());
        // // tlastmaketime :
        String tlastmaketime = rs.getString(60);
        askbillHeader.setTlastmaketime(tlastmaketime == null ? null
            : tlastmaketime.trim());

        //
        v.addElement(askbillHeader);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      askbillHeaders = new AskbillHeaderVO[v.size()];
      v.copyInto(askbillHeaders);
    }
    return askbillHeaders;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillHeaderVO
   * @param unitCode
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillHeaderVO[] findAllHeadersByCondSQLMyForAskToPrice(
      String strSQL) throws SQLException {

    // 已经生成价格审批单的请购单,可以生成询报价单,但是不能由询报价单再次生成价格审批单
    StringBuffer addedCondition = new StringBuffer();
    addedCondition
        .append(" and po_askbill_b.cupsourcebillrowid in( select cpraybill_bid ");
    addedCondition
        .append(" from po_praybill_b inner join po_praybill on po_praybill_b.cpraybillid = po_praybill.cpraybillid ");
    addedCondition
        .append(" where (po_praybill_b.npriceauditbill is null or po_praybill_b.npriceauditbill = 0) ");
    addedCondition
        .append(" and po_praybill_b.dr = 0 and po_praybill.dr = 0 and po_praybill.ibillstatus = 3) ");

    String sql = "(select DISTINCT po_askbill.pk_corp, ltrim(rtrim(po_askbill.vaskbillcode)), po_askbill.cdeptid, po_askbill.cemployeeid, po_askbill.ccurrencytypeid, po_askbill.dclosedate, po_askbill.caskpsn, po_askbill.daskdate, po_askbill.cquotepsn, po_askbill.dquotedate, po_askbill.ctermprotocolid, po_askbill.caccountyear, po_askbill.ibillstatus, po_askbill.vdef1, po_askbill.vdef2, po_askbill.vdef3, po_askbill.vdef4, po_askbill.vdef5, po_askbill.vdef6, po_askbill.vdef7, po_askbill.vdef8, po_askbill.vdef9, po_askbill.vdef10, po_askbill.caskbillid, po_askbill.pk_purorg,po_askbill.ts ,po_askbill.vdef11, po_askbill.vdef12, po_askbill.vdef13, po_askbill.vdef14, po_askbill.vdef15, po_askbill.vdef16, po_askbill.vdef17, po_askbill.vdef18, po_askbill.vdef19, po_askbill.vdef20,po_askbill.pk_defdoc1,po_askbill.pk_defdoc2,po_askbill.pk_defdoc3,po_askbill.pk_defdoc4,po_askbill.pk_defdoc5,po_askbill.pk_defdoc6,po_askbill.pk_defdoc7,po_askbill.pk_defdoc8,po_askbill.pk_defdoc9,po_askbill.pk_defdoc10,po_askbill.pk_defdoc11,po_askbill.pk_defdoc12,po_askbill.pk_defdoc13,po_askbill.pk_defdoc14,po_askbill.pk_defdoc15,po_askbill.pk_defdoc16,po_askbill.pk_defdoc17,po_askbill.pk_defdoc18,po_askbill.pk_defdoc19,po_askbill.pk_defdoc20,po_askbill.vmemo,po_askbill.bpurchase,po_askbill.tmaketime,po_askbill.tlastmaketime ";
    sql += strSQL + " and po_askbill_b.cupsourcebilltype is null ";
    sql += ") union all ";
    sql += "(select DISTINCT po_askbill.pk_corp, ltrim(rtrim(po_askbill.vaskbillcode)), po_askbill.cdeptid, po_askbill.cemployeeid, po_askbill.ccurrencytypeid, po_askbill.dclosedate, po_askbill.caskpsn, po_askbill.daskdate, po_askbill.cquotepsn, po_askbill.dquotedate, po_askbill.ctermprotocolid, po_askbill.caccountyear, po_askbill.ibillstatus, po_askbill.vdef1, po_askbill.vdef2, po_askbill.vdef3, po_askbill.vdef4, po_askbill.vdef5, po_askbill.vdef6, po_askbill.vdef7, po_askbill.vdef8, po_askbill.vdef9, po_askbill.vdef10, po_askbill.caskbillid, po_askbill.pk_purorg,po_askbill.ts ,po_askbill.vdef11, po_askbill.vdef12, po_askbill.vdef13, po_askbill.vdef14, po_askbill.vdef15, po_askbill.vdef16, po_askbill.vdef17, po_askbill.vdef18, po_askbill.vdef19, po_askbill.vdef20,po_askbill.pk_defdoc1,po_askbill.pk_defdoc2,po_askbill.pk_defdoc3,po_askbill.pk_defdoc4,po_askbill.pk_defdoc5,po_askbill.pk_defdoc6,po_askbill.pk_defdoc7,po_askbill.pk_defdoc8,po_askbill.pk_defdoc9,po_askbill.pk_defdoc10,po_askbill.pk_defdoc11,po_askbill.pk_defdoc12,po_askbill.pk_defdoc13,po_askbill.pk_defdoc14,po_askbill.pk_defdoc15,po_askbill.pk_defdoc16,po_askbill.pk_defdoc17,po_askbill.pk_defdoc18,po_askbill.pk_defdoc19,po_askbill.pk_defdoc20,po_askbill.vmemo,po_askbill.bpurchase,po_askbill.tmaketime,po_askbill.tlastmaketime ";
    sql += strSQL + "  and po_askbill_b.cupsourcebilltype = '20'  "
        + addedCondition.toString() + ") ";

    AskbillHeaderVO[] askbillHeaders = null;
    AskbillHeaderVO askbillHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector();
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {

        askbillHeader = new AskbillHeaderVO();
        // pk_corp :
        String pk_corp = rs.getString(1);
        askbillHeader.setPk_corp(pk_corp == null ? null : pk_corp
            .trim());
        // vaskbillcode :
        String vaskbillcode = rs.getString(2);
        askbillHeader.setVaskbillcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        // cdeptid :
        String cdeptid = rs.getString(3);
        askbillHeader.setCdeptid(cdeptid == null ? null : cdeptid
            .trim());
        // cemployeeid :
        String cemployeeid = rs.getString(4);
        askbillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // ccurrencytypeid :
        String ccurrencytypeid = rs.getString(5);
        askbillHeader.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        // dclosedate :
        String dclosedate = rs.getString(6);
        askbillHeader.setDclosedate(dclosedate == null ? null
            : new UFDate(dclosedate.trim(), false));
        // caskpsn :
        String caskpsn = rs.getString(7);
        askbillHeader.setCaskpsn(caskpsn == null ? null : caskpsn
            .trim());
        // daskdate :
        String daskdate = rs.getString(8);
        askbillHeader.setDaskdate(daskdate == null ? null : new UFDate(
            daskdate.trim(), false));
        // cquotepsn :
        String cquotepsn = rs.getString(9);
        askbillHeader.setCquotepsn(cquotepsn == null ? null : cquotepsn
            .trim());
        // dquotedate :
        String dquotedate = rs.getString(10);
        askbillHeader.setDquotedate(dquotedate == null ? null
            : new UFDate(dquotedate.trim(), false));
        // ctermprotocolid :
        String ctermprotocolid = rs.getString(11);
        askbillHeader.setCtermprotocolid(ctermprotocolid == null ? null
            : ctermprotocolid.trim());
        // caccountyear :
        String caccountyear = rs.getString(12);
        askbillHeader.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(13);
        askbillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus.toString());
        // vdef1 :
        String vdef1 = rs.getString(14);
        askbillHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(15);
        askbillHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(16);
        askbillHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(17);
        askbillHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(18);
        askbillHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(19);
        askbillHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vdef7 :
        String vdef7 = rs.getString(20);
        askbillHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
        // vdef8 :
        String vdef8 = rs.getString(21);
        askbillHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
        // vdef9 :
        String vdef9 = rs.getString(22);
        askbillHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
        // vdef10 :
        String vdef10 = rs.getString(23);
        askbillHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
        // 主键
        String key = rs.getString(24);
        askbillHeader.setPrimaryKey(key);
        // pk_purorg :
        String pk_purorg = rs.getString(25);
        askbillHeader.setPk_purorg(pk_purorg == null ? null : pk_purorg
            .trim());
        // ts
        String ts = rs.getString(26);
        askbillHeader.setTs(ts == null ? null : ts.trim());
        // // vdef11 :
        String vdef11 = rs.getString(27);
        askbillHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(28);
        askbillHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(29);
        askbillHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(30);
        askbillHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(31);
        askbillHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(32);
        askbillHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(33);
        askbillHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(34);
        askbillHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(35);
        askbillHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(36);
        askbillHeader.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(37);
        askbillHeader.setPk_defdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(38);
        askbillHeader.setPk_defdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(39);
        askbillHeader.setPk_defdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(40);
        askbillHeader.setPk_defdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(41);
        askbillHeader.setPk_defdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(42);
        askbillHeader.setPk_defdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(43);
        askbillHeader.setPk_defdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(44);
        askbillHeader.setPk_defdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(45);
        askbillHeader.setPk_defdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(46);
        askbillHeader.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(47);
        askbillHeader.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(48);
        askbillHeader.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(49);
        askbillHeader.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(50);
        askbillHeader.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(51);
        askbillHeader.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(52);
        askbillHeader.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(53);
        askbillHeader.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(54);
        askbillHeader.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(55);
        askbillHeader.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(56);
        askbillHeader.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        // // pk_defdoc20 :
        String vmemo = rs.getString(57);
        askbillHeader.setVmemo(vmemo == null ? null : vmemo.trim());
        // // pk_defdoc20 :
        String bpurchase = rs.getString(58);
        askbillHeader.setBpurchase(bpurchase == null ? null
            : new UFBoolean(bpurchase.trim()));
//         // pk_defdoc20 :
        String tmaketime = rs.getString(59);
        askbillHeader.setTmaketime(tmaketime == null ? null
            : tmaketime.trim());
//         // pk_defdoc20 :
        String tlastmaketime = rs.getString(60);
        askbillHeader.setTlastmaketime(tlastmaketime == null ? null
            : tlastmaketime.trim());
        //
        v.addElement(askbillHeader);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      askbillHeaders = new AskbillHeaderVO[v.size()];
      v.copyInto(askbillHeaders);
    }
    return askbillHeaders;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillHeaderVO
   * @param unitCode
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditHeaderVO[] findAllHeadersByCondSQLForPriceAudit(
      String strSQL) throws SQLException {

    String sql = "select DISTINCT po_priceaudit.pk_corp, ltrim(rtrim(po_priceaudit.vpriceauditcode)), po_priceaudit.cdeptid, po_priceaudit.cemployeeid, po_priceaudit.ccurrencytypeid, po_priceaudit.vmemo, po_priceaudit.coperatorid, po_priceaudit.dbilldate, po_priceaudit.cauditpsnid, po_priceaudit.dauditdate, po_priceaudit.ctermprotocolid,  po_priceaudit.ibillstatus, po_priceaudit.vdef1, po_priceaudit.vdef2, po_priceaudit.vdef3, po_priceaudit.vdef4, po_priceaudit.vdef5, po_priceaudit.vdef6, po_priceaudit.vdef7, po_priceaudit.vdef8, po_priceaudit.vdef9, po_priceaudit.vdef10, po_priceaudit.cpriceauditid, po_priceaudit.pk_purorg,po_priceaudit.ts ,po_priceaudit.vdef11, po_priceaudit.vdef12, po_priceaudit.vdef13, po_priceaudit.vdef14, po_priceaudit.vdef15, po_priceaudit.vdef16, po_priceaudit.vdef17, po_priceaudit.vdef18, po_priceaudit.vdef19, po_priceaudit.vdef20,po_priceaudit.pk_defdoc1,po_priceaudit.pk_defdoc2,po_priceaudit.pk_defdoc3,po_priceaudit.pk_defdoc4,po_priceaudit.pk_defdoc5,po_priceaudit.pk_defdoc6,po_priceaudit.pk_defdoc7,po_priceaudit.pk_defdoc8,po_priceaudit.pk_defdoc9,po_priceaudit.pk_defdoc10,po_priceaudit.pk_defdoc11,po_priceaudit.pk_defdoc12,po_priceaudit.pk_defdoc13,po_priceaudit.pk_defdoc14,po_priceaudit.pk_defdoc15,po_priceaudit.pk_defdoc16,po_priceaudit.pk_defdoc17,po_priceaudit.pk_defdoc18,po_priceaudit.pk_defdoc19,po_priceaudit.pk_defdoc20,po_priceaudit.dr,po_priceaudit.bpurchase,po_priceaudit.tmaketime,po_priceaudit.tlastmaketime,po_priceaudit.taudittime ";
    // sql += "FROM po_priceaudit LEFT OUTER JOIN po_priceaudit_bb1 ON
    // po_priceaudit.cpriceauditid = po_priceaudit_bb1.cpriceauditid where
    // ";
    sql += strSQL;

    PriceauditHeaderVO[] askbillHeaders = null;
    PriceauditHeaderVO askbillHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    Vector v = new Vector();
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {

        askbillHeader = new PriceauditHeaderVO();
        // pk_corp :
        String pk_corp = rs.getString(1);
        askbillHeader.setPk_corp(pk_corp == null ? null : pk_corp
            .trim());
        // vaskbillcode :
        String vpriceauditcode = rs.getString(2);
        askbillHeader.setVpriceauditcode(vpriceauditcode == null ? null
            : vpriceauditcode.trim());
        // cdeptid :
        String cdeptid = rs.getString(3);
        askbillHeader.setCdeptid(cdeptid == null ? null : cdeptid
            .trim());
        // cemployeeid :
        String cemployeeid = rs.getString(4);
        askbillHeader.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        // ccurrencytypeid :
        String ccurrencytypeid = rs.getString(5);
        askbillHeader.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        // vmemo :
        String vmemo = rs.getString(6);
        askbillHeader.setVmemo(vmemo == null ? null : vmemo.trim());
        // coperatorid :
        String coperatorid = rs.getString(7);
        askbillHeader.setCoperatorid(coperatorid == null ? null
            : coperatorid.trim());
        // dbilldate :
        String dbilldate = rs.getString(8);
        askbillHeader.setDbilldate(dbilldate == null ? null
            : new UFDate(dbilldate.trim(), false));
        // auditpsnid :
        String cauditpsnid = rs.getString(9);
        askbillHeader.setCauditpsnid(cauditpsnid == null ? null
            : cauditpsnid.trim());
        // dquotedate :
        String dauditdate = rs.getString(10);
        askbillHeader.setDauditdate(dauditdate == null ? null
            : new UFDate(dauditdate.trim(), false));
        // ctermprotocolid :
        String ctermprotocolid = rs.getString(11);
        askbillHeader.setCtermprotocolid(ctermprotocolid == null ? null
            : ctermprotocolid.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(12);
        askbillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // vdef1 :
        String vdef1 = rs.getString(13);
        askbillHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(14);
        askbillHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(15);
        askbillHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(16);
        askbillHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(17);
        askbillHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(18);
        askbillHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vdef7 :
        String vdef7 = rs.getString(19);
        askbillHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
        // vdef8 :
        String vdef8 = rs.getString(20);
        askbillHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
        // vdef9 :
        String vdef9 = rs.getString(21);
        askbillHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
        // vdef10 :
        String vdef10 = rs.getString(22);
        askbillHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
        // 主键
        String key = rs.getString(23);
        askbillHeader.setPrimaryKey(key);
        // pk_purorg :
        String pk_purorg = rs.getString(24);
        askbillHeader.setPk_purorg(pk_purorg == null ? null : pk_purorg
            .trim());
        // ts
        String ts = rs.getString(25);
        askbillHeader.setTs(ts == null ? null : ts.trim());
        // // vdef11 :
        String vdef11 = rs.getString(26);
        askbillHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(27);
        askbillHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(28);
        askbillHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(29);
        askbillHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(30);
        askbillHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(31);
        askbillHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(32);
        askbillHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(33);
        askbillHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(34);
        askbillHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(35);
        askbillHeader.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(36);
        askbillHeader.setPk_defdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(37);
        askbillHeader.setPk_defdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(38);
        askbillHeader.setPk_defdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(39);
        askbillHeader.setPk_defdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(40);
        askbillHeader.setPk_defdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(41);
        askbillHeader.setPk_defdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(42);
        askbillHeader.setPk_defdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(43);
        askbillHeader.setPk_defdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(44);
        askbillHeader.setPk_defdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(45);
        askbillHeader.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(46);
        askbillHeader.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(47);
        askbillHeader.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(48);
        askbillHeader.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(49);
        askbillHeader.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(50);
        askbillHeader.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(51);
        askbillHeader.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(52);
        askbillHeader.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(53);
        askbillHeader.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(54);
        askbillHeader.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(55);
        askbillHeader.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        // // pk_defdoc20 :
        String dr = rs.getString(56);
        askbillHeader.setDr(dr == null ? null : new Integer(dr.trim()));
        // // pk_defdoc20 :
        String bpurchase = rs.getString(57);
        askbillHeader.setBpurchase(bpurchase == null ? null
            : new UFBoolean(bpurchase.trim()));
        // // tlastmaketime :
        String tmaketime = rs.getString(58);
        askbillHeader.setTmaketime(tmaketime == null ? null : tmaketime
            .trim());
        // // tlastmaketime :
        String tlastmaketime = rs.getString(59);
        askbillHeader.setTlastmaketime(tlastmaketime == null ? null
            : tlastmaketime.trim());
        // // taudittime :
        String taudittime = rs.getString(60);
        askbillHeader.setTaudittime(taudittime == null ? null
            : taudittime.trim());

        v.addElement(askbillHeader);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      askbillHeaders = new PriceauditHeaderVO[v.size()];
      v.copyInto(askbillHeaders);
    }
    return askbillHeaders;
  }

  /**
   * 询价单汇总统计查询 说明：默认(由UI端来保证)的分组方式 1.币种(ccurrencytypeid) 2.存货(cmangid)
   * 3.报价取最大、小、平均值 4.订价=sum(订货金额)/sum(订货数量) 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param strSQL
   *            String
   * @param strGroup
   *            String
   * @exception java.sql.SQLException
   *                异常说明。 #关联的基础数据表 bd_cubasdoc, bd_cumandoc, bd_invbasdoc,
   *                bd_invmandoc, bd_taxitems, bd_payterm, bd_deptdoc,
   *                bd_psndoc, bd_measdoc, bd_currtype, sm_user as sm_user1,
   *                询价人 sm_user as sm_user2 报价人
   */
  public AskbillItemMergeVO[] findAskItemsForStatisVOMy(String strSQL,
      String[] strGroup, String priceType) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findAskItemsForStatisVOMy", new Object[] { strSQL, strGroup,
            priceType });
    /** ********************************************************** */
    if (strGroup == null)
      return null;
    if (strGroup.length <= 0)
      return null;
    Vector vgrpcols = new Vector();
    for (int i = 0; i < strGroup.length; i++) {
      // 加入分组项目
      vgrpcols.addElement(strGroup[i]);
      // 加入分组项目相关属性
      if ("cmangid".equals(strGroup[i])) {
        vgrpcols.addElement("invcode");
        vgrpcols.addElement("invname");
        vgrpcols.addElement("invspec");
        vgrpcols.addElement("invtype");
        vgrpcols.addElement("measname");
        vgrpcols.addElement("po_askbill_bb1.ntaxrate");
      } else if ("ccurrencytypeid".equals(strGroup[i])) {
        vgrpcols.addElement("currtypename");
      } else if ("cvendormangid".equals(strGroup[i])) {
        vgrpcols.addElement("custshortname");
      } else if ("cdeptid".equals(strGroup[i])) {
        vgrpcols.addElement("deptname");
      } else if ("cemployeeid".equals(strGroup[i])) {
        vgrpcols.addElement("psnname");
      }
    }
    StringBuffer sql = new StringBuffer(" ");
    // select 串
    sql.append("select ");
    // 统计项目
    sql.append("sum(coalesce(po_askbill_b.nasknum,0)), ");
    sql.append(priceType + "(coalesce(po_askbill_bb1.nquoteprice,0)), ");
    sql.append(priceType + "(coalesce(po_askbill_bb1.nquotetaxprice,0)), ");

    //sql.append("sum(coalesce(nordernum,0)), ");
    // sql.append( priceType +"(coalesce(nordernotaxprice,0)), ");
    // sql.append( priceType +"(coalesce(norderintaxprice,0)), ");
//    sql.append("case sum(coalesce(nordernum,0)) ");
//    sql.append("     when 0 then 0 ");
//    sql
//        .append("     else cast(sum(coalesce(nordernotaxmny,0)) as decimal(20,8)) / cast(sum(coalesce(nordernum,0)) as decimal(20,8)) ");
//    sql.append("end ");
//    sql.append("nordernotaxprice, ");
//    sql.append("case sum(coalesce(nordernum,0)) ");
//    sql.append("     when 0 then 0 ");
//    sql
//        .append("     else cast(sum(coalesce(npricetaxmny,0)) as decimal(20,8)) / cast(sum(coalesce(nordernum,0)) as decimal(20,8)) ");
//    sql.append("end ");
//    sql.append("norderintaxprice, ");
//    sql.append("sum(coalesce(nordernotaxmny,0)), ");
//    sql.append("sum(coalesce(ntaxmny,0)), ");
//    sql.append("sum(coalesce(npricetaxmny,0)), ");

    // 分组项目及相关属性
    for (int i = 0; i < vgrpcols.size(); i++) {
      if (i != 0)
        sql.append(",");
      sql.append((String) vgrpcols.elementAt(i));
    }
    sql.append(" ");

    // from ... where ... 串
    // sql.append( strSQL + " or (1=1)");
    sql.append(strSQL + " ");
    // sql.append( " 1=1 ");

    // group by 串
    sql.append("group by ");

    for (int i = 0; i < vgrpcols.size(); i++) {
      if (i != 0)
        sql.append(",");
      sql.append((String) vgrpcols.elementAt(i));
    }
    SCMEnv.out(sql);
    // 查询
    String strName = null;
    String strValue = null;
    UFDouble ufdValue = null;
    AskbillItemMergeVO[] askbillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();

      // 不必翻译
      // ((nc.bs.mw.sql.UFConnection)con).enableSQLTranslator(false);
      //

      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070202")); 
      while (rs.next()) {
        AskbillItemMergeVO askbillItem = new AskbillItemMergeVO();
        // 统计项目
        BigDecimal nasknum = rs.getBigDecimal(1);
        askbillItem.setNasknum(nasknum == null ? null : new UFDouble(
            nasknum));
        BigDecimal nnotaxprice = rs.getBigDecimal(2);
        askbillItem.setNquoteprice(nnotaxprice == null ? null
            : new UFDouble(nnotaxprice));
        BigDecimal nintaxprice = rs.getBigDecimal(3);
        askbillItem.setNquotetaxprice(nintaxprice == null ? null
            : new UFDouble(nintaxprice));
//        BigDecimal nordernum = rs.getBigDecimal(4);
//        askbillItem.setNordernum(nordernum == null ? null
//            : new UFDouble(nordernum));
//        BigDecimal nordernotaxprice = rs.getBigDecimal(5);
//        askbillItem.setNordernotaxprice(nordernotaxprice == null ? null
//            : new UFDouble(nordernotaxprice));
//        BigDecimal norderintaxprice = rs.getBigDecimal(6);
//        askbillItem.setNorderintaxprice(norderintaxprice == null ? null
//            : new UFDouble(norderintaxprice));
//        BigDecimal nordernotaxmny = rs.getBigDecimal(7);
//        askbillItem.setNordernotaxmny(nordernotaxmny == null ? null
//            : new UFDouble(nordernotaxmny));
//        BigDecimal ntaxmny = rs.getBigDecimal(8);
//        askbillItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(
//            ntaxmny));
//        BigDecimal npricetaxmny = rs.getBigDecimal(9);
//        askbillItem.setNpricetaxmny(npricetaxmny == null ? null
//            : new UFDouble(npricetaxmny));
        // 分组项目及相关属性
        for (int i = 0; i < vgrpcols.size(); i++) {
          strName = (String) vgrpcols.elementAt(i);
          if ("po_askbill_bb1.ntaxrate".equals(strName)) {
            BigDecimal bufdValue = rs.getBigDecimal("ntaxrate");
            ufdValue = bufdValue == null ? null : new UFDouble(
                bufdValue);
            askbillItem.setNtaxrate(ufdValue);
          } else {
            strValue = rs.getString(strName);
            if ("measname".equals(strName)) {
              strName = "cmainmeasname";
            } else if ("currtypename".equals(strName)) {
              strName = "currname";
            } else if ("ccurrencytypeid".equals(strName)) {
              strName = "ccurrencytypeid";
            } else if ("deptname".equals(strName)) {
              strName = "cdeptidname";
            } else if ("psnname".equals(strName)) {
              strName = "cemployeeidname";
            } else if ("invcode".equals(strName)) {
              strName = "cinventorycode";
            } else if ("invname".equals(strName)) {
              strName = "cinventoryname";
            } else if ("invspec".equals(strName)) {
              strName = "cinventoryspec";
            } else if ("invtype".equals(strName)) {
              strName = "cinventorytype";
            } else if ("cmangid".equals(strName)) {
              strName = "cmangid";
            }

            askbillItem.setAttributeValue(strName, strValue);
            if("custshortname".equals(strName)){
              askbillItem.setAttributeValue("custname", strValue);
            }
          }
        }
        v.addElement(askbillItem);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      askbillItems = new AskbillItemMergeVO[v.size()];
      v.copyInto(askbillItems);
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForStatisVOMy",
        new Object[] { strSQL, strGroup, priceType });
    /** ********************************************************** */

    return askbillItems;
  }
  /**
   * 询价单汇总统计查询 说明：默认(由UI端来保证)的分组方式 1.币种(ccurrencytypeid) 2.存货(cmangid)
   * 3.报价取最大、小、平均值 4.订价=sum(订货金额)/sum(订货数量) 创建日期：(2001-6-7)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param strSQL
   *            String
   * @param strGroup
   *            String
   * @exception java.sql.SQLException
   *                异常说明。 #关联的基础数据表 bd_cubasdoc, bd_cumandoc, bd_invbasdoc,
   *                bd_invmandoc, bd_taxitems, bd_payterm, bd_deptdoc,
   *                bd_psndoc, bd_measdoc, bd_currtype, sm_user as sm_user1,
   *                询价人 sm_user as sm_user2 报价人
   */
  public AskbillItemMergeVO[] findAskItemsForStatisVOMyForFree(String strSQL,
      String[] strGroup, String priceType) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findAskItemsForStatisVOMy", new Object[] { strSQL, strGroup,
            priceType });
    /** ********************************************************** */
    if (strGroup == null)
      return null;
    if (strGroup.length <= 0)
      return null;
    Vector vgrpcols = new Vector();
    boolean isGroupByVendor = false;
    for (int i = 0; i < strGroup.length; i++) {
      // 加入分组项目
      vgrpcols.addElement(strGroup[i]);
      // 加入分组项目相关属性
      if ("cmangid".equals(strGroup[i])) {
        vgrpcols.addElement("invcode");
        vgrpcols.addElement("invname");
        vgrpcols.addElement("invspec");
        vgrpcols.addElement("invtype");
        vgrpcols.addElement("measname");
//        vgrpcols.addElement("po_askbill_bb1.ntaxrate");
      } 
      else if ("ccurrencytypeid".equals(strGroup[i])) {
        vgrpcols.addElement("currtypename");
      } 
      else if ("cvendormangid".equals(strGroup[i])) {
        isGroupByVendor = true;
      }
      else if ("cdeptid".equals(strGroup[i])) {
        vgrpcols.addElement("deptname");
        break;
      } 
      else if ("cemployeeid".equals(strGroup[i])) {
        vgrpcols.addElement("psnname");
      }
    }
    if(isGroupByVendor){
      return null;
    }
    StringBuffer sql = new StringBuffer(" ");
    // select 串
    sql.append("select ");
    // 统计项目
    sql.append("sum(coalesce(po_askbill_b.nasknum,0)), ");
//    sql.append(priceType + "(coalesce(po_askbill_bb1.nquoteprice,0)), ");
//    sql.append(priceType + "(coalesce(po_askbill_bb1.nquotetaxprice,0)), ");

    //sql.append("sum(coalesce(nordernum,0)), ");
    // sql.append( priceType +"(coalesce(nordernotaxprice,0)), ");
    // sql.append( priceType +"(coalesce(norderintaxprice,0)), ");
//    sql.append("case sum(coalesce(nordernum,0)) ");
//    sql.append("     when 0 then 0 ");
//    sql
//        .append("     else cast(sum(coalesce(nordernotaxmny,0)) as decimal(20,8)) / cast(sum(coalesce(nordernum,0)) as decimal(20,8)) ");
//    sql.append("end ");
//    sql.append("nordernotaxprice, ");
//    sql.append("case sum(coalesce(nordernum,0)) ");
//    sql.append("     when 0 then 0 ");
//    sql
//        .append("     else cast(sum(coalesce(npricetaxmny,0)) as decimal(20,8)) / cast(sum(coalesce(nordernum,0)) as decimal(20,8)) ");
//    sql.append("end ");
//    sql.append("norderintaxprice, ");
//    sql.append("sum(coalesce(nordernotaxmny,0)), ");
//    sql.append("sum(coalesce(ntaxmny,0)), ");
//    sql.append("sum(coalesce(npricetaxmny,0)), ");

    // 分组项目及相关属性
    for (int i = 0; i < vgrpcols.size(); i++) {
      if (i != 0)
        sql.append(",");
      sql.append((String) vgrpcols.elementAt(i));
    }
    sql.append(" ");

    // from ... where ... 串
    // sql.append( strSQL + " or (1=1)");
    sql.append(strSQL + " ");
    // sql.append( " 1=1 ");

    // group by 串
    sql.append("group by ");

    for (int i = 0; i < vgrpcols.size(); i++) {
      if (i != 0)
        sql.append(",");
      sql.append((String) vgrpcols.elementAt(i));
    }
    SCMEnv.out(sql);
    // 查询
    String strName = null;
    String strValue = null;
    UFDouble ufdValue = null;
    AskbillItemMergeVO[] askbillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();

      // 不必翻译
      // ((nc.bs.mw.sql.UFConnection)con).enableSQLTranslator(false);
      //

      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070202")); 
      while (rs.next()) {
        AskbillItemMergeVO askbillItem = new AskbillItemMergeVO();
        // 统计项目
        BigDecimal nasknum = rs.getBigDecimal(1);
        askbillItem.setNasknum(nasknum == null ? null : new UFDouble(
            nasknum));
//        BigDecimal nnotaxprice = rs.getBigDecimal(2);
//        askbillItem.setNquoteprice(nnotaxprice == null ? null
//            : new UFDouble(nnotaxprice));
//        BigDecimal nintaxprice = rs.getBigDecimal(3);
//        askbillItem.setNquotetaxprice(nintaxprice == null ? null
//            : new UFDouble(nintaxprice));
//        BigDecimal nordernum = rs.getBigDecimal(4);
//        askbillItem.setNordernum(nordernum == null ? null
//            : new UFDouble(nordernum));
//        BigDecimal nordernotaxprice = rs.getBigDecimal(5);
//        askbillItem.setNordernotaxprice(nordernotaxprice == null ? null
//            : new UFDouble(nordernotaxprice));
//        BigDecimal norderintaxprice = rs.getBigDecimal(6);
//        askbillItem.setNorderintaxprice(norderintaxprice == null ? null
//            : new UFDouble(norderintaxprice));
//        BigDecimal nordernotaxmny = rs.getBigDecimal(7);
//        askbillItem.setNordernotaxmny(nordernotaxmny == null ? null
//            : new UFDouble(nordernotaxmny));
//        BigDecimal ntaxmny = rs.getBigDecimal(8);
//        askbillItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(
//            ntaxmny));
//        BigDecimal npricetaxmny = rs.getBigDecimal(9);
//        askbillItem.setNpricetaxmny(npricetaxmny == null ? null
//            : new UFDouble(npricetaxmny));
        // 分组项目及相关属性
        for (int i = 0; i < vgrpcols.size(); i++) {
          strName = (String) vgrpcols.elementAt(i);
          //自由状态的询报价单，在做报表时不查询税率 since 5.3 modify by donggq
//          if ("po_askbill_bb1.ntaxrate".equals(strName)) {
//            BigDecimal bufdValue = rs.getBigDecimal("ntaxrate");
//            ufdValue = bufdValue == null ? null : new UFDouble(
//                bufdValue);
//            askbillItem.setNtaxrate(ufdValue);
//          } else {
            strValue = rs.getString(strName);
            if ("measname".equals(strName)) {
              strName = "cmainmeasname";
            } else if ("currtypename".equals(strName)) {
              strName = "currname";
            } else if ("ccurrencytypeid".equals(strName)) {
              strName = "ccurrencytypeid";
            } else if ("deptname".equals(strName)) {
              strName = "cdeptidname";
            } else if ("psnname".equals(strName)) {
              strName = "cemployeeidname";
            } else if ("invcode".equals(strName)) {
              strName = "cinventorycode";
            } else if ("invname".equals(strName)) {
              strName = "cinventoryname";
            } else if ("invspec".equals(strName)) {
              strName = "cinventoryspec";
            } else if ("invtype".equals(strName)) {
              strName = "cinventorytype";
            } else if ("cmangid".equals(strName)) {
              strName = "cmangid";
            }

            askbillItem.setAttributeValue(strName, strValue);
//            if(strName.equals("custshortname")){
//              askbillItem.setAttributeValue("custname", strValue);
//            }
//          }
        }
        v.addElement(askbillItem);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      askbillItems = new AskbillItemMergeVO[v.size()];
      v.copyInto(askbillItems);
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForStatisVOMy",
        new Object[] { strSQL, strGroup, priceType });
    /** ********************************************************** */

    return askbillItems;
  }
  /**
   * 查询表体VO（比价）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @return ArrayList
   * @param strSQL
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public ArrayList findAskItemsForThanVOMy(String strSQL) throws SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForThanVOMy",
//        new Object[] { strSQL });
//    /** ********************************************************** */
//    ArrayList aryRslt = new ArrayList();
//    // 存货+自由项
//    String sqlInv = "select distinct po_askbill_b.cbaseid,po_askbill_b.cmangid, po_askbill_b.vfree1, po_askbill_b.vfree2, po_askbill_b.vfree3, po_askbill_b.vfree4, po_askbill_b.vfree5 ";
//    sqlInv += strSQL;
//    // 原始查询语句（未加存货+自由项分组限制）
//    StringBuffer sql = new StringBuffer(" ");
//    sql
//        .append("select po_askbill_b.caskbill_bid, po_askbill_b.caskbillid, po_askbill_b.pk_corp, po_askbill_b.cmangid, po_askbill_b.nasknum, po_askbill_b.vpackmode, po_askbill_b.dreceivedate, po_askbill_b.vreveiveaddress, po_askbill_b.nnotaxprice, po_askbill_b.nintaxprice, po_askbill_b.bisorder, po_askbill_b.nordernum, po_askbill_b.nordernotaxprice, po_askbill_b.norderintaxprice, po_askbill_b.nordernotaxmny, po_askbill_b.ntaxmny, po_askbill_b.npricetaxmny, po_askbill_b.vmemo, po_askbill_b.vdef1, po_askbill_b.vdef2, po_askbill_b.vdef3, po_askbill_b.vdef4, po_askbill_b.vdef5, po_askbill_b.vdef6, po_askbill_b.vfree1, po_askbill_b.vfree2, po_askbill_b.vfree3, po_askbill_b.vfree4, po_askbill_b.vfree5, ");
//    sql.append("po_askbill_b.cbaseid, ");
//    sql.append("po_askbill.vaskbillcode, ");
//    sql.append("po_askbill.cvendorbaseid, ");
//    sql.append("po_askbill.cvendormangid, ");
//    sql.append("po_askbill.ccurrencytypeid, ");
//    sql.append("po_askbill.ctermprotocolid, ");
//    sql.append("po_askbill.ibillstatus, ");
//    sql.append("po_askbill_b.ntaxrate,");
//    sql.append("po_askbill_b.deliverdays,");
//    sql.append("po_askbill_b.crowno, ");
//    sql
//        .append("po_askbill_b.vdef7, po_askbill_b.vdef8, po_askbill_b.vdef9, po_askbill_b.vdef10,po_askbill_b.vdef11, po_askbill_b.vdef12, po_askbill_b.vdef13, po_askbill_b.vdef14, po_askbill_b.vdef15, po_askbill_b.vdef16, po_askbill_b.vdef17, po_askbill_b.vdef18, po_askbill_b.vdef19, po_askbill_b.vdef20,po_askbill_b.pk_defdoc1,po_askbill_b.pk_defdoc2,po_askbill_b.pk_defdoc3,po_askbill_b.pk_defdoc4,po_askbill_b.pk_defdoc5,po_askbill_b.pk_defdoc6,po_askbill_b.pk_defdoc7,po_askbill_b.pk_defdoc8,po_askbill_b.pk_defdoc9,po_askbill_b.pk_defdoc10,po_askbill_b.pk_defdoc11,po_askbill_b.pk_defdoc12,po_askbill_b.pk_defdoc13,po_askbill_b.pk_defdoc14,po_askbill_b.pk_defdoc15,po_askbill_b.pk_defdoc16,po_askbill_b.pk_defdoc17,po_askbill_b.pk_defdoc18,po_askbill_b.pk_defdoc19,po_askbill_b.pk_defdoc20 ");
//    // sql.append("from po_askbill,po_askbill_b on po_askbill.caskbillid =
//    // po_askbill_b.caskbillid and po_askbill.dr =0 and po_askbill_b.dr =0
//    // ");
//    sql.append(strSQL);
//
//    AskbillItemVO_Old[] askbillItems = null;
//    Vector vAryInv = new Vector(), v = new Vector();
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sqlInv);
//      rs = stmt.executeQuery();
//      // ArrayList列表结构：cbaseid,cmandid,vfree1,vfree2,vfree3,vfree4,vfree5
//      ArrayList aryInv = null;
//      int iCount = 7;
//      while (rs.next()) {
//        aryInv = new ArrayList();
//        for (int i = 1; i <= iCount; i++) {
//          aryInv.add(rs.getString(i));
//        }
//        vAryInv.addElement(aryInv);
//      }
//      // 关闭记录结果集
//      rs.close();
//      stmt.close();
//      if (vAryInv == null || vAryInv.size() <= 0) {
//        return null;
//      }
//      // 记录原始查询语句
//      String strSQL0 = sql.toString(), strSQLUse = null;
//      for (int i = 0; i < vAryInv.size(); i++) {
//        v = new Vector();
//        strSQLUse = strSQL0;
//        aryInv = (ArrayList) vAryInv.elementAt(i);
//        if (aryInv == null || aryInv.size() <= 0)
//          continue;
//        // 拼接存货+自由项查询条件
//        strSQLUse += " ";
//        strSQLUse += "and po_askbill_b.cbaseid = '" + aryInv.get(0)
//            + "' ";
//        strSQLUse += "and po_askbill_b.cmangid = '" + aryInv.get(1)
//            + "' ";
//        if (aryInv.get(2) != null
//            && !aryInv.get(2).toString().trim().equals("")) {
//          strSQLUse += "and po_askbill_b.vfree1 = '" + aryInv.get(2)
//              + "' ";
//        }
//        if (aryInv.get(3) != null
//            && !aryInv.get(3).toString().trim().equals("")) {
//          strSQLUse += "and po_askbill_b.vfree2 = '" + aryInv.get(3)
//              + "' ";
//        }
//        if (aryInv.get(4) != null
//            && !aryInv.get(4).toString().trim().equals("")) {
//          strSQLUse += "and po_askbill_b.vfree3 = '" + aryInv.get(4)
//              + "' ";
//        }
//        if (aryInv.get(5) != null
//            && !aryInv.get(5).toString().trim().equals("")) {
//          strSQLUse += "and po_askbill_b.vfree4 = '" + aryInv.get(5)
//              + "' ";
//        }
//        if (aryInv.get(6) != null
//            && !aryInv.get(6).toString().trim().equals("")) {
//          strSQLUse += "and po_askbill_b.vfree5 = '" + aryInv.get(6)
//              + "' ";
//        }
//        stmt = con.prepareStatement(strSQLUse);
//        rs = stmt.executeQuery();
//        //
//        while (rs.next()) {
//          AskbillItemVO_Old askbillItem = new AskbillItemVO_Old();
//          //
//          String caskbill_bid = rs.getString(1);
//          askbillItem.setCaskbill_bid(caskbill_bid == null ? null
//              : caskbill_bid.trim());
//          //
//          String caskbillid = rs.getString(2);
//          askbillItem.setCaskbillid(caskbillid == null ? null
//              : caskbillid.trim());
//          //
//          String pk_corp = rs.getString(3);
//          askbillItem.setPk_corp(pk_corp == null ? null : pk_corp
//              .trim());
//          //
//          String cmangid = rs.getString(4);
//          askbillItem.setCmangid(cmangid == null ? null : cmangid
//              .trim());
//          //
//          Object nasknum = rs.getObject(5);
//          askbillItem.setNasknum((nasknum == null || nasknum
//              .toString().trim().equals("")) ? null
//              : new UFDouble(nasknum.toString().trim()));
//          //
//          String vpackmode = rs.getString(6);
//          askbillItem.setVpackmode(vpackmode == null ? null
//              : vpackmode.trim());
//          //
//          String dreceivedate = rs.getString(7);
//          askbillItem.setDreceivedate(dreceivedate == null ? null
//              : new UFDate(dreceivedate.trim(), false));
//          //
//          String vreveiveaddress = rs.getString(8);
//          askbillItem
//              .setVreveiveaddress(vreveiveaddress == null ? null
//                  : vreveiveaddress.trim());
//          //
//          Object nnotaxprice = rs.getObject(9);
//          askbillItem
//              .setNnotaxprice((nnotaxprice == null || nnotaxprice
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(nnotaxprice.toString()
//                      .trim()));
//          //
//          Object nintaxprice = rs.getObject(10);
//          askbillItem
//              .setNintaxprice((nintaxprice == null || nintaxprice
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(nintaxprice.toString()
//                      .trim()));
//          //
//          Integer bisorder = (Integer) rs.getObject(11);
//          askbillItem.setBisorder(bisorder == null ? null : bisorder);
//          //
//          Object nordernum = rs.getObject(12);
//          askbillItem.setNordernum((nordernum == null || nordernum
//              .toString().trim().equals("")) ? null
//              : new UFDouble(nordernum.toString().trim()));
//          //
//          Object nordernotaxprice = rs.getObject(13);
//          askbillItem
//              .setNordernotaxprice((nordernotaxprice == null || nordernotaxprice
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(nordernotaxprice.toString()
//                      .trim()));
//          //
//          Object norderintaxprice = rs.getObject(14);
//          askbillItem
//              .setNorderintaxprice((norderintaxprice == null || norderintaxprice
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(norderintaxprice.toString()
//                      .trim()));
//          //
//          Object nordernotaxmny = rs.getObject(15);
//          askbillItem
//              .setNordernotaxmny((nordernotaxmny == null || nordernotaxmny
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(nordernotaxmny.toString()
//                      .trim()));
//          //
//          Object ntaxmny = rs.getObject(16);
//          askbillItem.setNtaxmny((ntaxmny == null || ntaxmny
//              .toString().trim().equals("")) ? null
//              : new UFDouble(ntaxmny.toString().trim()));
//          //
//          Object npricetaxmny = rs.getObject(17);
//          askbillItem
//              .setNpricetaxmny((npricetaxmny == null || npricetaxmny
//                  .toString().trim().equals("")) ? null
//                  : new UFDouble(npricetaxmny.toString()
//                      .trim()));
//          //
//          String vmemo = rs.getString(18);
//          askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
//          //
//          String vdef1 = rs.getString(19);
//          askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
//          //
//          String vdef2 = rs.getString(20);
//          askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
//          //
//          String vdef3 = rs.getString(21);
//          askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
//          //
//          String vdef4 = rs.getString(22);
//          askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
//          //
//          String vdef5 = rs.getString(23);
//          askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
//          //
//          String vdef6 = rs.getString(24);
//          askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
//          //
//          String vfree1 = rs.getString(25);
//          askbillItem
//              .setVfree1(vfree1 == null ? null : vfree1.trim());
//          //
//          String vfree2 = rs.getString(26);
//          askbillItem
//              .setVfree2(vfree2 == null ? null : vfree2.trim());
//          //
//          String vfree3 = rs.getString(27);
//          askbillItem
//              .setVfree3(vfree3 == null ? null : vfree3.trim());
//          //
//          String vfree4 = rs.getString(28);
//          askbillItem
//              .setVfree4(vfree4 == null ? null : vfree4.trim());
//          //
//          String vfree5 = rs.getString(29);
//          askbillItem
//              .setVfree5(vfree5 == null ? null : vfree5.trim());
//
//          // 扩充VO部分
//          // 存货基本档案主键
//          String cbaseid = rs.getString(30);
//          askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);
//          String vaskbillcode = rs.getString(31);
//          askbillItem.setVaskbillcode(vaskbillcode == null ? null
//              : vaskbillcode.trim());
//          String cvendorbaseid = rs.getString(32);
//          askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
//              : cvendorbaseid.trim());
//          String cvendormangid = rs.getString(33);
//          askbillItem.setCvendormangid(cvendormangid == null ? null
//              : cvendormangid.trim());
//          // 原币币种主键，用于获取汇率
//          String ccurrencytypeid = rs.getString(34);
//          askbillItem
//              .setCcurrencytypeid(ccurrencytypeid == null ? null
//                  : ccurrencytypeid.trim());
//          String ctermprotocolid = rs.getString(35);
//          askbillItem
//              .setCtermprotocolid(ctermprotocolid == null ? null
//                  : ctermprotocolid.trim());
//          // 单据状态
//          Integer ibillstatus = (Integer) rs.getObject(36);
//          askbillItem.setIbillstatus(ibillstatus == null ? null
//              : ibillstatus);
//
//          // 税率
//          Object oRate = rs.getObject(37);
//          askbillItem.setTaxratio((oRate == null || oRate.toString()
//              .trim().equals("")) ? null : new UFDouble(oRate
//              .toString().trim()));
//
//          // 交货期（天）
//          Integer iDays = (Integer) rs.getObject(38);
//          askbillItem.setDeliverdays(iDays);
//          // 单据行号
//          String crowno = rs.getString(39);
//          askbillItem.setRowno(crowno == null ? null : crowno.trim());
//          // // vdef7 :
//          String vdef7 = rs.getString(40);
//          askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
//          // // vdef8 :
//          String vdef8 = rs.getString(41);
//          askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
//          // // vdef9 :
//          String vdef9 = rs.getString(42);
//          askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
//          // // vdef10 :
//          String vdef10 = rs.getString(43);
//          askbillItem
//              .setVdef10(vdef10 == null ? null : vdef10.trim());
//          // // vdef11 :
//          String vdef11 = rs.getString(44);
//          askbillItem
//              .setVdef11(vdef11 == null ? null : vdef11.trim());
//          // // vdef12 :
//          String vdef12 = rs.getString(45);
//          askbillItem
//              .setVdef12(vdef12 == null ? null : vdef12.trim());
//          // // vdef13 :
//          String vdef13 = rs.getString(46);
//          askbillItem
//              .setVdef13(vdef13 == null ? null : vdef13.trim());
//          // // vdef14 :
//          String vdef14 = rs.getString(47);
//          askbillItem
//              .setVdef14(vdef14 == null ? null : vdef14.trim());
//          // // vdef15 :
//          String vdef15 = rs.getString(48);
//          askbillItem
//              .setVdef15(vdef15 == null ? null : vdef15.trim());
//          // // vdef16 :
//          String vdef16 = rs.getString(49);
//          askbillItem
//              .setVdef16(vdef16 == null ? null : vdef16.trim());
//          // // vdef17 :
//          String vdef17 = rs.getString(50);
//          askbillItem
//              .setVdef17(vdef17 == null ? null : vdef17.trim());
//          // // vdef18 :
//          String vdef18 = rs.getString(51);
//          askbillItem
//              .setVdef18(vdef18 == null ? null : vdef18.trim());
//          // // vdef19 :
//          String vdef19 = rs.getString(52);
//          askbillItem
//              .setVdef19(vdef19 == null ? null : vdef19.trim());
//          // // vdef20 :
//          String vdef20 = rs.getString(53);
//          askbillItem
//              .setVdef20(vdef20 == null ? null : vdef20.trim());
//
//          // // pk_defdoc1 :
//          String pk_defdoc1 = rs.getString(54);
//          askbillItem.setPKDefDoc1(pk_defdoc1 == null ? null
//              : pk_defdoc1.trim());
//          // // pk_defdoc2 :
//          String pk_defdoc2 = rs.getString(55);
//          askbillItem.setPKDefDoc2(pk_defdoc2 == null ? null
//              : pk_defdoc2.trim());
//          // // pk_defdoc3 :
//          String pk_defdoc3 = rs.getString(56);
//          askbillItem.setPKDefDoc3(pk_defdoc3 == null ? null
//              : pk_defdoc3.trim());
//          // // pk_defdoc4 :
//          String pk_defdoc4 = rs.getString(57);
//          askbillItem.setPKDefDoc4(pk_defdoc4 == null ? null
//              : pk_defdoc4.trim());
//          // // pk_defdoc5 :
//          String pk_defdoc5 = rs.getString(58);
//          askbillItem.setPKDefDoc5(pk_defdoc5 == null ? null
//              : pk_defdoc5.trim());
//          // // pk_defdoc6 :
//          String pk_defdoc6 = rs.getString(59);
//          askbillItem.setPKDefDoc6(pk_defdoc6 == null ? null
//              : pk_defdoc6.trim());
//          // // pk_defdoc7 :
//          String pk_defdoc7 = rs.getString(60);
//          askbillItem.setPKDefDoc7(pk_defdoc7 == null ? null
//              : pk_defdoc7.trim());
//          // // pk_defdoc8 :
//          String pk_defdoc8 = rs.getString(61);
//          askbillItem.setPKDefDoc8(pk_defdoc8 == null ? null
//              : pk_defdoc8.trim());
//          // // pk_defdoc9 :
//          String pk_defdoc9 = rs.getString(62);
//          askbillItem.setPKDefDoc9(pk_defdoc9 == null ? null
//              : pk_defdoc9.trim());
//          // // pk_defdoc10 :
//          String pk_defdoc10 = rs.getString(63);
//          askbillItem.setPKDefDoc10(pk_defdoc10 == null ? null
//              : pk_defdoc10.trim());
//          // // pk_defdoc11 :
//          String pk_defdoc11 = rs.getString(64);
//          askbillItem.setPKDefDoc11(pk_defdoc11 == null ? null
//              : pk_defdoc11.trim());
//          // // pk_defdoc12 :
//          String pk_defdoc12 = rs.getString(65);
//          askbillItem.setPKDefDoc12(pk_defdoc12 == null ? null
//              : pk_defdoc12.trim());
//          // // pk_defdoc13 :
//          String pk_defdoc13 = rs.getString(66);
//          askbillItem.setPKDefDoc13(pk_defdoc13 == null ? null
//              : pk_defdoc13.trim());
//          // // pk_defdoc14 :
//          String pk_defdoc14 = rs.getString(67);
//          askbillItem.setPKDefDoc14(pk_defdoc14 == null ? null
//              : pk_defdoc14.trim());
//          // // pk_defdoc15 :
//          String pk_defdoc15 = rs.getString(68);
//          askbillItem.setPKDefDoc15(pk_defdoc15 == null ? null
//              : pk_defdoc15.trim());
//          // // pk_defdoc16 :
//          String pk_defdoc16 = rs.getString(69);
//          askbillItem.setPKDefDoc16(pk_defdoc16 == null ? null
//              : pk_defdoc16.trim());
//          // // pk_defdoc17 :
//          String pk_defdoc17 = rs.getString(70);
//          askbillItem.setPKDefDoc17(pk_defdoc17 == null ? null
//              : pk_defdoc17.trim());
//          // // pk_defdoc18 :
//          String pk_defdoc18 = rs.getString(71);
//          askbillItem.setPKDefDoc18(pk_defdoc18 == null ? null
//              : pk_defdoc18.trim());
//          // // pk_defdoc19 :
//          String pk_defdoc19 = rs.getString(72);
//          askbillItem.setPKDefDoc19(pk_defdoc19 == null ? null
//              : pk_defdoc19.trim());
//          // // pk_defdoc20 :
//          String pk_defdoc20 = rs.getString(73);
//          askbillItem.setPKDefDoc20(pk_defdoc20 == null ? null
//              : pk_defdoc20.trim());
//
//          v.addElement(askbillItem);
//        }
//        rs.close();
//        stmt.close();
//        if (v.size() > 0) {
//          askbillItems = new AskbillItemVO_Old[v.size()];
//          v.copyInto(askbillItems);
//          aryRslt.add(askbillItems);
//        }
//      }
//    } finally {
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findAskItemsForThanVOMy",
//        new Object[] { strSQL });
//    /** ********************************************************** */
//
//    return aryRslt;
//  }

  /**
   * 在发票表体中查询币种ID[] 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return strCurrIDs String 币种ID[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String[] findCurrIDsForPurExecVOsMyInvoice(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForPurExecVOsMyInvoice", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_invoice_b.ccurrencytypeid ";
    sql += strSQL + " ";
    sql += "and po_invoice_b.ccurrencytypeid is not null ";

    Vector vccurrid = new Vector();
    String[] ccurrids = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String ccurrid = rs.getString(1);
        vccurrid.add(ccurrid == null ? null : ccurrid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vccurrid.size() <= 0)
      return null;

    ccurrids = new String[vccurrid.size()];
    vccurrid.copyInto(ccurrids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForPurExecVOsMyInvoice", new Object[] { strSQL });
    /** ********************************************************** */

    return ccurrids;
  }

  /**
   * 在订单表体中查询币种ID[] 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return strCurrIDs String 币种ID[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String[] findCurrIDsForPurExecVOsMyOrder(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForPurExecVOsMyOrder", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_order_b.ccurrencytypeid ";
    sql += strSQL + " ";
    sql += "and po_order_b.ccurrencytypeid is not null ";

    Vector vccurrid = new Vector();
    String[] ccurrids = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String ccurrid = rs.getString(1);
        vccurrid.add(ccurrid == null ? null : ccurrid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vccurrid.size() <= 0)
      return null;

    ccurrids = new String[vccurrid.size()];
    vccurrid.copyInto(ccurrids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForPurExecVOsMyOrder", new Object[] { strSQL });
    /** ********************************************************** */

    return ccurrids;
  }

  /**
   * 在询价单表体中查询币种ID[] 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return strCurrIDs String 币种ID[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String[] findCurrIDsForStockVarVOsMy(String strSQL,String funcNode)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForStockVarVOsMy", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_askbill.ccurrencytypeid ";
    sql += strSQL + " ";
    sql += "and po_askbill.ccurrencytypeid is not null ";

    Vector vccurrid = new Vector();
    String[] ccurrids = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      //
      while (rs.next()) {
        String ccurrid = rs.getString(1);
        vccurrid.add(ccurrid == null ? null : ccurrid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vccurrid.size() <= 0)
      return null;

    ccurrids = new String[vccurrid.size()];
    vccurrid.copyInto(ccurrids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findCurrIDsForStockVarVOsMy", new Object[] { strSQL });
    /** ********************************************************** */

    return ccurrids;
  }

  /**
   * 在发票体中查询存货管理ID和存货ID 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return aryInvIDs ArrayList cmangid[] 和 cbaseid[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public ArrayList findInvIDsForPurExecVOMyInvoice(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_invoice_b.cmangid, ";
    sql += "po_invoice_b.cbaseid ";
    sql += strSQL;
    

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }
  /**
   * 在发票体中查询存货管理ID和存货ID 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return aryInvIDs ArrayList cmangid[] 和 cbaseid[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public ArrayList findInvIDsForPurExecVOMyInvoiceForBantch(String strSQL,String funcNode)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_invoice_b.cmangid, ";
    sql += "po_invoice_b.cbaseid,po_invoice_b.ccurrencytypeid ";
    sql += strSQL;
    sql += "and po_invoice_b.ccurrencytypeid is not null ";

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    Vector vcurrid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    String[] ccurrids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
        String ccurrid = rs.getString(3);
        vcurrid.add(ccurrid == null ? null : ccurrid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;
    if (vcurrid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    ccurrids = new String[vcurrid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);
    vcurrid.copyInto(ccurrids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);
    aryInvIDs.add(ccurrids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }
  /**
   * 在订表体中查询存货管理ID和存货ID 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return aryInvIDs ArrayList cmangid[] 和 cbaseid[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public ArrayList findInvIDsForPurExecVOMyOrder(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_order_b.cmangid, ";
    sql += "po_order_b.cbaseid ";
    sql += "po_order_b.cbaseid,po_order_b.ccurrencytypeid ";
    sql += strSQL;
    sql += "and po_order_b.ccurrencytypeid is not null ";

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }
  /**
   * 在订表体中查询存货管理ID和存货ID 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return aryInvIDs ArrayList cmangid[] 和 cbaseid[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public ArrayList findInvIDsForPurExecVOMyOrderForBantch(String strSQL,String funcNode)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_order_b.cmangid, ";
    sql += "po_order_b.cbaseid,po_order_b.ccurrencytypeid ";
    sql += strSQL;
    sql += "and po_order_b.ccurrencytypeid is not null ";

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    Vector vcurrid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    String[] ccurrids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
        String ccurrid = rs.getString(3);
        vcurrid.add(ccurrid == null ? null : ccurrid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;
    if (vcurrid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    ccurrids = new String[vcurrid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);
    vcurrid.copyInto(ccurrids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);
    aryInvIDs.add(ccurrids);


    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForPurExecVOMyOrder", new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }
  /**
   * 在询价单表体中查询存货管理ID和存货ID 创建日期：(2001-11-07-10)
   * 
   * @param strSQL
   *            String 过滤条件
   * @return aryInvIDs ArrayList cmangid[] 和 cbaseid[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public ArrayList findInvIDsForStockVarVOMy2(String strSQL)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForStockVarVOMy", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_askbill_b.cmangid, ";
    sql += "po_askbill_b.cbaseid ";
    sql += strSQL;

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070301"));
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findInvIDsForStockVarVOMy",
        new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }
  
  /**
   * 
   * 方法功能描述：查询存货管理ID和存货ID。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param strSQL
   * @return
   * @throws SQLException
   * <p>
   * @author tianft
   * @time 2009-11-26 下午03:15:25
   */
  public ArrayList findInvIDsForStockVarVOMy(String strSQL,String funcNode)
      throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findInvIDsForStockVarVOMy", new Object[] { strSQL });
    /** ********************************************************** */
    if (strSQL == null)
      return null;
    if ("".equals(strSQL.trim()))
      return null;

    String sql = "";
    sql += "select distinct ";
    sql += "po_askbill_b.cmangid, ";
    sql += "po_askbill_b.cbaseid ";
    sql += strSQL;

    Vector vcmangid = new Vector();
    Vector vcbaseid = new Vector();
    String[] cmangids = null;
    String[] cbaseids = null;
    ArrayList aryInvIDs = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      //2009/11/26 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      //
      while (rs.next()) {
        String cmangid = rs.getString(1);
        vcmangid.add(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString(2);
        vcbaseid.add(cbaseid == null ? null : cbaseid.trim());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    if (vcmangid.size() <= 0)
      return null;
    if (vcbaseid.size() <= 0)
      return null;

    cmangids = new String[vcmangid.size()];
    cbaseids = new String[vcbaseid.size()];
    vcmangid.copyInto(cmangids);
    vcbaseid.copyInto(cbaseids);

    aryInvIDs = new ArrayList();
    aryInvIDs.add(cmangids);
    aryInvIDs.add(cbaseids);

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findInvIDsForStockVarVOMy",
        new Object[] { strSQL });
    /** ********************************************************** */

    return aryInvIDs;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVO[] findItemsForHeaderMyArray(AskbillHeaderVO[] heads,
      String SQLItems) throws SQLException {

    if (heads == null || heads.length <= 0)
      return null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select caskbill_bid, caskbillid, pk_corp, cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress,  vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, ");
    sb
        .append(" crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid,vdef7, vdef8, vdef9, vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,ts,pk_upsrccorp  ");
    sb.append("from po_askbill_b ");
    sb.append("where dr = 0 and caskbillid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU97,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);
    if(SQLItems != null && SQLItems.trim().length() > 0){
     sb.append(SQLItems);
    }
    String sql = sb.toString();

    Vector v = new Vector();
    AskbillItemVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      int count = 1;
      while (rs.next()) {
        AskbillItemVO askbillItem = new AskbillItemVO();
        //
        String caskbill_bid = rs.getString("caskbill_bid");
        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        //
        String caskbillid = rs.getString("caskbillid");
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cmangid = rs.getString("cmangid");
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        askbillItem.setSpecialNum(cmangid + count);
        //
        Object nasknum = rs.getObject("nasknum");
        askbillItem.setNasknum((nasknum == null || "".equals(nasknum.toString()
            .trim())) ? null : new UFDouble(nasknum
            .toString().trim()));
        //
        String vpackmode = rs.getString("vpackmode");
        askbillItem.setVpackmode(vpackmode == null ? null : vpackmode
            .trim());
        //
        String dreceivedate = rs.getString("dreceivedate");
        askbillItem.setDreceivedate(dreceivedate == null ? null
            : new UFDate(dreceivedate.trim(), false));
        //
        String vreveiveaddress = rs.getString("vreveiveaddress");
        askbillItem.setVreveiveaddress(vreveiveaddress == null ? null
            : vreveiveaddress.trim());
        //
        String vmemo = rs.getString("vmemo");
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vdef1 = rs.getString("vdef1");
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString("vdef2");
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString("vdef3");
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString("vdef4");
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString("vdef5");
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString("vdef6");
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        //
        String vfree1 = rs.getString("vfree1");
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString("vfree2");
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString("vfree3");
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString("vfree4");
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString("vfree5");
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());

        // 存货基本档案主键
        String cbaseid = rs.getString("cbaseid");
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);

        // 税率
//        Object oRate = rs.getObject("ntaxrate");
//        askbillItem.setNtaxrate((oRate == null || "".equals(oRate.toString()
//            .trim())) ? null : new UFDouble(oRate
//            .toString().trim()));
        // 单据行号
        String crowno = rs.getString("crowno");
        askbillItem.setCrowno(crowno == null ? null : crowno.trim());
        // 来源信息
        String csourcebilltype = rs.getString("csourcebilltype");
        askbillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        String csourcebillid = rs.getString("csourcebillid");
        askbillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        String csourcebillrowid = rs.getString("csourcebillrowid");
        askbillItem.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        askbillItem
            .setCupsourcebilltype(cupsourcebilltype == null ? null
                : cupsourcebilltype.trim());
        String cupsourcebillid = rs.getString("cupsourcebillid");
        askbillItem.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        askbillItem
            .setCupsourcebillrowid(cupsourcebillrowid == null ? null
                : cupsourcebillrowid.trim());
        // // vdef7 :
        String vdef7 = rs.getString("vdef7");
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString("vdef8");
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString("vdef9");
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString("vdef10");
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString("vdef11");
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString("vdef12");
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString("vdef13");
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString("vdef14");
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString("vdef15");
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString("vdef16");
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString("vdef17");
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString("vdef18");
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString("vdef19");
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString("vdef20");
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString("pk_defdoc1");
        askbillItem.setPk_defdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString("pk_defdoc2");
        askbillItem.setPk_defdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString("pk_defdoc3");
        askbillItem.setPk_defdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString("pk_defdoc4");
        askbillItem.setPk_defdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString("pk_defdoc5");
        askbillItem.setPk_defdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString("pk_defdoc6");
        askbillItem.setPk_defdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString("pk_defdoc7");
        askbillItem.setPk_defdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString("pk_defdoc8");
        askbillItem.setPk_defdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString("pk_defdoc9");
        askbillItem.setPk_defdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString("pk_defdoc10");
        askbillItem.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString("pk_defdoc11");
        askbillItem.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString("pk_defdoc12");
        askbillItem.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString("pk_defdoc13");
        askbillItem.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString("pk_defdoc14");
        askbillItem.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString("pk_defdoc15");
        askbillItem.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString("pk_defdoc16");
        askbillItem.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString("pk_defdoc17");
        askbillItem.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString("pk_defdoc18");
        askbillItem.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString("pk_defdoc19");
        askbillItem.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString("pk_defdoc20");
        askbillItem.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        // // ts :
        String ts = rs.getString("ts");
        askbillItem.setTs(ts == null ? null : ts.trim());
         // pk_upsrccorp :
        String pk_upsrccorp = rs.getString("pk_upsrccorp");
        askbillItem.setUpsrccorp(pk_upsrccorp == null ? null : pk_upsrccorp.trim());
         // pk_srccorp :
//        String pk_srccorp = rs.getString("pk_srccorp");
//        askbillItem.setPk_srccorp(pk_srccorp == null ? null : pk_srccorp.trim());
        count++;
        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new AskbillItemVO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBVO[] findItemsForHeaderPriceAudit(
      PriceauditHeaderVO[] heads, String SQLItems) throws SQLException {

    if (heads == null || heads.length <= 0)
      return null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select po_priceaudit_b.cpriceaudit_bid,po_priceaudit_b.cpriceauditid,po_priceaudit_b.pk_corp,po_priceaudit_b.cmangid,po_priceaudit_b.nnum,po_priceaudit_b.darrvdate,po_priceaudit_b.vsourcebillcode,po_priceaudit_b.vupsourcebillcode,po_priceaudit_b. vmemo,po_priceaudit_b.vdef1,po_priceaudit_b.vdef2,po_priceaudit_b.vdef3,po_priceaudit_b.vdef4,po_priceaudit_b.vdef5,po_priceaudit_b.vdef6,po_priceaudit_b.vfree1,po_priceaudit_b.vfree2,po_priceaudit_b.vfree3,po_priceaudit_b.vfree4,po_priceaudit_b.vfree5,po_priceaudit_b.cbaseid,");
    sb
        .append("po_priceaudit_b.crowno,po_priceaudit_b.csourcebilltype,po_priceaudit_b.csourcebillid,po_priceaudit_b.csourcebillrowid,po_priceaudit_b.cupsourcebilltype,po_priceaudit_b.cupsourcebillid,po_priceaudit_b.cupsourcebillrowid,po_priceaudit_b.vdef7,po_priceaudit_b.vdef8,po_priceaudit_b.vdef9,po_priceaudit_b.vdef10,po_priceaudit_b.vdef11,po_priceaudit_b.vdef12,po_priceaudit_b.vdef13,po_priceaudit_b.vdef14,po_priceaudit_b.vdef15,po_priceaudit_b.vdef16,po_priceaudit_b.vdef17,po_priceaudit_b.vdef18,po_priceaudit_b.vdef19,po_priceaudit_b.vdef20,po_priceaudit_b.pk_defdoc1,po_priceaudit_b.pk_defdoc2,po_priceaudit_b.pk_defdoc3,po_priceaudit_b.pk_defdoc4,po_priceaudit_b.pk_defdoc5,po_priceaudit_b.pk_defdoc6,po_priceaudit_b.pk_defdoc7,po_priceaudit_b.pk_defdoc8,po_priceaudit_b.pk_defdoc9,po_priceaudit_b.pk_defdoc10,po_priceaudit_b.pk_defdoc11,po_priceaudit_b.pk_defdoc12,po_priceaudit_b.pk_defdoc13,po_priceaudit_b.pk_defdoc14,po_priceaudit_b.pk_defdoc15,po_priceaudit_b.pk_defdoc16,po_priceaudit_b.pk_defdoc17,po_priceaudit_b.pk_defdoc18,po_priceaudit_b.pk_defdoc19,po_priceaudit_b.pk_defdoc20,po_priceaudit_b.pk_upsrccorp,po_priceaudit_b.dr,po_priceaudit_b.ts  ");
    sb.append("from po_priceaudit_b ");
    if (SQLItems != null && SQLItems.indexOf("po_priceaudit")!= -1){
    	sb.append(" left outer join po_priceaudit on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid ");
    }
    if (SQLItems != null && (SQLItems.indexOf("po_priceaudit_bb1")!= -1 || SQLItems.indexOf("ngenct")!= -1)){
    	sb.append(" left outer join po_priceaudit_bb1 on po_priceaudit_bb1.cpriceaudit_bid = po_priceaudit_b.cpriceaudit_bid ");
    }
    //2009/11/27 tianft 解决选择币种报“加载失败”问题
    if (SQLItems != null && (SQLItems.indexOf("bd_currtype.currtypecode")!= -1)){//币种
    	sb.append(" left outer join bd_currtype on bd_currtype.pk_currtype = po_priceaudit.ccurrencytypeid ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_deptdoc.deptcode")!= -1)){//采购部门
    	sb.append(" left outer join bd_deptdoc on po_priceaudit.cdeptid = bd_deptdoc.pk_deptdoc ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_psndoc.psncode")!= -1)){//业务员
    	sb.append(" left outer join bd_psndoc on po_priceaudit.cemployeeid = bd_psndoc.pk_psndoc ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_payterm.termid")!= -1)){//付款协议
    	sb.append(" left outer join bd_payterm on po_priceaudit.ctermprotocolid = bd_payterm.pk_payterm ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_invbasdoc.invcode")!= -1)){// 存货编码
    	sb.append(" left outer join bd_invbasdoc ON po_priceaudit_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
    }

    sb.append("where po_priceaudit_b.dr = 0 and po_priceaudit_b.cpriceauditid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU97,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);
    if(SQLItems != null && SQLItems.trim().length() > 0){
     sb.append(SQLItems);
    }
    String sql = sb.toString();

    Vector v = new Vector();
    PriceauditBVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
//    Vector vCmangid = null;
    Hashtable hTmp1 = null;
//    Hashtable hTmp2 = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      int count = 0;
//      vCmangid = new Vector();
      Vector<String> bid = new Vector<String>();
      while (rs.next()) {
        PriceauditBVO askbillItem = new PriceauditBVO();

        //
        String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
        if(bid.contains(cpriceaudit_bid)){
        	continue;
        }else{
        	bid.add(cpriceaudit_bid);
        }
        askbillItem.setPrimaryKey(cpriceaudit_bid == null ? null
            : cpriceaudit_bid.trim());
        //
        String cpriceauditid = rs.getString("cpriceauditid");
        askbillItem.setCpriceauditid(cpriceauditid == null ? null
            : cpriceauditid.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cmangid = rs.getString("cmangid");
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        askbillItem.setSpecialnum(cmangid + count);
//        if (cmangid != null && cmangid.trim().length() > 0) {
//          vCmangid.add(cmangid);
//        }

        //
        Object nnum = rs.getObject("nnum");
        askbillItem.setNnum((nnum == null || ""
            .equals(nnum.toString().trim())) ? null : new UFDouble(nnum.toString()
            .trim()));
        //
        String vsourcebillcode = rs.getString("vsourcebillcode");
        askbillItem.setVsourcebillcode(vsourcebillcode == null ? null
            : vsourcebillcode.trim());
        //
        String darrvdate = rs.getString("darrvdate");
        askbillItem.setDarrvdate(darrvdate == null ? null : new UFDate(
            darrvdate.trim(), false));
        //
        String vupsourcebillcode = rs.getString("vupsourcebillcode");
        askbillItem
            .setVupsourcebillcode(vupsourcebillcode == null ? null
                : vupsourcebillcode.trim());
        //
        String vmemo = rs.getString("vmemo");
        askbillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vdef1 = rs.getString("vdef1");
        askbillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString("vdef2");
        askbillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString("vdef3");
        askbillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString("vdef4");
        askbillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString("vdef5");
        askbillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString("vdef6");
        askbillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        //
        String vfree1 = rs.getString("vfree1");
        askbillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString("vfree2");
        askbillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString("vfree3");
        askbillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString("vfree4");
        askbillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString("vfree5");
        askbillItem.setVfree5(vfree5 == null ? null : vfree5.trim());

        // 存货基本档案主键
        String cbaseid = rs.getString("cbaseid");
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid);

        // 税率
//        Object oRate = rs.getObject("ntaxrate");
//        askbillItem.setNtaxrate((oRate == null || "".equals(oRate.toString()
//            .trim())) ? null : new UFDouble(oRate
//            .toString().trim()));
        // 单据行号
        String crowno = rs.getString("crowno");
        askbillItem.setCrowno(crowno == null ? null : crowno.trim());
        // 来源信息
        String csourcebilltype = rs.getString("csourcebilltype");
        askbillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        String csourcebillid = rs.getString("csourcebillid");
        askbillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        String csourcebillrowid = rs.getString("csourcebillrowid");
        askbillItem.setCsourcebillrowid(csourcebillrowid == null ? null
            : csourcebillrowid.trim());
        String cupsourcebilltype = rs.getString("cupsourcebilltype");
        askbillItem
            .setCupsourcebilltype(cupsourcebilltype == null ? null
                : cupsourcebilltype.trim());
        String cupsourcebillid = rs.getString("cupsourcebillid");
        askbillItem.setCupsourcebillid(cupsourcebillid == null ? null
            : cupsourcebillid.trim());
        String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
        askbillItem
            .setCupsourcebillrowid(cupsourcebillrowid == null ? null
                : cupsourcebillrowid.trim());
        // // vdef7 :
        String vdef7 = rs.getString("vdef7");
        askbillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString("vdef8");
        askbillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString("vdef9");
        askbillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString("vdef10");
        askbillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString("vdef11");
        askbillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString("vdef12");
        askbillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString("vdef13");
        askbillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString("vdef14");
        askbillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString("vdef15");
        askbillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString("vdef16");
        askbillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString("vdef17");
        askbillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString("vdef18");
        askbillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString("vdef19");
        askbillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString("vdef20");
        askbillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString("pk_defdoc1");
        askbillItem.setPk_defdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString("pk_defdoc2");
        askbillItem.setPk_defdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString("pk_defdoc3");
        askbillItem.setPk_defdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString("pk_defdoc4");
        askbillItem.setPk_defdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString("pk_defdoc5");
        askbillItem.setPk_defdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString("pk_defdoc6");
        askbillItem.setPk_defdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString("pk_defdoc7");
        askbillItem.setPk_defdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString("pk_defdoc8");
        askbillItem.setPk_defdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString("pk_defdoc9");
        askbillItem.setPk_defdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString("pk_defdoc10");
        askbillItem.setPk_defdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString("pk_defdoc11");
        askbillItem.setPk_defdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString("pk_defdoc12");
        askbillItem.setPk_defdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString("pk_defdoc13");
        askbillItem.setPk_defdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString("pk_defdoc14");
        askbillItem.setPk_defdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString("pk_defdoc15");
        askbillItem.setPk_defdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString("pk_defdoc16");
        askbillItem.setPk_defdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString("pk_defdoc17");
        askbillItem.setPk_defdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString("pk_defdoc18");
        askbillItem.setPk_defdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString("pk_defdoc19");
        askbillItem.setPk_defdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString("pk_defdoc20");
        askbillItem.setPk_defdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        // // pk_defdoc20 :
        String pk_upsrccorp = rs.getString("pk_upsrccorp");
        askbillItem.setPk_upsrccorp(pk_upsrccorp == null ? null
            : pk_upsrccorp.trim());
        // // dr :
        String dr = rs.getString("dr");
        askbillItem.setDr(dr == null ? null : new Integer(dr.trim()));
        // // ts :
        String ts = rs.getString("ts");
        askbillItem.setTs(ts == null ? null : ts.trim());
        count++;
        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new PriceauditBVO[v.size()];
        v.copyInto(askbillItems);
        String cmangid = null;
//        hTmp2 = new Hashtable();
        HashMap<String, Vector<String>> hmManCorp = new HashMap<String, Vector<String>>();
        for (int i = 0; i < askbillItems.length; i++) {
        	String key = askbillItems[i].getPk_corp();
        	if(hmManCorp.containsKey(key)){
        		Vector<String> temp = hmManCorp.get(key);
        		temp.add(askbillItems[i].getCmangid());
        		hmManCorp.put(key,temp);
        	}else{
        		Vector<String> temp = new Vector<String>();
        		temp.add(askbillItems[i].getCmangid());
        		hmManCorp.put(key,temp);
        	}
        }
        Hashtable uninTable = new Hashtable();
        Hashtable[] alltable = new Hashtable[hmManCorp.size()];
        Iterator keyValuePairs = hmManCorp.entrySet().iterator();
        int mapSize = hmManCorp.size();
        for (int i = 0; i < mapSize; i++) {
			Map.Entry entry = (Map.Entry) keyValuePairs.next();		  
			String corp = (String)entry.getKey();
			Vector<String> vmanids = (Vector<String>)entry.getValue();
			alltable[i] = getPriceLastForThanVOHash(vmanids, corp);
			if(alltable[i] != null){
				uninTable.putAll(alltable[i]);
			}
		}
        // 查询采购最新价
        for (int i = 0; i < askbillItems.length; i++) {
          cmangid = askbillItems[i].getCmangid();
          hTmp1 = new Hashtable();
          if (!uninTable.containsKey(cmangid)) {
            if (hTmp1 != null && hTmp1.size() > 0) {
              if (hTmp1.get(cmangid) != null
                  && hTmp1.get(cmangid).toString().trim()
                      .length() > 0) {
                askbillItems[i].setLastprice((UFDouble) hTmp1
                    .get(cmangid));
                uninTable.put(cmangid, (UFDouble) hTmp1
                    .get(cmangid));
              }
            }
          } else {
            askbillItems[i].setLastprice((UFDouble) uninTable
                .get(cmangid));
          }
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

/**
	 * liuys add for 鹤岗矿业
	 * 
	 * 查询登录人与供应商的关联关系
	 * 
	 * @param loginUser
	 * @return
	 * @throws Exception
	 */
	public ArrayList queryUserAndCust(String loginUser,String pk_corp) throws Exception{
		List custcodes = null;
		if(loginUser == null)
			throw new  BusinessException("未取到登录用户,请检查");
		String sql = "select distinct man.pk_cumandoc from hg_userandcust st, bd_cumandoc man where  st.dr = 0  and man.dr = 0  and st.pk_custbas = man.pk_cubasdoc  and st.pk_user = '"+loginUser.trim()+"' and man.pk_corp = '"+pk_corp+"'";
		Object o = new BaseDAO().executeQuery(sql, HgBsPubTool.ARRAYLISTPROCESSOR);
		if(o != null)
			custcodes = (ArrayList)o;
		return (ArrayList) custcodes;
	}
  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemBVO[] findItemsBForHeaderMyArray(AskbillHeaderVO[] heads,
      String SQLItems,String sqlWhere) throws SQLException {

    if (heads == null || heads.length <= 0)
      return null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select caskbill_bb1id,caskbill_b1id,caskbill_bid, caskbillid, po_askbill_bb1.pk_corp, cvendormangid, cvendorbaseid,nquoteprice, nquotetaxprice, dvaliddate, dinvaliddate,deliverdays,po_askbill_bb1.ts ,po_askbill_bb1.ntaxrate,vbdef1, vbdef2, vbdef3, vbdef4, vbdef5, vbdef6, vbdef7, vbdef8, vbdef9, vbdef10, vbdef11, vbdef12, vbdef13, vbdef14, vbdef15, vbdef16, vbdef17, vbdef18, vbdef19, vbdef20,pk_bdefdoc1,pk_bdefdoc2,pk_bdefdoc3,pk_bdefdoc4,pk_bdefdoc5,pk_bdefdoc6,pk_bdefdoc7,pk_bdefdoc8,pk_bdefdoc9,pk_bdefdoc10,pk_bdefdoc11,pk_bdefdoc12,pk_bdefdoc13,pk_bdefdoc14,pk_bdefdoc15,pk_bdefdoc16,pk_bdefdoc17,pk_bdefdoc18,pk_bdefdoc19,pk_bdefdoc20,creceiptareaid,csendtypeid ");
    sb.append("from po_askbill_bb1 left outer join bd_cumandoc on  bd_cumandoc.pk_cumandoc = po_askbill_bb1.cvendormangid  ");
    sb.append("where po_askbill_bb1.dr = 0 and caskbillid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU97,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);
    if(SQLItems != null && SQLItems.trim().length() > 0){
     sb.append(SQLItems);
    }
    sb.append(" and UPPER(bd_cumandoc.frozenflag) <> 'Y' ");
      //liuys add 
    if(sqlWhere != null)
    	sb.append(sqlWhere);
    
    String sql = sb.toString();

    Vector v = new Vector();
    AskbillItemBVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        AskbillItemBVO askbillItem = new AskbillItemBVO();
        //
        String caskbill_bb1id = rs.getString("caskbill_bb1id");
        askbillItem.setCaskbill_bb1id(caskbill_bb1id == null ? null
            : caskbill_bb1id.trim());
        //
        String caskbill_b1id = rs.getString("caskbill_b1id");
        askbillItem.setCaskbill_b1id(caskbill_b1id == null ? null
            : caskbill_b1id.trim());
        //
        String caskbill_bid = rs.getString("caskbill_bid");
        askbillItem.setCaskbill_bid(caskbill_bid == null ? null
            : caskbill_bid.trim());
        //
        String caskbillid = rs.getString("caskbillid");
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cvendormangid = rs.getString("cvendormangid");
        askbillItem.setCvendmangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString("cvendorbaseid");
        askbillItem.setCvendbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        Object nquoteprice = rs.getObject("nquoteprice");
        askbillItem.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.toString().trim()));
        //
        Object nquotetaxprice = rs.getObject("nquotetaxprice");
        askbillItem.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.toString().trim()));
        //
        String dvaliddate = rs.getString("dvaliddate");
        askbillItem.setDvaliddate(dvaliddate == null ? null
            : new UFDate(dvaliddate.trim(), false));
        //
        String dinvaliddate = rs.getString("dinvaliddate");
        askbillItem.setDinvaliddate(dinvaliddate == null ? null
            : new UFDate(dinvaliddate.trim(), false));
        // 交货期（天）
        Object days = rs.getObject("deliverdays");
        askbillItem.setDeliverdays(days == null ? null : new Integer(
            days.toString().trim()));
        //税率
        Object ntaxrate = rs.getObject("ntaxrate");
        askbillItem.setNtaxrate(ntaxrate == null ? null: new UFDouble(ntaxrate.toString().trim()));
        String vdef1 = rs.getString("vbdef1");
        askbillItem.setVbdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString("vbdef2");
        askbillItem.setVbdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString("vbdef3");
        askbillItem.setVbdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString("vbdef4");
        askbillItem.setVbdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString("vbdef5");
        askbillItem.setVbdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString("vbdef6");
        askbillItem.setVbdef6(vdef6 == null ? null : vdef6.trim());
        
        String vdef7 = rs.getString("vbdef7");
        askbillItem.setVbdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString("vbdef8");
        askbillItem.setVbdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString("vbdef9");
        askbillItem.setVbdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString("vbdef10");
        askbillItem.setVbdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString("vbdef11");
        askbillItem.setVbdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString("vbdef12");
        askbillItem.setVbdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString("vbdef13");
        askbillItem.setVbdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString("vbdef14");
        askbillItem.setVbdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString("vbdef15");
        askbillItem.setVbdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString("vbdef16");
        askbillItem.setVbdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString("vbdef17");
        askbillItem.setVbdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString("vbdef18");
        askbillItem.setVbdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString("vbdef19");
        askbillItem.setVbdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString("vbdef20");
        askbillItem.setVbdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString("pk_bdefdoc1");
        askbillItem.setPk_bdefdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString("pk_bdefdoc2");
        askbillItem.setPk_bdefdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString("pk_bdefdoc3");
        askbillItem.setPk_bdefdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString("pk_bdefdoc4");
        askbillItem.setPk_bdefdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString("pk_bdefdoc5");
        askbillItem.setPk_bdefdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString("pk_bdefdoc6");
        askbillItem.setPk_bdefdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString("pk_bdefdoc7");
        askbillItem.setPk_bdefdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString("pk_bdefdoc8");
        askbillItem.setPk_bdefdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString("pk_bdefdoc9");
        askbillItem.setPk_bdefdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString("pk_bdefdoc10");
        askbillItem.setPk_bdefdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString("pk_bdefdoc11");
        askbillItem.setPk_bdefdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString("pk_bdefdoc12");
        askbillItem.setPk_bdefdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString("pk_bdefdoc13");
        askbillItem.setPk_bdefdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString("pk_bdefdoc14");
        askbillItem.setPk_bdefdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString("pk_bdefdoc15");
        askbillItem.setPk_bdefdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString("pk_bdefdoc16");
        askbillItem.setPk_bdefdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString("pk_bdefdoc17");
        askbillItem.setPk_bdefdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString("pk_bdefdoc18");
        askbillItem.setPk_bdefdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString("pk_bdefdoc19");
        askbillItem.setPk_bdefdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString("pk_bdefdoc20");
        askbillItem.setPk_bdefdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        String creceiptareaid = rs.getString("creceiptareaid");
        askbillItem.setCreceiptareaid(creceiptareaid == null ? null
            : creceiptareaid.trim());
        String csendtypeid = rs.getString("csendtypeid");
        askbillItem.setCsendtypeid(csendtypeid == null ? null
            : csendtypeid.trim());
        // ts
        Object ts = rs.getObject("ts");
        askbillItem.setTs(ts == null ? null : ts.toString());

        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new AskbillItemBVO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public VendorInvPriceVO[] findPriceAuditItemsForVendorInvPrice(
      String SQLItems) throws SQLException {

    StringBuffer sb = new StringBuffer("");
    sb
        .append("select po_priceaudit.vpriceauditcode, po_priceaudit_bb1.pk_corp, po_priceaudit_bb1.cvendormangid, po_priceaudit_bb1.cvendorbaseid,po_priceaudit_bb1.nquoteprice, po_priceaudit_bb1.nquotetaxprice, po_priceaudit_bb1.dvaliddate, po_priceaudit_bb1.dinvaliddate,po_priceaudit_bb1.deliverdays,po_priceaudit_bb1.fpricetype,po_priceaudit_bb1.vquotebillcode,po_priceaudit_bb1.cquotebillid,po_priceaudit_bb1.cquotebill_bid,po_priceaudit_bb1.cquotebill_bb1id,po_priceaudit_bb1.border,po_priceaudit_bb1.iprior,po_priceaudit_bb1.nordernum,po_priceaudit_bb1.norderprice,po_priceaudit_bb1.nordertaxprice,po_priceaudit_bb1.norgmny,po_priceaudit_bb1.norgtaxmny,po_priceaudit_bb1.norgsummny,po_priceaudit_bb1.norderbill,po_priceaudit_b.cmangid,po_priceaudit_b.cbaseid,po_priceaudit.ccurrencytypeid,po_priceaudit_bb1.ntaxrate  ");
    sb.append(SQLItems);
    String sql = sb.toString();

    Vector v = new Vector();
    VendorInvPriceVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070205"));
      //
      while (rs.next()) {
        VendorInvPriceVO askbillItem = new VendorInvPriceVO();
        //
        String vpriceauditcode = rs.getString("vpriceauditcode");
        askbillItem.setVpriceauditcode(vpriceauditcode == null ? null
            : vpriceauditcode.trim());
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cvendormangid = rs.getString("cvendormangid");
        askbillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString("cvendorbaseid");
        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        Object nquoteprice = rs.getObject("nquoteprice");
        askbillItem.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.toString().trim()));
        //
        Object nquotetaxprice = rs.getObject("nquotetaxprice");
        askbillItem.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.toString().trim()));
        //
        String dvaliddate = rs.getString("dvaliddate");
        askbillItem.setDvaliddate(dvaliddate == null ? null
            : new UFDate(dvaliddate.trim(), false));
        //
        String dinvaliddate = rs.getString("dinvaliddate");
        askbillItem.setDinvaliddate(dinvaliddate == null ? null
            : new UFDate(dinvaliddate.trim(), false));
        // 交货期（天）
        Object days = rs.getObject("deliverdays");
        askbillItem.setDeliverdays(days == null ? null : new Integer(
            days.toString().trim()));
        Object vquotebillcode = rs.getObject("vquotebillcode");
        askbillItem.setVquotebillcode(vquotebillcode == null ? null
            : vquotebillcode.toString().trim());
        Object border = rs.getObject("border");
        String borderValue = null;
        if (border != null && border.toString().trim().length() > 0) {
          if ("Y".equals(border.toString().trim())) {
            borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4004070205",
                    "UPP4004070205-000014")/* @res "是" */;
          } else if ("N".equals(border.toString().trim())) {
            borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4004070205",
                    "UPP4004070205-000015")/* @res "否" */;
          }
        } else {
          borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("4004070205", "UPP4004070205-000015")/*
                                         * @res
                                         * "否"
                                         */;
        }
        askbillItem.setBorder(border == null ? null : borderValue);
        Object norderprice = rs.getObject("norderprice");
        askbillItem.setNorderprice(norderprice == null ? null
            : new UFDouble(norderprice.toString().trim()));
        Object nordertaxprice = rs.getObject("nordertaxprice");
        askbillItem.setNordertaxprice(nordertaxprice == null ? null
            : new UFDouble(nordertaxprice.toString().trim()));
        Object cmangid = rs.getObject("cmangid");
        askbillItem.setCmangid(cmangid == null ? null : cmangid
            .toString().trim());
        Object cbaseid = rs.getObject("cbaseid");
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid
            .toString().trim());
        askbillItem.setQuoteBillType(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4004070205",
                "UPP4004070205-000013")/* @res "价格审批单" */);
        String ccurrencytypeid = rs.getString("ccurrencytypeid");
        askbillItem.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        //
        Object ntaxrate = rs.getObject("ntaxrate");
        askbillItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(
            ntaxrate.toString().trim()));
        //采购优先级
        Object iPrior = rs.getObject("iprior");
        askbillItem.setIprior(iPrior == null ? null : new Integer(iPrior.toString().trim()));
        
        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new VendorInvPriceVO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String queryVpriceAuditCodeForReport(String cpriceauditid)
      throws SQLException {

    StringBuffer sb = new StringBuffer("");
    sb
        .append("select vpriceauditcode from po_priceaudit where cpriceauditid ='"
            + cpriceauditid + "' ");
    String sql = sb.toString();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String vpriceauditcode = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      if (rs.next()) {
        vpriceauditcode = rs.getString("vpriceauditcode");
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return vpriceauditcode;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public VendorInvPriceVO[] findAskItemsForVendorInvPrice(String SQLItems)
      throws SQLException {

    StringBuffer sb = new StringBuffer("");
    sb
        .append("select po_askbill.vaskbillcode, po_askbill_bb1.pk_corp, po_askbill_bb1.cvendormangid, po_askbill_bb1.cvendorbaseid,po_askbill_bb1.nquoteprice, po_askbill_bb1.nquotetaxprice, po_askbill_bb1.dvaliddate, po_askbill_bb1.dinvaliddate,po_askbill_bb1.deliverdays,po_askbill_b.cmangid,po_askbill_b.cbaseid,po_priceaudit_bb1.border,po_priceaudit_bb1.nordernum,po_priceaudit_bb1.norderprice,po_priceaudit_bb1.nordertaxprice,po_priceaudit_bb1.norgmny,po_priceaudit_bb1.norgtaxmny,po_priceaudit_bb1.norgsummny,po_priceaudit_bb1.cpriceauditid,po_askbill_bb1.ntaxrate,po_askbill.ccurrencytypeid,po_priceaudit_bb1.vpriceauditcode ,po_priceaudit_bb1.iprior ");
    sb.append(SQLItems);
    String sql = sb.toString();
    Vector v = new Vector();
    VendorInvPriceVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070205"));
      while (rs.next()) {
        VendorInvPriceVO askbillItem = new VendorInvPriceVO();
        //
        String vaskbillcode = rs.getString("vaskbillcode");
        askbillItem.setVquotebillcode(vaskbillcode == null ? null
            : vaskbillcode.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cvendormangid = rs.getString("cvendormangid");
        askbillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString("cvendorbaseid");
        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        String ccurrencytypeid = rs.getString("ccurrencytypeid");
        askbillItem.setCcurrencytypeid(ccurrencytypeid == null ? null
            : ccurrencytypeid.trim());
        //
        Object ntaxrate = rs.getObject("ntaxrate");
        askbillItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(
            ntaxrate.toString().trim()));
        Object nquoteprice = rs.getObject("nquoteprice");
        askbillItem.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.toString().trim()));
        //
        Object nquotetaxprice = rs.getObject("nquotetaxprice");
        askbillItem.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.toString().trim()));
        //
        String dvaliddate = rs.getString("dvaliddate");
        askbillItem.setDvaliddate(dvaliddate == null ? null
            : new UFDate(dvaliddate.trim(), false));
        //
        String dinvaliddate = rs.getString("dinvaliddate");
        askbillItem.setDinvaliddate(dinvaliddate == null ? null
            : new UFDate(dinvaliddate.trim(), false));
        // 交货期（天）
        Object days = rs.getObject("deliverdays");
        askbillItem.setDeliverdays(days == null ? null : new Integer(
            days.toString().trim()));
        String cmangid = rs.getString("cmangid");
        askbillItem.setCmangid(cmangid == null ? null : cmangid.trim());
        String cbaseid = rs.getString("cbaseid");
        askbillItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
        askbillItem.setQuoteBillType(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4004070205",
                "UPP4004070205-000012")/* @res "询报价单" */);
        Object border = rs.getObject("border");
        String borderValue = null;
        if (border != null && border.toString().trim().length() > 0) {
          if ("Y".equals(border.toString().trim())) {
            borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4004070205",
                    "UPP4004070205-000014")/* @res "是" */;
          } else if ("N".equals(border.toString().trim())) {
            borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4004070205",
                    "UPP4004070205-000015")/* @res "否" */;
          }
        } else {
          borderValue = nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("4004070205", "UPP4004070205-000015")/*
                                         * @res
                                         * "否"
                                         */;
        }
        askbillItem.setBorder(border == null ? null : borderValue);
        Object norderprice = rs.getObject("norderprice");
        askbillItem.setNorderprice(norderprice == null ? null
            : new UFDouble(norderprice.toString().trim()));
        Object nordertaxprice = rs.getObject("nordertaxprice");
        askbillItem.setNordertaxprice(nordertaxprice == null ? null
            : new UFDouble(nordertaxprice.toString().trim()));
//        String cpriceauditid = rs.getString("cpriceauditid");
//        if (cpriceauditid != null
//            && cpriceauditid.toString().trim().length() > 0) {
//          String vcode = queryVpriceAuditCodeForReport(cpriceauditid);
//          askbillItem.setVpriceauditcode(vcode);
//        }
        //采购优先级
        Object iPrior = rs.getObject("iprior");
        askbillItem.setIprior(iPrior == null ? null : new Integer(iPrior.toString().trim()));
        
        String vpriceauditcode = rs.getString("vpriceauditcode");
        askbillItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new VendorInvPriceVO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBb1VO[] findItemsBForHeaderPriceAudit(
      PriceauditHeaderVO[] heads, String SQLItems) throws SQLException {

    if (heads == null || heads.length <= 0)
      return null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit_bb1.cpriceaudit_bid,po_priceaudit_bb1.cpriceauditid,po_priceaudit_bb1.pk_corp,po_priceaudit_bb1.cvendormangid,po_priceaudit_bb1.cvendorbaseid,po_priceaudit_bb1.nquoteprice,po_priceaudit_bb1.nquotetaxprice,po_priceaudit_bb1.dvaliddate,po_priceaudit_bb1.dinvaliddate,po_priceaudit_bb1.deliverdays,po_priceaudit_bb1.fpricetype,po_priceaudit_bb1.vquotebillcode,po_priceaudit_bb1.cquotebillid,po_priceaudit_bb1.cquotebill_bid,po_priceaudit_bb1.cquotebill_bb1id,po_priceaudit_bb1.border,po_priceaudit_bb1.iprior,po_priceaudit_bb1.nordernum,po_priceaudit_bb1.norderprice,po_priceaudit_bb1.nordertaxprice,po_priceaudit_bb1.norgmny,po_priceaudit_bb1.norgtaxmny,po_priceaudit_bb1.norgsummny,po_priceaudit_bb1.norderbill,po_priceaudit_bb1.dr,po_priceaudit_bb1.ts,po_priceaudit_bb1.ntaxrate,po_priceaudit_bb1.vbdef1,po_priceaudit_bb1.vbdef2,po_priceaudit_bb1.vbdef3,po_priceaudit_bb1.vbdef4,po_priceaudit_bb1.vbdef5,po_priceaudit_bb1.vbdef6,po_priceaudit_bb1.vbdef7,po_priceaudit_bb1.vbdef8,po_priceaudit_bb1.vbdef9,po_priceaudit_bb1.vbdef10,po_priceaudit_bb1.vbdef11,po_priceaudit_bb1.vbdef12,po_priceaudit_bb1.vbdef13,po_priceaudit_bb1.vbdef14,po_priceaudit_bb1.vbdef15,po_priceaudit_bb1.vbdef16,po_priceaudit_bb1.vbdef17,po_priceaudit_bb1.vbdef18,po_priceaudit_bb1.vbdef19,po_priceaudit_bb1.vbdef20,po_priceaudit_bb1.pk_bdefdoc1,po_priceaudit_bb1.pk_bdefdoc2,po_priceaudit_bb1.pk_bdefdoc3,po_priceaudit_bb1.pk_bdefdoc4,po_priceaudit_bb1.pk_bdefdoc5,po_priceaudit_bb1.pk_bdefdoc6,po_priceaudit_bb1.pk_bdefdoc7,po_priceaudit_bb1.pk_bdefdoc8,po_priceaudit_bb1.pk_bdefdoc9,po_priceaudit_bb1.pk_bdefdoc10,po_priceaudit_bb1.pk_bdefdoc11,po_priceaudit_bb1.pk_bdefdoc12,po_priceaudit_bb1.pk_bdefdoc13,po_priceaudit_bb1.pk_bdefdoc14,po_priceaudit_bb1.pk_bdefdoc15,po_priceaudit_bb1.pk_bdefdoc16,po_priceaudit_bb1.pk_bdefdoc17,po_priceaudit_bb1.pk_bdefdoc18,po_priceaudit_bb1.pk_bdefdoc19,po_priceaudit_bb1.pk_bdefdoc20,po_priceaudit_bb1.creceiptareaid,po_priceaudit_bb1.csendtypeid,po_priceaudit_bb1.ngenct");
    sb.append(" from po_priceaudit_bb1 ");
    if (SQLItems != null && SQLItems.indexOf("po_priceaudit")!= -1){
    	sb.append(" left outer join po_priceaudit on po_priceaudit.cpriceauditid = po_priceaudit_bb1.cpriceauditid ");
    }
    if (SQLItems != null && SQLItems.indexOf("po_priceaudit_bb1")!= -1){
    	sb.append(" left outer join po_priceaudit_b on po_priceaudit_b.cpriceaudit_bid = po_priceaudit_bb1.cpriceaudit_bid ");
    }
    //2009/11/27 tianft 解决选择币种报“加载失败”问题
    if (SQLItems != null && (SQLItems.indexOf("bd_currtype.currtypecode")!= -1)){//币种
    	sb.append(" left outer join bd_currtype on bd_currtype.pk_currtype = po_priceaudit.ccurrencytypeid ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_deptdoc.deptcode")!= -1)){//采购部门
    	sb.append(" left outer join bd_deptdoc on po_priceaudit.cdeptid = bd_deptdoc.pk_deptdoc ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_psndoc.psncode")!= -1)){//业务员
    	sb.append(" left outer join bd_psndoc on po_priceaudit.cemployeeid = bd_psndoc.pk_psndoc ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_payterm.termid")!= -1)){//付款协议
    	sb.append(" left outer join bd_payterm on po_priceaudit.ctermprotocolid = bd_payterm.pk_payterm ");
    }
    if (SQLItems != null && (SQLItems.indexOf("bd_invbasdoc.invcode")!= -1)){// 存货编码
    	sb.append(" left outer join bd_invbasdoc ON po_priceaudit_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
    }
    sb.append("where po_priceaudit_bb1.dr = 0 and po_priceaudit_bb1.cpriceauditid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU97,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);
    if(SQLItems != null && SQLItems.trim().length() > 0){
     sb.append(SQLItems);
    }
    String sql = sb.toString();

    Vector v = new Vector();
    PriceauditBb1VO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        PriceauditBb1VO askbillItem = new PriceauditBb1VO();
        //
        String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
        askbillItem.setPrimaryKey(cpriceaudit_bb1id == null ? null
            : cpriceaudit_bb1id.trim());
        //
        String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
        askbillItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null
            : cpriceaudit_bid.trim());
        //
        String cpriceauditid = rs.getString("cpriceauditid");
        askbillItem.setCpriceauditid(cpriceauditid == null ? null
            : cpriceauditid.trim());
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cvendormangid = rs.getString("cvendormangid");
        askbillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString("cvendorbaseid");
        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        Object nquoteprice = rs.getObject("nquoteprice");
        askbillItem.setNquoteprice(nquoteprice == null ? null
            : new UFDouble(nquoteprice.toString().trim()));
        //
        Object nquotetaxprice = rs.getObject("nquotetaxprice");
        askbillItem.setNquotetaxprice(nquotetaxprice == null ? null
            : new UFDouble(nquotetaxprice.toString().trim()));
        //
        String dvaliddate = rs.getString("dvaliddate");
        askbillItem.setDvaliddate(dvaliddate == null ? null
            : new UFDate(dvaliddate.trim(), false));
        //
        String dinvaliddate = rs.getString("dinvaliddate");
        askbillItem.setDinvaliddate(dinvaliddate == null ? null
            : new UFDate(dinvaliddate.trim(), false));
        // 交货期（天）
        Object days = rs.getObject("deliverdays");
        askbillItem.setDeliverdays(days == null ? null : new Integer(
            days.toString().trim()));
        Object fpricetype = rs.getObject("fpricetype");
        askbillItem.setFpricetype(fpricetype == null ? null
            : fpricetype.toString().trim());
        Object vquotebillcode = rs.getObject("vquotebillcode");
        askbillItem.setVquotebillcode(vquotebillcode == null ? null
            : vquotebillcode.toString().trim());
        Object cquotebillid = rs.getObject("cquotebillid");
        askbillItem.setCquotebillid(cquotebillid == null ? null
            : cquotebillid.toString().trim());
        Object cquotebill_bid = rs.getObject("cquotebill_bid");
        askbillItem.setCquotebill_bid(cquotebill_bid == null ? null
            : cquotebill_bid.toString().trim());
        Object cquotebill_bb1id = rs.getObject("cquotebill_bb1id");
        askbillItem.setCquotebill_bb1id(cquotebill_bb1id == null ? null
            : cquotebill_bb1id.toString().trim());
        Object border = rs.getObject("border");
        askbillItem.setBorder(border == null ? null : new UFBoolean(
            border.toString().trim()));
        Object iprior = rs.getObject("iprior");
        askbillItem.setIprior(iprior == null ? null : iprior.toString()
            .trim());
        Object nordernum = rs.getObject("nordernum");
        askbillItem.setNordernum(nordernum == null ? null
            : new UFDouble(nordernum.toString().trim()));
        Object norderprice = rs.getObject("norderprice");
        askbillItem.setNorderprice(norderprice == null ? null
            : new UFDouble(norderprice.toString().trim()));
        Object nordertaxprice = rs.getObject("nordertaxprice");
        askbillItem.setNordertaxprice(nordertaxprice == null ? null
            : new UFDouble(nordertaxprice.toString().trim()));
        Object norgmny = rs.getObject("norgmny");
        askbillItem.setNorgmny(norgmny == null ? null : new UFDouble(
            norgmny.toString().trim()));
        Object norgtaxmny = rs.getObject("norgtaxmny");
        askbillItem.setNorgtaxmny(norgtaxmny == null ? null
            : new UFDouble(norgtaxmny.toString().trim()));
        Object norgsummny = rs.getObject("norgsummny");
        askbillItem.setNorgsummny(norgsummny == null ? null
            : new UFDouble(norgsummny.toString().trim()));
        Object norderbill = rs.getObject("norderbill");
        askbillItem.setNorderbill(norderbill == null ? null
            : new Integer(norderbill.toString().trim()));
      //税率
        Object ntaxrate = rs.getObject("ntaxrate");
        askbillItem.setNtaxrate(ntaxrate == null ? null: new UFDouble(ntaxrate.toString().trim()));
        String vdef1 = rs.getString("vbdef1");
        askbillItem.setVbdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString("vbdef2");
        askbillItem.setVbdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString("vbdef3");
        askbillItem.setVbdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString("vbdef4");
        askbillItem.setVbdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString("vbdef5");
        askbillItem.setVbdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString("vbdef6");
        askbillItem.setVbdef6(vdef6 == null ? null : vdef6.trim());
        
        String vdef7 = rs.getString("vbdef7");
        askbillItem.setVbdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString("vbdef8");
        askbillItem.setVbdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString("vbdef9");
        askbillItem.setVbdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString("vbdef10");
        askbillItem.setVbdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString("vbdef11");
        askbillItem.setVbdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString("vbdef12");
        askbillItem.setVbdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString("vbdef13");
        askbillItem.setVbdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString("vbdef14");
        askbillItem.setVbdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString("vbdef15");
        askbillItem.setVbdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString("vbdef16");
        askbillItem.setVbdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString("vbdef17");
        askbillItem.setVbdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString("vbdef18");
        askbillItem.setVbdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString("vbdef19");
        askbillItem.setVbdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString("vbdef20");
        askbillItem.setVbdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString("pk_bdefdoc1");
        askbillItem.setPk_bdefdoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString("pk_bdefdoc2");
        askbillItem.setPk_bdefdoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString("pk_bdefdoc3");
        askbillItem.setPk_bdefdoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString("pk_bdefdoc4");
        askbillItem.setPk_bdefdoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString("pk_bdefdoc5");
        askbillItem.setPk_bdefdoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString("pk_bdefdoc6");
        askbillItem.setPk_bdefdoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString("pk_bdefdoc7");
        askbillItem.setPk_bdefdoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString("pk_bdefdoc8");
        askbillItem.setPk_bdefdoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString("pk_bdefdoc9");
        askbillItem.setPk_bdefdoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString("pk_bdefdoc10");
        askbillItem.setPk_bdefdoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString("pk_bdefdoc11");
        askbillItem.setPk_bdefdoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString("pk_bdefdoc12");
        askbillItem.setPk_bdefdoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString("pk_bdefdoc13");
        askbillItem.setPk_bdefdoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString("pk_bdefdoc14");
        askbillItem.setPk_bdefdoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString("pk_bdefdoc15");
        askbillItem.setPk_bdefdoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString("pk_bdefdoc16");
        askbillItem.setPk_bdefdoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString("pk_bdefdoc17");
        askbillItem.setPk_bdefdoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString("pk_bdefdoc18");
        askbillItem.setPk_bdefdoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString("pk_bdefdoc19");
        askbillItem.setPk_bdefdoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString("pk_bdefdoc20");
        askbillItem.setPk_bdefdoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());
        String dr = rs.getString("dr");
        askbillItem.setDr(dr == null ? null : new Integer(dr.trim()));
        String ts = rs.getString("ts");
        askbillItem.setTs(ts == null ? null : ts.trim());
        String creceiptareaid = rs.getString("creceiptareaid");
        askbillItem.setCreceiptareaid(creceiptareaid == null ? null
                : creceiptareaid.trim());
        String csendtypeid = rs.getString("csendtypeid");
        askbillItem.setCsendtypeid(csendtypeid == null ? null
                : csendtypeid.trim());
        int igenct = rs.getInt("ngenct");
        askbillItem.setNgenct(new Integer(igenct));
        
        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new PriceauditBb1VO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 通过主键查找一个VO对象。
   * 
   * 创建日期：(2001-09-24-19)
   * 
   * @return nc.vo.pp.ask.AskbillItemVO
   * @param key
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVendorVO[] findItemsVendorForHeaderMyArray(
      AskbillHeaderVO[] heads, String SQLItems) throws SQLException {

    if (heads == null || heads.length <= 0)
      return null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select caskbill_b1id, caskbillid, pk_corp, cvendormangid, cvendorbaseid ");
    sb.append("from po_askbill_b1 ");
    sb.append("where dr = 0 and caskbillid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU97,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);
    if(SQLItems != null && SQLItems.trim().length() > 0){
     sb.append(SQLItems);
    }
    String sql = sb.toString();

    Vector v = new Vector();
    AskbillItemVendorVO[] askbillItems = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        AskbillItemVendorVO askbillItem = new AskbillItemVendorVO();
        //
        String caskbill_b1id = rs.getString("caskbill_b1id");
        askbillItem.setCaskbill_b1id(caskbill_b1id == null ? null
            : caskbill_b1id.trim());
        //
        String caskbillid = rs.getString("caskbillid");
        askbillItem.setCaskbillid(caskbillid == null ? null
            : caskbillid.trim());
        //
        String pk_corp = rs.getString("pk_corp");
        askbillItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
        //
        String cvendormangid = rs.getString("cvendormangid");
        askbillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString("cvendorbaseid");
        askbillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());

        v.addElement(askbillItem);
      }
      // 设置表体
      if (v.size() > 0) {
        askbillItems = new AskbillItemVendorVO[v.size()];
        v.copyInto(askbillItems);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 返回指定主键的请购单体(要求:dr=0) 注意：本表头的所有表体全部删除的情况不存在(由表头的查询条件保证) 创建日期：(2001-10-27
   * 17:09:39)
   * 
   * @return nc.vo.pr.pray.askbillHeaderItemVO[]
   * @param caskbillHeaderid
   *            java.lang.String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PraybillItemVO[] findItemsForPrayHeaderMy(String cpraybillid0)
      throws java.sql.SQLException {
    if (cpraybillid0 == null)
      return null;
    if ("".equals(cpraybillid0.trim()))
      return null;
    String sql = "select po_praybill_b.cpraybill_bid, po_praybill_b.cpraybillid, po_praybill_b.pk_corp, po_praybill_b.cpurorganization, po_praybill_b.cmangid, po_praybill_b.cbaseid, po_praybill_b.npraynum, po_praybill_b.cassistunit, po_praybill_b.nassistnum, po_praybill_b.nsuggestprice, po_praybill_b.cvendormangid, po_praybill_b.cvendorbaseid, po_praybill_b.ddemanddate, po_praybill_b.dsuggestdate, po_praybill_b.cwarehouseid, po_praybill_b.naccumulatenum, po_praybill_b.cprojectid, po_praybill_b.cprojectphaseid, po_praybill_b.csourcebilltype, po_praybill_b.csourcebillid, po_praybill_b.csourcebillrowid, po_praybill_b.vmemo, po_praybill_b.vfree1, po_praybill_b.vfree2, po_praybill_b.vfree3, po_praybill_b.vfree4, po_praybill_b.vfree5, po_praybill_b.vdef1, po_praybill_b.vdef2, po_praybill_b.vdef3, po_praybill_b.vdef4, po_praybill_b.vdef5, po_praybill_b.vdef6,po_praybill_b.crowno,po_praybill_b.vdef7, po_praybill_b.vdef8, po_praybill_b.vdef9, po_praybill_b.vdef10,po_praybill_b.vdef11, po_praybill_b.vdef12, po_praybill_b.vdef13, po_praybill_b.vdef14, po_praybill_b.vdef15, po_praybill_b.vdef16, po_praybill_b.vdef17, po_praybill_b.vdef18, po_praybill_b.vdef19, po_praybill_b.vdef20,po_praybill_b.pk_defdoc1,po_praybill_b.pk_defdoc2,po_praybill_b.pk_defdoc3,po_praybill_b.pk_defdoc4,po_praybill_b.pk_defdoc5,po_praybill_b.pk_defdoc6,po_praybill_b.pk_defdoc7,po_praybill_b.pk_defdoc8,po_praybill_b.pk_defdoc9,po_praybill_b.pk_defdoc10,po_praybill_b.pk_defdoc11,po_praybill_b.pk_defdoc12,po_praybill_b.pk_defdoc13,po_praybill_b.pk_defdoc14,po_praybill_b.pk_defdoc15,po_praybill_b.pk_defdoc16,po_praybill_b.pk_defdoc17,po_praybill_b.pk_defdoc18,po_praybill_b.pk_defdoc19,po_praybill_b.pk_defdoc20 ";
    sql += "from po_praybill_b ";
    sql += "where cpraybillid = ? ";
    sql += "and dr = 0 ";

    PraybillItemVO[] praybillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cpraybillid0);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        PraybillItemVO praybillItem = new PraybillItemVO();
        //
        String cpraybill_bid = rs.getString(1);
        praybillItem.setCpraybill_bid(cpraybill_bid == null ? null
            : cpraybill_bid.trim());
        //
        String cpraybillid = rs.getString(2);
        praybillItem.setCpraybillid(cpraybillid == null ? null
            : cpraybillid.trim());
        //
        String pk_corp_temp = rs.getString(3);
        praybillItem.setPk_corp(pk_corp_temp == null ? null
            : pk_corp_temp.trim());
        //
        String cpurorganization = rs.getString(4);
        praybillItem
            .setCpurorganization(cpurorganization == null ? null
                : cpurorganization.trim());
        //
        String cmangid = rs.getString(5);
        praybillItem
            .setCmangid(cmangid == null ? null : cmangid.trim());
        //
        String cbaseid = rs.getString(6);
        praybillItem
            .setCbaseid(cbaseid == null ? null : cbaseid.trim());
        //
        Object npraynum = rs.getObject(7);
        praybillItem.setNpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
            npraynum.toString().trim()));
        praybillItem.setNoldpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
                npraynum.toString().trim()));
        //
        String cassistunit = rs.getString(8);
        praybillItem.setCassistunit(cassistunit == null ? null
            : cassistunit.trim());
        //
        Object nassistnum = rs.getObject(9);
        praybillItem.setNassistnum((nassistnum == null || "".equals(nassistnum
            .toString().trim())) ? null : new UFDouble(
            nassistnum.toString().trim()));
        //
        Object nsuggestprice = rs.getObject(10);
        praybillItem
            .setNsuggestprice((nsuggestprice == null || "".equals(nsuggestprice
                .toString().trim())) ? null
                : new UFDouble(nsuggestprice.toString().trim()));
        //
        String cvendormangid = rs.getString(11);
        praybillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString(12);
        praybillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        String ddemanddate = rs.getString(13);
        praybillItem.setDdemanddate(ddemanddate == null ? null
            : new UFDate(ddemanddate.trim(), false));
        //
        String dsuggestdate = rs.getString(14);
        praybillItem.setDsuggestdate(dsuggestdate == null ? null
            : new UFDate(dsuggestdate.trim(), false));
        //
        String cwarehouseid = rs.getString(15);
        praybillItem.setCwarehouseid(cwarehouseid == null ? null
            : cwarehouseid.trim());
        //
        Object naccumulatenum = rs.getObject(16);
        praybillItem
            .setNaccumulatenum((naccumulatenum == null || "".equals(naccumulatenum
                .toString().trim())) ? null
                : new UFDouble(naccumulatenum.toString().trim()));
        //
        String cprojectid = rs.getString(17);
        praybillItem.setCprojectid(cprojectid == null ? null
            : cprojectid.trim());
        //
        String cprojectphaseid = rs.getString(18);
        praybillItem.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        //
        String csourcebilltype = rs.getString(19);
        praybillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        //
        String csourcebillid = rs.getString(20);
        praybillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        //
        String csourcebillrowid = rs.getString(21);
        praybillItem
            .setCsourcebillrowid(csourcebillrowid == null ? null
                : csourcebillrowid.trim());
        //
        String vmemo = rs.getString(22);
        praybillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vfree1 = rs.getString(23);
        praybillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString(24);
        praybillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString(25);
        praybillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString(26);
        praybillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString(27);
        praybillItem.setVfree5(vfree5 == null ? null : vfree5.trim());
        //
        String vdef1 = rs.getString(28);
        praybillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString(29);
        praybillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString(30);
        praybillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString(31);
        praybillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString(32);
        praybillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString(33);
        praybillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        // crowno
        String crowno = rs.getString(34);
        praybillItem.setRowno(crowno == null ? null : crowno.trim());
        // // vdef7 :
        String vdef7 = rs.getString(35);
        praybillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(36);
        praybillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(37);
        praybillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(38);
        praybillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(39);
        praybillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(40);
        praybillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(41);
        praybillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(42);
        praybillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(43);
        praybillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(44);
        praybillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(45);
        praybillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(46);
        praybillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(47);
        praybillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(48);
        praybillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(49);
        praybillItem.setPKDefDoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(50);
        praybillItem.setPKDefDoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(51);
        praybillItem.setPKDefDoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(52);
        praybillItem.setPKDefDoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(53);
        praybillItem.setPKDefDoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(54);
        praybillItem.setPKDefDoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(55);
        praybillItem.setPKDefDoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(56);
        praybillItem.setPKDefDoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(57);
        praybillItem.setPKDefDoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(58);
        praybillItem.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(59);
        praybillItem.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(60);
        praybillItem.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(61);
        praybillItem.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(62);
        praybillItem.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(63);
        praybillItem.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(64);
        praybillItem.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(65);
        praybillItem.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(66);
        praybillItem.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(67);
        praybillItem.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(68);
        praybillItem.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

        v.addElement(praybillItem);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    praybillItems = new PraybillItemVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(praybillItems);
    }
    return praybillItems;
  }

  /**
   * 返回指定主键的请购单体(要求:dr=0) 注意：本表头的所有表体全部删除的情况不存在(由表头的查询条件保证) 创建日期：(2001-10-27
   * 17:09:39)
   * 
   * @return nc.vo.pr.pray.PraybillItemVO[]
   * @param cpraybillid
   *            java.lang.String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PraybillVO[] findItemsForPrayHeaderMyArray(PraybillHeaderVO[] heads,
      String strSQL, int genType) throws java.sql.SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口： beforeCallMethod("nc.bs.pr.pray.PraybillDMO",
    // "findItemsForPrayHeaderMy", new Object[] { heads });
    /** ********************************************************** */
    if (heads == null)
      return null;
    if (heads.length <= 0)
      return null;
    String cpraybillid0 = null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select  po_praybill_b.cpraybill_bid, po_praybill_b.cpraybillid, po_praybill_b.pk_corp, po_praybill_b.cpurorganization, po_praybill_b.cmangid, po_praybill_b.cbaseid, po_praybill_b.npraynum, po_praybill_b.cassistunit, po_praybill_b.nassistnum, po_praybill_b.nsuggestprice, po_praybill_b.cvendormangid, po_praybill_b.cvendorbaseid, po_praybill_b.ddemanddate, po_praybill_b.dsuggestdate, po_praybill_b.cwarehouseid, po_praybill_b.naccumulatenum, po_praybill_b.cprojectid, po_praybill_b.cprojectphaseid, po_praybill_b.csourcebilltype, po_praybill_b.csourcebillid, po_praybill_b.csourcebillrowid, po_praybill_b.vmemo, po_praybill_b.vfree1, po_praybill_b.vfree2, po_praybill_b.vfree3, po_praybill_b.vfree4, po_praybill_b.vfree5, po_praybill_b.vdef1, po_praybill_b.vdef2, po_praybill_b.vdef3, po_praybill_b.vdef4, po_praybill_b.vdef5, po_praybill_b.vdef6, po_praybill_b.crowno,po_praybill_b.vdef7, po_praybill_b.vdef8, po_praybill_b.vdef9, po_praybill_b.vdef10,po_praybill_b.vdef11, po_praybill_b.vdef12, po_praybill_b.vdef13, po_praybill_b.vdef14, po_praybill_b.vdef15, po_praybill_b.vdef16, po_praybill_b.vdef17, po_praybill_b.vdef18, po_praybill_b.vdef19, po_praybill_b.vdef20,po_praybill_b.pk_defdoc1,po_praybill_b.pk_defdoc2,po_praybill_b.pk_defdoc3,po_praybill_b.pk_defdoc4,po_praybill_b.pk_defdoc5,po_praybill_b.pk_defdoc6,po_praybill_b.pk_defdoc7,po_praybill_b.pk_defdoc8,po_praybill_b.pk_defdoc9,po_praybill_b.pk_defdoc10,po_praybill_b.pk_defdoc11,po_praybill_b.pk_defdoc12,po_praybill_b.pk_defdoc13,po_praybill_b.pk_defdoc14,po_praybill_b.pk_defdoc15,po_praybill_b.pk_defdoc16,po_praybill_b.pk_defdoc17,po_praybill_b.pk_defdoc18,po_praybill_b.pk_defdoc19,po_praybill_b.pk_defdoc20,po_praybill_b.ts,po_praybill_b.nquotebill,po_praybill_b.cemployeeid ,po_praybill_b.pk_reqcorp,po_praybill_b.pk_purcorp,po_praybill_b.pk_reqstoorg ");
    sb.append(strSQL);
    sb.append(" ");
    // 拼接表头ID查询条件
    sb.append("and po_praybill_b.cpraybillid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU98,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet + " ");
    sb.append("order by po_praybill.cpraybillid ");
    String sql = sb.toString();
    //
    PraybillVO[] praybills = null;
    PraybillItemVO[] praybillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      // v.removeAllElements();
      while (rs.next()) {
        PraybillItemVO praybillItem = new PraybillItemVO();
        //
        String cpraybill_bid = rs.getString(1);
        praybillItem.setCpraybill_bid(cpraybill_bid == null ? null
            : cpraybill_bid.trim());
        //
        String cpraybillid = rs.getString(2);
        praybillItem.setCpraybillid(cpraybillid == null ? null
            : cpraybillid.trim());
        //
        String pk_corp_temp = rs.getString(3);
        praybillItem.setPk_corp(pk_corp_temp == null ? null
            : pk_corp_temp.trim());
        //
        String cpurorganization = rs.getString(4);
        praybillItem
            .setCpurorganization(cpurorganization == null ? null
                : cpurorganization.trim());
        //
        String cmangid = rs.getString(5);
        praybillItem
            .setCmangid(cmangid == null ? null : cmangid.trim());
        //
        String cbaseid = rs.getString(6);
        praybillItem
            .setCbaseid(cbaseid == null ? null : cbaseid.trim());
        //
        Object npraynum = rs.getObject(7);
        praybillItem.setNpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
            npraynum.toString().trim()));
        praybillItem.setNoldpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
                npraynum.toString().trim()));
        //
        String cassistunit = rs.getString(8);
        praybillItem.setCassistunit(cassistunit == null ? null
            : cassistunit.trim());
        //
        Object nassistnum = rs.getObject(9);
        praybillItem.setNassistnum((nassistnum == null || "".equals(nassistnum
            .toString().trim())) ? null : new UFDouble(
            nassistnum.toString().trim()));
        //
        Object nsuggestprice = rs.getObject(10);
        praybillItem
            .setNsuggestprice((nsuggestprice == null || "".equals(nsuggestprice
                .toString().trim())) ? null
                : new UFDouble(nsuggestprice.toString().trim()));
        //
        String cvendormangid = rs.getString(11);
        praybillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString(12);
        praybillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        String ddemanddate = rs.getString(13);
        praybillItem.setDdemanddate(ddemanddate == null ? null
            : new UFDate(ddemanddate.trim(), false));
        //
        String dsuggestdate = rs.getString(14);
        praybillItem.setDsuggestdate(dsuggestdate == null ? null
            : new UFDate(dsuggestdate.trim(), false));
        //
        String cwarehouseid = rs.getString(15);
        praybillItem.setCwarehouseid(cwarehouseid == null ? null
            : cwarehouseid.trim());
        //
        Object naccumulatenum = rs.getObject(16);
        praybillItem
            .setNaccumulatenum((naccumulatenum == null || "".equals(naccumulatenum
                .toString().trim())) ? null
                : new UFDouble(naccumulatenum.toString().trim()));
        //
        String cprojectid = rs.getString(17);
        praybillItem.setCprojectid(cprojectid == null ? null
            : cprojectid.trim());
        //
        String cprojectphaseid = rs.getString(18);
        praybillItem.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        //
        String csourcebilltype = rs.getString(19);
        praybillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        //
        String csourcebillid = rs.getString(20);
        praybillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        //
        String csourcebillrowid = rs.getString(21);
        praybillItem
            .setCsourcebillrowid(csourcebillrowid == null ? null
                : csourcebillrowid.trim());
        //
        String vmemo = rs.getString(22);
        praybillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vfree1 = rs.getString(23);
        praybillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString(24);
        praybillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString(25);
        praybillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString(26);
        praybillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString(27);
        praybillItem.setVfree5(vfree5 == null ? null : vfree5.trim());
        //
        String vdef1 = rs.getString(28);
        praybillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString(29);
        praybillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString(30);
        praybillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString(31);
        praybillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString(32);
        praybillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString(33);
        praybillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        // crowno
        String crowno = rs.getString(34);
        praybillItem.setRowno(crowno == null ? null : crowno.trim());
        // // vdef7 :
        String vdef7 = rs.getString(35);
        praybillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(36);
        praybillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(37);
        praybillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(38);
        praybillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(39);
        praybillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(40);
        praybillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(41);
        praybillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(42);
        praybillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(43);
        praybillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(44);
        praybillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(45);
        praybillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(46);
        praybillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(47);
        praybillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(48);
        praybillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(49);
        praybillItem.setPKDefDoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(50);
        praybillItem.setPKDefDoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(51);
        praybillItem.setPKDefDoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(52);
        praybillItem.setPKDefDoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(53);
        praybillItem.setPKDefDoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(54);
        praybillItem.setPKDefDoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(55);
        praybillItem.setPKDefDoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(56);
        praybillItem.setPKDefDoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(57);
        praybillItem.setPKDefDoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(58);
        praybillItem.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(59);
        praybillItem.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(60);
        praybillItem.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(61);
        praybillItem.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(62);
        praybillItem.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(63);
        praybillItem.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(64);
        praybillItem.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(65);
        praybillItem.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(66);
        praybillItem.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(67);
        praybillItem.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(68);
        praybillItem.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

        // // pk_defdoc20 :
        String bTs = rs.getString(69);
        praybillItem.setTs(bTs == null ? null : bTs.trim());
        // nquotebill
        Object nquotebill = rs.getString(70);
        ;
        praybillItem.setNquotebill(nquotebill == null ? null
            : new Integer(nquotebill.toString()));

        // //pk_defdoc20 :
        String cemployeeid = rs.getString(71);
        praybillItem.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        String reqcorp = rs.getString(72);
        praybillItem.setPk_reqcorp(reqcorp == null ? null
            : reqcorp.trim());
        String purcorp = rs.getString(73);
        praybillItem.setPk_purcorp(purcorp == null ? null
            : purcorp.trim());
        String pk_reqstoorg = rs.getString(74);
        praybillItem.setPk_reqstoorg(pk_reqstoorg);
//        //计算换算率
//        if(praybillItem.getNassistnum() != null){
//        	praybillItem.setNexchangerate(praybillItem.getNpraynum().div(praybillItem.getNassistnum()));
//        } 
        
        // 生成方式处理
        if (genType == 0) {// 否
          if (praybillItem.getNquotebill() == null
              || (praybillItem.getNquotebill() != null && praybillItem
                  .getNquotebill().intValue() == 0)) {
            v.addElement(praybillItem);
          }
        } else if (genType == 1) {// 是
          if (praybillItem.getNquotebill() != null
              && praybillItem.getNquotebill().intValue() > 0) {
            v.addElement(praybillItem);
          }
        } else if (genType == 2) {// 全部
          v.addElement(praybillItem);
        }
      }
      if (v.size() > 0) {
        praybillItems = new PraybillItemVO[v.size()];
        v.copyInto(praybillItems);
        // 拼接单据
        Hashtable h = nc.bs.pu.pub.PubDMO.getHashBodyByHeadKey(
            praybillItems, "cpraybillid");
        praybills = new PraybillVO[heads.length];
        PraybillItemVO[] praybillItem = null;
        for (int i = 0; i < heads.length; i++) {
          // 设置单据头
          praybills[i] = new PraybillVO();
          praybills[i].setParentVO(heads[i]);
          // 设置单据体
          cpraybillid0 = heads[i].getCpraybillid();
          if (cpraybillid0 == null || "".equals(cpraybillid0.trim()))
            continue;
          praybillItem = (PraybillItemVO[]) h.get(cpraybillid0);
          praybillItem = new PraybillImpl().getItemWithMny(praybillItem);
          praybills[i].setChildrenVO(praybillItem);
        }
      }

    } catch(Exception es){
    	throw new SQLException(es.getMessage());
    }finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pr.pray.PraybillDMO",
        "findItemsForPrayHeaderMy", new Object[] { heads });
    /** ********************************************************** */

    return praybills;
  }

  /**
   * 返回指定主键的请购单体(要求:dr=0) 注意：本表头的所有表体全部删除的情况不存在(由表头的查询条件保证) 创建日期：(2001-10-27
   * 17:09:39)
   * 
   * @return nc.vo.pr.pray.PraybillItemVO[]
   * @param cpraybillid
   *            java.lang.String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PraybillVO[] findItemsForPrayHeaderMyArrayForPriceAudit(
      PraybillHeaderVO[] heads, String strSQL)
      throws java.sql.SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口： beforeCallMethod("nc.bs.pr.pray.PraybillDMO",
    // "findItemsForPrayHeaderMy", new Object[] { heads });
    /** ********************************************************** */
    if (heads == null)
      return null;
    if (heads.length <= 0)
      return null;
    String cpraybillid0 = null;
    StringBuffer sb = new StringBuffer("");
    sb
        .append("select po_praybill_b.cpraybill_bid, po_praybill_b.cpraybillid, po_praybill_b.pk_corp, po_praybill_b.cpurorganization, po_praybill_b.cmangid, po_praybill_b.cbaseid, po_praybill_b.npraynum, po_praybill_b.cassistunit, po_praybill_b.nassistnum, po_praybill_b.nsuggestprice, po_praybill_b.cvendormangid, po_praybill_b.cvendorbaseid, po_praybill_b.ddemanddate, po_praybill_b.dsuggestdate, po_praybill_b.cwarehouseid, po_praybill_b.naccumulatenum, po_praybill_b.cprojectid, po_praybill_b.cprojectphaseid, po_praybill_b.csourcebilltype, po_praybill_b.csourcebillid, po_praybill_b.csourcebillrowid, po_praybill_b.vmemo, po_praybill_b.vfree1, po_praybill_b.vfree2, po_praybill_b.vfree3, po_praybill_b.vfree4, po_praybill_b.vfree5, po_praybill_b.vdef1, po_praybill_b.vdef2, po_praybill_b.vdef3, po_praybill_b.vdef4, po_praybill_b.vdef5, po_praybill_b.vdef6, po_praybill_b.crowno,po_praybill_b.vdef7, po_praybill_b.vdef8, po_praybill_b.vdef9, po_praybill_b.vdef10,po_praybill_b.vdef11, po_praybill_b.vdef12, po_praybill_b.vdef13, po_praybill_b.vdef14, po_praybill_b.vdef15, po_praybill_b.vdef16, po_praybill_b.vdef17, po_praybill_b.vdef18, po_praybill_b.vdef19, po_praybill_b.vdef20,po_praybill_b.pk_defdoc1,po_praybill_b.pk_defdoc2,po_praybill_b.pk_defdoc3,po_praybill_b.pk_defdoc4,po_praybill_b.pk_defdoc5,po_praybill_b.pk_defdoc6,po_praybill_b.pk_defdoc7,po_praybill_b.pk_defdoc8,po_praybill_b.pk_defdoc9,po_praybill_b.pk_defdoc10,po_praybill_b.pk_defdoc11,po_praybill_b.pk_defdoc12,po_praybill_b.pk_defdoc13,po_praybill_b.pk_defdoc14,po_praybill_b.pk_defdoc15,po_praybill_b.pk_defdoc16,po_praybill_b.pk_defdoc17,po_praybill_b.pk_defdoc18,po_praybill_b.pk_defdoc19,po_praybill_b.pk_defdoc20,po_praybill_b.ts,po_praybill_b.npriceauditbill,po_praybill_b.cemployeeid ,po_praybill_b.pk_reqcorp,po_praybill_b.pk_purcorp,po_praybill_b.pk_reqstoorg,po_praybill_b.cbiztype,po_praybill_b.ngenct ");
    
    sb.append(strSQL);
    sb.append(" ");
    // 拼接表头ID查询条件
    sb.append("and po_praybill_b.cpraybillid in ");

    ArrayList listDisId = new ArrayList();
    int iLen = heads.length;
    for (int i = 0; i < iLen; i++) {
      if (heads[i] == null || heads[i].getPrimaryKey() == null)
        continue;
      listDisId.add(heads[i].getPrimaryKey());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU98,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet + " ");
    
    sb.append("order by po_praybill.cpraybillid ");
    String sql = sb.toString();
    //
    PraybillVO[] praybills = null;
    PraybillItemVO[] praybillItems = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      // v.removeAllElements();
      while (rs.next()) {
        PraybillItemVO praybillItem = new PraybillItemVO();
        //
        String cpraybill_bid = rs.getString(1);
        praybillItem.setCpraybill_bid(cpraybill_bid == null ? null
            : cpraybill_bid.trim());
        
        //
        String cpraybillid = rs.getString(2);
        praybillItem.setCpraybillid(cpraybillid == null ? null
            : cpraybillid.trim());
        //
        String pk_corp_temp = rs.getString(3);
        praybillItem.setPk_corp(pk_corp_temp == null ? null
            : pk_corp_temp.trim());
        //
        String cpurorganization = rs.getString(4);
        praybillItem
            .setCpurorganization(cpurorganization == null ? null
                : cpurorganization.trim());
        //
        String cmangid = rs.getString(5);
        praybillItem
            .setCmangid(cmangid == null ? null : cmangid.trim());
        //
        String cbaseid = rs.getString(6);
        praybillItem
            .setCbaseid(cbaseid == null ? null : cbaseid.trim());
        //
        Object npraynum = rs.getObject(7);
        praybillItem.setNpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
            npraynum.toString().trim()));
        
        //zhufeng add
        //UFDouble nnum = PuPubVO.getUFDouble_NullAsZero(rs.getObject(77));
        UFDouble nnum = findItemSpareNumber(cpraybill_bid);
        UFDouble npraynumtemp = PuPubVO.getUFDouble_NullAsZero(npraynum);
        if(nnum.compareTo(npraynumtemp)<0)
        	praybillItem.setNpraynum(npraynumtemp.sub(nnum));
        else
        	continue;
        //zhufeng add
        
        praybillItem.setNoldpraynum((npraynum == null || "".equals(npraynum
            .toString().trim())) ? null : new UFDouble(
                npraynum.toString().trim()));
        //
        String cassistunit = rs.getString(8);
        praybillItem.setCassistunit(cassistunit == null ? null
            : cassistunit.trim());
        //
        Object nassistnum = rs.getObject(9);
        praybillItem.setNassistnum((nassistnum == null || "".equals(nassistnum
            .toString().trim())) ? null : new UFDouble(
            nassistnum.toString().trim()));
        //
        Object nsuggestprice = rs.getObject(10);
        praybillItem
            .setNsuggestprice((nsuggestprice == null || "".equals(nsuggestprice
                .toString().trim())) ? null
                : new UFDouble(nsuggestprice.toString().trim()));
        //
        String cvendormangid = rs.getString(11);
        praybillItem.setCvendormangid(cvendormangid == null ? null
            : cvendormangid.trim());
        //
        String cvendorbaseid = rs.getString(12);
        praybillItem.setCvendorbaseid(cvendorbaseid == null ? null
            : cvendorbaseid.trim());
        //
        String ddemanddate = rs.getString(13);
        praybillItem.setDdemanddate(ddemanddate == null ? null
            : new UFDate(ddemanddate.trim(), false));
        //
        String dsuggestdate = rs.getString(14);
        praybillItem.setDsuggestdate(dsuggestdate == null ? null
            : new UFDate(dsuggestdate.trim(), false));
        //
        String cwarehouseid = rs.getString(15);
        praybillItem.setCwarehouseid(cwarehouseid == null ? null
            : cwarehouseid.trim());
        //
        Object naccumulatenum = rs.getObject(16);
        praybillItem
            .setNaccumulatenum((naccumulatenum == null || "".equals(naccumulatenum
                .toString().trim())) ? null
                : new UFDouble(naccumulatenum.toString().trim()));
        //
        String cprojectid = rs.getString(17);
        praybillItem.setCprojectid(cprojectid == null ? null
            : cprojectid.trim());
        //
        String cprojectphaseid = rs.getString(18);
        praybillItem.setCprojectphaseid(cprojectphaseid == null ? null
            : cprojectphaseid.trim());
        //
        String csourcebilltype = rs.getString(19);
        praybillItem.setCsourcebilltype(csourcebilltype == null ? null
            : csourcebilltype.trim());
        //
        String csourcebillid = rs.getString(20);
        praybillItem.setCsourcebillid(csourcebillid == null ? null
            : csourcebillid.trim());
        //
        String csourcebillrowid = rs.getString(21);
        praybillItem
            .setCsourcebillrowid(csourcebillrowid == null ? null
                : csourcebillrowid.trim());
        //
        String vmemo = rs.getString(22);
        praybillItem.setVmemo(vmemo == null ? null : vmemo.trim());
        //
        String vfree1 = rs.getString(23);
        praybillItem.setVfree1(vfree1 == null ? null : vfree1.trim());
        //
        String vfree2 = rs.getString(24);
        praybillItem.setVfree2(vfree2 == null ? null : vfree2.trim());
        //
        String vfree3 = rs.getString(25);
        praybillItem.setVfree3(vfree3 == null ? null : vfree3.trim());
        //
        String vfree4 = rs.getString(26);
        praybillItem.setVfree4(vfree4 == null ? null : vfree4.trim());
        //
        String vfree5 = rs.getString(27);
        praybillItem.setVfree5(vfree5 == null ? null : vfree5.trim());
        //
        String vdef1 = rs.getString(28);
        praybillItem.setVdef1(vdef1 == null ? null : vdef1.trim());
        //
        String vdef2 = rs.getString(29);
        praybillItem.setVdef2(vdef2 == null ? null : vdef2.trim());
        //
        String vdef3 = rs.getString(30);
        praybillItem.setVdef3(vdef3 == null ? null : vdef3.trim());
        //
        String vdef4 = rs.getString(31);
        praybillItem.setVdef4(vdef4 == null ? null : vdef4.trim());
        //
        String vdef5 = rs.getString(32);
        praybillItem.setVdef5(vdef5 == null ? null : vdef5.trim());
        //
        String vdef6 = rs.getString(33);
        praybillItem.setVdef6(vdef6 == null ? null : vdef6.trim());
        // crowno
        String crowno = rs.getString(34);
        praybillItem.setRowno(crowno == null ? null : crowno.trim());
        // // vdef7 :
        String vdef7 = rs.getString(35);
        praybillItem.setVdef7(vdef7 == null ? null : vdef7.trim());
        // // vdef8 :
        String vdef8 = rs.getString(36);
        praybillItem.setVdef8(vdef8 == null ? null : vdef8.trim());
        // // vdef9 :
        String vdef9 = rs.getString(37);
        praybillItem.setVdef9(vdef9 == null ? null : vdef9.trim());
        // // vdef10 :
        String vdef10 = rs.getString(38);
        praybillItem.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(39);
        praybillItem.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(40);
        praybillItem.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(41);
        praybillItem.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(42);
        praybillItem.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(43);
        praybillItem.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(44);
        praybillItem.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(45);
        praybillItem.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(46);
        praybillItem.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(47);
        praybillItem.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(48);
        praybillItem.setVdef20(vdef20 == null ? null : vdef20.trim());

        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(49);
        praybillItem.setPKDefDoc1(pk_defdoc1 == null ? null
            : pk_defdoc1.trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(50);
        praybillItem.setPKDefDoc2(pk_defdoc2 == null ? null
            : pk_defdoc2.trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(51);
        praybillItem.setPKDefDoc3(pk_defdoc3 == null ? null
            : pk_defdoc3.trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(52);
        praybillItem.setPKDefDoc4(pk_defdoc4 == null ? null
            : pk_defdoc4.trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(53);
        praybillItem.setPKDefDoc5(pk_defdoc5 == null ? null
            : pk_defdoc5.trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(54);
        praybillItem.setPKDefDoc6(pk_defdoc6 == null ? null
            : pk_defdoc6.trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(55);
        praybillItem.setPKDefDoc7(pk_defdoc7 == null ? null
            : pk_defdoc7.trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(56);
        praybillItem.setPKDefDoc8(pk_defdoc8 == null ? null
            : pk_defdoc8.trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(57);
        praybillItem.setPKDefDoc9(pk_defdoc9 == null ? null
            : pk_defdoc9.trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(58);
        praybillItem.setPKDefDoc10(pk_defdoc10 == null ? null
            : pk_defdoc10.trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(59);
        praybillItem.setPKDefDoc11(pk_defdoc11 == null ? null
            : pk_defdoc11.trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(60);
        praybillItem.setPKDefDoc12(pk_defdoc12 == null ? null
            : pk_defdoc12.trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(61);
        praybillItem.setPKDefDoc13(pk_defdoc13 == null ? null
            : pk_defdoc13.trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(62);
        praybillItem.setPKDefDoc14(pk_defdoc14 == null ? null
            : pk_defdoc14.trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(63);
        praybillItem.setPKDefDoc15(pk_defdoc15 == null ? null
            : pk_defdoc15.trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(64);
        praybillItem.setPKDefDoc16(pk_defdoc16 == null ? null
            : pk_defdoc16.trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(65);
        praybillItem.setPKDefDoc17(pk_defdoc17 == null ? null
            : pk_defdoc17.trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(66);
        praybillItem.setPKDefDoc18(pk_defdoc18 == null ? null
            : pk_defdoc18.trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(67);
        praybillItem.setPKDefDoc19(pk_defdoc19 == null ? null
            : pk_defdoc19.trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(68);
        praybillItem.setPKDefDoc20(pk_defdoc20 == null ? null
            : pk_defdoc20.trim());

        // // pk_defdoc20 :
        String bTs = rs.getString(69);
        praybillItem.setTs(bTs == null ? null : bTs.trim());
        // npriceauditbill
        Object npriceauditbill = rs.getObject(70);
        praybillItem
            .setNpriceauditbill((npriceauditbill == null || "".equals(npriceauditbill
                .toString().trim())) ? null
                : new Integer(npriceauditbill.toString().trim()));
        // // pk_defdoc20 :
        String cemployeeid = rs.getString(71);
        praybillItem.setCemployeeid(cemployeeid == null ? null
            : cemployeeid.trim());
        String reqcorp = rs.getString(72);
        praybillItem.setPk_reqcorp(reqcorp == null ? null
            : reqcorp.trim());
        String purcorp = rs.getString(73);
        praybillItem.setPk_purcorp(purcorp == null ? null
            : purcorp.trim());
        String pk_reqstoorg = rs.getString(74);
        praybillItem.setPk_reqstoorg(pk_reqstoorg);
        
        // cbiztype :
        String cbiztypeid = rs.getString(75);
        praybillItem.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
        // ngenct :
        int ngenct = PuPubVO.getUFDouble_NullAsZero(rs.getObject(76)).intValue();
        praybillItem.setNgenct(PuPubVO.getString_TrimZeroLenAsNull(ngenct));
        
//        //计算换算率
//        if(praybillItem.getNassistnum() != null){
//        	praybillItem.setNexchangerate(praybillItem.getNpraynum().div(praybillItem.getNassistnum()));
//        } 
        //zhufeng edit 注释掉
//        if (praybillItem.getNpriceauditbill() == null
//            || (praybillItem.getNpriceauditbill() != null && praybillItem
//                .getNpriceauditbill().intValue() == 0)) {
        //zhufeng edit
          v.addElement(praybillItem);
        //}
      }
      if (v.size() > 0) {
        praybillItems = new PraybillItemVO[v.size()];
        v.copyInto(praybillItems);
        // 拼接单据
        Hashtable h = nc.bs.pu.pub.PubDMO.getHashBodyByHeadKey(
            praybillItems, "cpraybillid");
        praybills = new PraybillVO[heads.length];
        PraybillItemVO[] praybillItem = null;
        for (int i = 0; i < heads.length; i++) {
          // 设置单据头
          praybills[i] = new PraybillVO();
          praybills[i].setParentVO(heads[i]);
          // 设置单据体
          cpraybillid0 = heads[i].getCpraybillid();
          if (cpraybillid0 == null || "".equals(cpraybillid0.trim()))
            continue;
          praybillItem = (PraybillItemVO[]) h.get(cpraybillid0);
          praybillItem = new PraybillImpl().getItemWithMny(praybillItem);
          praybills[i].setChildrenVO(praybillItem);
        }
      }

    } catch(Exception es){
    	throw new SQLException(es.getMessage());
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pr.pray.PraybillDMO",
        "findItemsForPrayHeaderMy", new Object[] { heads });
    /** ********************************************************** */

    return praybills;
  }

  /**
   * @功能：返回按供应商、业务类型、业务员、部门执行价对比表体VO[] 处理： 0.查询思路：用 cmangid + ccurrencytypeid +
   *                                   pDates[i] + pDates[i+1] 作条件 用期间循环 ->
   *                                   一张报表 1.存货管理档案ID + 币种ID + 查询条件
   *                                   2.按供应商的最大集返回, 3.对应期间没执行价的置相应表格为空
   *                                   4.供应商、业务类型等排列顺序以报表查询结果中相应项目出现的顺序一致
   *                                   5.生成合计列 6.生成合计行
   * @param dataSource
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param pDates
   *            UFDate[]
   * @param linkSign
   *            String
   * @return ary ArrayList
   */
  public ArrayList findItemsForPurExecVOMy(int statType, String dataSource,
      boolean isIntax, String cmangid, String ccurrencytypeid,
      String strSQL, UFDate[] pDates, String linkSign, int periodType)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForPurExecVOMy",
        new Object[] { dataSource, new UFBoolean(isIntax), strSQL,
            cmangid, ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    ArrayList ary = null;
    UFDate periodFrom = null;
    UFDate periodTo = null;
    Vector v_quoteitem = new Vector();
    QuoteConItemVO item = null;
    QuoteConItemVO[] items = null;
    StruDataVO[] struitems = null;
    StruDataVO struitem = null;
    Vector v_strudata = null;
    UFDouble price = null;
    StringBuffer colNamesPart = new StringBuffer(" ");
    StringBuffer groupByPart = new StringBuffer(" ");
    // colNamesPart:
    if ("Order".equals(dataSource)) {
      if (!isIntax) {
        colNamesPart.append("sum(coalesce(po_order_b.nordernum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_order_b.noriginalcurmny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_order_b.nordernum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_order_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) end , ");
      } else {
        colNamesPart.append("sum(coalesce(po_order_b.nordernum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_order_b.noriginaltaxpricemny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_order_b.nordernum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_order_b.noriginaltaxpricemny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) end , ");
      }
    } else {
      if (!isIntax) {
        colNamesPart
            .append("sum(coalesce(po_invoice_b.ninvoicenum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.noriginalcurmny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_invoice_b.ninvoicenum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_invoice_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) end , ");
      } else {
        colNamesPart
            .append("sum(coalesce(po_invoice_b.ninvoicenum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.noriginalsummny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_invoice_b.ninvoicenum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_invoice_b.noriginalsummny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) end , ");
      }
    }
    // groupByPart:
    switch (statType) {
    // 供应商
    case 1: {
      groupByPart
          .append("Invoice".equals(dataSource) ? "po_invoice.cvendormangid, "
              : "po_order.cvendormangid, ");
      groupByPart.append("bd_cubasdoc.custcode, ");
      groupByPart.append("bd_cubasdoc.custshortname, ");
//      groupByPart
//      .append(dataSource.equals("Invoice") ? "po_invoice_b.pk_corp "
//          : "po_order_b.pk_corp ");
      groupByPart.append("bd_corp.unitname ");
      break;
    }
    // 业务类型
    case 2: {
      groupByPart
          .append("Invoice".equals(dataSource) ? "po_invoice.cbiztype, "
              : "po_order.cbiztype, ");
      groupByPart.append("bd_busitype.busicode, ");
      groupByPart.append("bd_busitype.businame, ");
//      groupByPart
//      .append(dataSource.equals("Invoice") ? "po_invoice_b.pk_corp "
//          : "po_order_b.pk_corp ");
      groupByPart.append("bd_corp.unitname ");
      break;
    }
    // 业务员
    case 3: {
      groupByPart
          .append("Invoice".equals(dataSource) ? "po_invoice.cemployeeid, "
              : "po_order.cemployeeid, ");
      groupByPart.append("bd_psndoc.psncode, ");
      groupByPart.append("bd_psndoc.psnname, ");
//      groupByPart
//      .append(dataSource.equals("Invoice") ? "po_invoice_b.pk_corp "
//          : "po_order_b.pk_corp ");
      groupByPart.append("bd_corp.unitname ");
      break;
    }
    // 部门
    case 4: {
      groupByPart
          .append("Invoice".equals(dataSource) ? "po_invoice.cdeptid, "
              : "po_order.cdeptid, ");
      groupByPart.append("bd_deptdoc.deptcode, ");
      groupByPart.append("bd_deptdoc.deptname, ");
//      groupByPart
//      .append(dataSource.equals("Invoice") ? "po_invoice_b.pk_corp "
//          : "po_order_b.pk_corp ");
      groupByPart.append("bd_corp.unitname ");
      break;
    }
    }
    StringBuffer sql = new StringBuffer(" ");
    sql.append("select ");
    sql.append(colNamesPart + " ");
    sql.append(groupByPart + " ");
    if ("Order".equals(dataSource)) {
//      sql.append(" ,po_order_b.pk_corp ");
      sql.append(" ,bd_corp.unitname ");
    }else{
//      sql.append(" ,po_invoice_b.pk_corp ");
      sql.append(" ,bd_corp.unitname ");
    }
    sql.append(strSQL + " ");
    if ("Invoice".equals(dataSource)) {
      sql.append("and po_invoice_b.cmangid = ? ");
      sql.append("and po_invoice_b.ccurrencytypeid = ? ");
      sql.append("and po_invoice.dinvoicedate >= ? ");
      sql.append("and po_invoice.dinvoicedate <= ? ");
    } else {
      sql.append("and po_order_b.cmangid = ? ");
      sql.append("and po_order_b.ccurrencytypeid = ? ");
      sql.append("and po_order.dorderdate >= ? ");
      sql.append("and po_order.dorderdate <= ? ");
    }
    sql.append("group by        ");
    sql.append(groupByPart);
    //
    Connection con = null;
    PreparedStatement stmt = null;
    // 统计口径ID(报表供应商业务类型等的最大集及显示顺序)
    Vector v_pk = new Vector();
    // {统计口径ID=结构数据VO(报价处理为空)}
    Hashtable h_StruDataAll = new Hashtable();
    String period = null;
    ResultSet rs = null;

    try {
      // 查询数据库------------------------------ 开始
      // ------------------------------------------------
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      stmt.setString(1, cmangid);
      stmt.setString(2, ccurrencytypeid);
      // 分析期间为日时的特殊处理
      int pDatesEndIndex = pDates.length;
      if (periodType != 5)
        pDatesEndIndex -= 1;
      for (int k = 0; k < pDatesEndIndex; k++) {
        struitems = null;
        period = null;
        v_strudata = new Vector();
        String corpT = null;
        // 分析期间为日时的特殊处理
        if (periodType != 5) {
          periodFrom = pDates[k].getDateAfter(1);
          if (k == 0)
            periodFrom = pDates[k];
          periodTo = pDates[k + 1];
        } else {
          periodFrom = pDates[k];
          periodTo = pDates[k];
        }
        stmt.setString(3, periodFrom.toString());
        stmt.setString(4, periodTo.toString());
        rs = stmt.executeQuery();
        //2009/11/21 tiaft
        ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070303"));
        while (rs.next()) {
          struitem = new StruDataVO();

          BigDecimal bnum = rs.getBigDecimal(1);
          struitem.setNum(bnum == null ? null : new UFDouble(bnum));
          BigDecimal bmny = rs.getBigDecimal(2);
          struitem.setMny(bmny == null ? null : new UFDouble(bmny));
          BigDecimal bprice = rs.getBigDecimal(3);
          struitem.setPrice(bprice == null ? null : new UFDouble(
              bprice));

          String pk = rs.getString(4);
          String code = rs.getString(5);
          String name = rs.getString(6);
          String corp = rs.getString(7);
          if(corp != null && corp.trim().length() > 0){
             corpT = corp;
          }
          switch (statType) {
          // 供应商
          case 1: {
            struitem.setPk_cumandoc(pk);
            struitem.setCustcode(code);
            struitem.setCustname(name);
            struitem.setPk_corp(corp);
            break;
          }
          // 业务类型
          case 2: {
            struitem.setPk_busitype(pk);
            struitem.setBusicode(code);
            struitem.setBusiname(name);
            struitem.setPk_corp(corp);
            break;
          }
          // 业务员
          case 3: {
            struitem.setPk_psndoc(pk);
            struitem.setPsncode(code);
            struitem.setPsnname(name);
            struitem.setPk_corp(corp);
            break;
          }
          // 部门
          case 4: {
            struitem.setPk_deptdoc(pk);
            struitem.setDeptcode(code);
            struitem.setDeptname(name);
            struitem.setPk_corp(corp);
            break;
          }
          }
          v_strudata.addElement(struitem);

          // 记录{pk=结构体,用于显示报表头}
          if (!v_pk.contains(pk)) {
            v_pk.addElement(pk);
            StruDataVO strunew = (StruDataVO) struitem.clone();
            strunew.setNum(new UFDouble(0));
            strunew.setMny(new UFDouble(0));
            strunew.setPrice(new UFDouble(0));
            h_StruDataAll.put(pk, strunew);
          }
        }
        if (rs != null)
          rs.close();
        if (v_strudata.size() > 0) {
          struitems = new StruDataVO[v_strudata.size()];
          v_strudata.copyInto(struitems);
        }
        // 无论本期间内有无数据均要产生一行报表数据
        item = new QuoteConItemVO();
        period = periodFrom.toString();
        period += linkSign;
        period += periodTo.toString();
        item.setPeriod(period);
        item.setStruDatas(struitems);
        item.setPk_corp(corpT);
        v_quoteitem.addElement(item);
      }
      // 查询数据库 ------------------------------ 结束
      // -----------------------------------------------

      // 生成报表数据------------------------------ 开始
      // -----------------------------------------------
      // pk向量不为空说明有报表数据
      String pk = null;
      String code = null;
      String name = null;
      UFDouble num = null;
      UFDouble mny = null;
      if (v_pk.size() > 0) {
        // 增加合计列--------------------------------------------- 开始
        v_pk.add("@@@czp201314@@@");
        struitem = new StruDataVO();
        pk = (String) v_pk.elementAt(v_pk.size() - 1);
        code = "czp";
        name = "合计";
        num = new UFDouble(0);
        mny = new UFDouble(0);
        price = new UFDouble(0);
        struitem.setNum(num);
        struitem.setMny(mny);
        struitem.setPrice(price);
        switch (statType) {
        // 供应商
        case 1: {
          struitem.setPk_cumandoc(pk);
          struitem.setCustcode(code);
          struitem.setCustname(name);
          break;
        }
        // 业务类型
        case 2: {
          struitem.setPk_busitype(pk);
          struitem.setBusicode(code);
          struitem.setBusiname(name);
          break;
        }
        // 业务员
        case 3: {
          struitem.setPk_psndoc(pk);
          struitem.setPsncode(code);
          struitem.setPsnname(name);
          break;
        }
        // 部门
        case 4: {
          struitem.setPk_deptdoc(pk);
          struitem.setDeptcode(code);
          struitem.setDeptname(name);
          break;
        }
        }
        h_StruDataAll.put(pk, struitem);
        // 增加合计列-------------------------------------------------- 结束

        // 未加合计列合计行的中间结果
        items = new QuoteConItemVO[v_quoteitem.size()];
        v_quoteitem.copyInto(items);
        // 按供应商、业务类型等最大集为列序生成报表每一行并加合计列数据
        UFDouble allcolnum = new UFDouble(0);
        UFDouble curcolnum = new UFDouble(0);
        UFDouble allcolmny = new UFDouble(0);
        UFDouble curcolmny = new UFDouble(0);
        Hashtable h_StruDataCurrItem = null;
        for (int i = 0; i < items.length; i++) {
          // 期间有结构数据的行的处理----------------------------------------- 开始
          allcolnum = new UFDouble(0);
          allcolmny = new UFDouble(0);
          curcolnum = new UFDouble(0);
          curcolnum = new UFDouble(0);
          h_StruDataCurrItem = new Hashtable();
          // 如果本期间有供应商报价则记录并生成合计列
          if (items[i].getStruDatas() != null) {
            for (int j = 0; j < items[i].getStruDatas().length; j++) {
              // 累计不同供应商的报价
              curcolnum = items[i].getStruDatas()[j].getNum();
              curcolmny = items[i].getStruDatas()[j].getMny();
              allcolnum = allcolnum.add(curcolnum);
              allcolmny = allcolmny.add(curcolmny);
              // 记录有报价的供应商
              switch (statType) {
              // 供应商
              case 1: {
                pk = items[i].getStruDatas()[j]
                    .getPk_cumandoc();
                break;
              }
              // 业务类型
              case 2: {
                pk = items[i].getStruDatas()[j]
                    .getPk_busitype();
                break;
              }
              // 业务员
              case 3: {
                pk = items[i].getStruDatas()[j].getPk_psndoc();
                break;
              }
              // 部门
              case 4: {
                pk = items[i].getStruDatas()[j].getPk_deptdoc();
                break;
              }
              }
              h_StruDataCurrItem.put(pk,
                  items[i].getStruDatas()[j]);
            }
            // 设置本期间的合计列并置合计项目
            struitem = (StruDataVO) h_StruDataAll.get((String) v_pk
                .get(v_pk.size() - 1));
            struitem = (StruDataVO) struitem.clone();
            h_StruDataCurrItem.put(v_pk.get(v_pk.size() - 1),
                struitem);
            struitem.setNum(allcolnum);
            struitem.setMny(allcolmny);
            if (allcolnum.compareTo(new UFDouble(0)) != 0) {
              struitem.setPrice(allcolmny.div(allcolnum));
            } else {
              struitem.setPrice(new UFDouble(0));
            }
          }
          // 期间有结构数据的行的处理----------------------------------------- 结束

          // 生成各期间的报表数据
          struitems = new StruDataVO[v_pk.size()];
          for (int j = 0; j < v_pk.size(); j++) {
            struitems[j] = new StruDataVO();
            pk = (String) v_pk.elementAt(j);
            // 如果这个供应商有报价
            if (h_StruDataCurrItem.containsKey(pk)) {
              struitems[j] = (StruDataVO) h_StruDataCurrItem
                  .get(pk);
            } else {
              // 结构数据处理成为0
              struitems[j] = (StruDataVO) h_StruDataAll.get(pk);
            }
          }
          // 更新全集的有序的供应商报价结构数组(包括合计列)
          items[i].setStruDatas(struitems);
        }

        // 设置合计行
        // -------------------------------------------------------------------
        // 开始
        UFDouble allrownum = new UFDouble(0);
        UFDouble currownum = new UFDouble(0);
        UFDouble allrowmny = new UFDouble(0);
        UFDouble currowmny = new UFDouble(0);
        item = new QuoteConItemVO();
        item.setPeriod("合计");
        // 列循环(含合计列)
        struitems = new StruDataVO[v_pk.size()];
        for (int col = 0; col < v_pk.size(); col++) {
          struitems[col] = (StruDataVO) h_StruDataAll.get(v_pk
              .elementAt(col));
          struitems[col] = (StruDataVO) struitems[col].clone();
          // 行循环(不含合计行)置相应供应商合计价
          allrownum = new UFDouble(0);
          allrowmny = new UFDouble(0);
          for (int row = 0; row < items.length; row++) {
            struitem = (StruDataVO) items[row].getStruDatas()[col];
            currownum = struitem.getNum();
            currowmny = struitem.getMny();
            allrownum = allrownum.add(currownum);
            allrowmny = allrowmny.add(currowmny);
          }
          struitems[col].setNum(allrownum);
          struitems[col].setMny(allrowmny);
          if (allrownum.compareTo(new UFDouble(0)) != 0) {
            struitems[col].setPrice(allrowmny.div(allrownum));
          } else {
            struitems[col].setPrice(new UFDouble(0));
          }
        }
        item.setStruDatas(struitems);
        item.setNo((items.length + 1) + "");
        // 设置合计行
        // -------------------------------------------------------------------
        // 结束

        // 扩充合计行
        QuoteConItemVO[] retitems = new QuoteConItemVO[items.length + 1];
        for (int i = 0; i < items.length; i++) {
          retitems[i] = items[i];
          retitems[i].setNo((i + 1) + "");
        }
        retitems[items.length] = item;
        // 返回
        ary = new ArrayList();
        ary.add(retitems);
        ary.add(v_pk);
        ary.add(h_StruDataAll);
      }

      // 生成报表数据------------------------------ 结束
      // -----------------------------------------------
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForPurExecVOMy",
        new Object[] { dataSource, new UFBoolean(isIntax), strSQL,
            cmangid, ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    return ary;
  }

  /**
   * @功能：返回供应商报价对比表体VO[不同供应商报价的 最大值(最小值、平均值)] 处理： 1.存货管理档案ID + 币种ID + 查询条件 的
   *                            不同供应商的最大报价(最低报价、平均报价) 2.按供应商的最大集返回,
   *                            3.对应期间没供应商报价的置供应商报价为空
   *                            4.供应商排列顺序以报表查询结果中供应商出现的顺序一致 5.生成合计列 6.生成合计行
   * @param statType
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param pDates
   *            UFDate[]
   * @param linkSign
   *            String
   * @return ary ArrayList
   */
  public ArrayList findItemsForQuoteConVOMy(String statType, boolean isIntax,
      String cmangid, String ccurrencytypeid, String strSQL,
      UFDate[] pDates, String linkSign, int periodType)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForQuoteConVOMy",
        new Object[] { statType, new UFBoolean(isIntax), strSQL,
            cmangid, ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    ArrayList ary = null;
    UFDate periodFrom = null;
    UFDate periodTo = null;
    Vector v_quoteitem = new Vector();
    QuoteConItemVO item = null;
    QuoteConItemVO[] items = null;
    StruDataVO[] struitems = null;
    StruDataVO struitem = null;
    Vector v_strudata = null;
    String priceColName = "po_askbill_bb1.nquoteprice";
    if (isIntax)
      priceColName = "po_askbill_bb1.nquotetaxprice";
    StringBuffer sql = new StringBuffer("SELECT " + statType + "(coalesce("
        + priceColName + ",0)), ");
    // 与 group by 子句一致
    //
    sql.append("po_askbill_bb1.cvendormangid, ");
    sql.append("bd_cubasdoc.pk_cubasdoc, ");
    sql.append("bd_cubasdoc.custcode, ");
    sql.append("bd_cubasdoc.custshortname, ");
    sql.append("bd_corp.unitname ");
    //
    sql.append(strSQL + " ");
    sql.append("and po_askbill_b.cmangid = ? ");
    sql.append("and po_askbill.ccurrencytypeid = ? ");
    sql.append("and po_askbill.dquotedate >= ? ");
    sql.append("and po_askbill.dquotedate <= ? ");
    sql.append("group by ");
    // 与 select 子句一致
    //
    sql.append("po_askbill_bb1.cvendormangid, ");
    sql.append("bd_cubasdoc.pk_cubasdoc, ");
    sql.append("bd_cubasdoc.custcode, ");
    sql.append("bd_cubasdoc.custshortname, ");
    sql.append("bd_corp.unitname ");
    //
    Connection con = null;
    PreparedStatement stmt = null;
    // 供应商管理ID(报表供应商最大集及显示顺序)
    Vector v_pk_cumandoc = new Vector();
    // {供应商管理ID=结构数据VO(报价处理为空)}
    Hashtable h_StruDataAll = new Hashtable();
    String period = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      stmt.setString(1, cmangid);
      stmt.setString(2, ccurrencytypeid);
      // 分析期间为日时的特殊处理
      int pDatesEndIndex = pDates.length;
      if (periodType != 5)
        pDatesEndIndex -= 1;
      for (int k = 0; k < pDatesEndIndex; k++) {
        struitems = null;
        period = null;
        v_strudata = new Vector();
        // 分析期间为日时的特殊处理
        if (periodType != 5) {
          periodFrom = pDates[k].getDateAfter(1);
          if (k == 0)
            periodFrom = pDates[k];
          periodTo = pDates[k + 1];
        } else {
          periodFrom = pDates[k];
          periodTo = pDates[k];
        }
        stmt.setString(3, periodFrom.toString());
        stmt.setString(4, periodTo.toString());
        rs = stmt.executeQuery();
        //2009/11/21 tiaft
        ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070301"));
        while (rs.next()) {
          struitem = new StruDataVO();
          BigDecimal bprice = rs.getBigDecimal(1);
          struitem.setPrice(bprice == null ? null : new UFDouble(
              bprice));
          String pk_cumandoc = rs.getString(2);
          struitem.setPk_cumandoc(pk_cumandoc == null ? null
              : pk_cumandoc.trim());
          String pk_cubasdoc = rs.getString(3);
          struitem.setPk_cubasdoc(pk_cubasdoc == null ? null
              : pk_cubasdoc.trim());
          String custcode = rs.getString(4);
          struitem.setCustcode(custcode == null ? null : custcode
              .trim());
          String custname = rs.getString(5);
          struitem.setCustname(custname == null ? null : custname
              .trim());
          String pk_corp = rs.getString(6);
          struitem.setPk_corp(pk_corp == null ? null : pk_corp
              .trim());
          v_strudata.addElement(struitem);
          if (pk_cumandoc != null && !v_pk_cumandoc.contains(pk_cumandoc)) {
            v_pk_cumandoc.addElement(pk_cumandoc);
            StruDataVO strunew = (StruDataVO) struitem.clone();
            strunew.setPrice(null);
            h_StruDataAll.put(pk_cumandoc, strunew);
          }
        }
        if (rs != null)
          rs.close();
        if (v_strudata.size() > 0) {
          struitems = new StruDataVO[v_strudata.size()];
          v_strudata.copyInto(struitems);
        }
        // 无论本期间内有无数据均要产生一行报表数据
        item = new QuoteConItemVO();
        period = periodFrom.toString();
        period += linkSign;
        period += periodTo.toString();
        item.setPeriod(period);
        if(struitems != null && struitems.length > 0 && struitems[0] != null){
           item.setPk_corp(struitems[0].getPk_corp());
        }
        item.setStruDatas(struitems);
        v_quoteitem.addElement(item);
      }
      // 供应商不为空说明有报表数据
      if (v_pk_cumandoc.size() > 0) {
        // 增加合计列
        v_pk_cumandoc.add("@@@czp201314@@@");
        struitem = new StruDataVO();
        struitem.setPk_cumandoc((String) v_pk_cumandoc
            .elementAt(v_pk_cumandoc.size() - 1));
        struitem.setCustcode("czp");
        struitem.setCustname("平均价");
        //2009-11-3 供应商报价对比分析最后一列“合计”应该是平均价，不是合计
        //struitem.setCustname("合计");
        struitem.setPrice(null);
        h_StruDataAll.put(struitem.getPk_cumandoc(), struitem);
        // /按供应商最大集排序报表每一行
        Hashtable h_StruDataCurrItem = null;
        String pk_cumandoc = null;
        items = new QuoteConItemVO[v_quoteitem.size()];
        v_quoteitem.copyInto(items);
        UFDouble allcolprice = null;
        UFDouble curcolprice = null;
        for (int i = 0; i < items.length; i++) {
          // 每个期间的实际供应商报价
          h_StruDataCurrItem = new Hashtable();
          allcolprice = new UFDouble(0);
          curcolprice = new UFDouble(0);
          int pricecolcnt = 0;
          // 如果本期间有供应商报价则记录并生成合计列
          if (items[i].getStruDatas() != null) {
            curcolprice = new UFDouble(0);
            pricecolcnt = 0;
            for (int j = 0; j < items[i].getStruDatas().length; j++) {
              // 累计不同供应商的报价
              curcolprice = items[i].getStruDatas()[j].getPrice();
              if (curcolprice != null
                  && curcolprice.compareTo(new UFDouble(0)) != 0) {
                pricecolcnt++;
                allcolprice = allcolprice.add(curcolprice);
              }
              // 记录有报价的供应商
              if(items[i].getStruDatas()[j].getPk_cumandoc() != null 
                  && items[i].getStruDatas()[j].getPk_cumandoc().trim().length() > 0){
              h_StruDataCurrItem.put(items[i].getStruDatas()[j]
                  .getPk_cumandoc(),
                  items[i].getStruDatas()[j]);
              }
            }
            // 设置合计列并置平均价
            struitem = (StruDataVO) h_StruDataAll
                .get((String) v_pk_cumandoc.get(v_pk_cumandoc
                    .size() - 1));
            struitem = (StruDataVO) struitem.clone();
            h_StruDataCurrItem.put(v_pk_cumandoc.get(v_pk_cumandoc
                .size() - 1), struitem);
            if (allcolprice.compareTo(new UFDouble(0)) != 0
                && pricecolcnt > 0) {
              struitem.setPrice(allcolprice.div(pricecolcnt));
            }
          }
          // 生成各期间的报表数据
          struitems = new StruDataVO[v_pk_cumandoc.size()];
          for (int j = 0; j < v_pk_cumandoc.size(); j++) {
            struitems[j] = new StruDataVO();
            pk_cumandoc = (String) v_pk_cumandoc.elementAt(j);
            // 如果有这个供应商有报价
            if (h_StruDataCurrItem.containsKey(pk_cumandoc)) {
              struitems[j] = (StruDataVO) h_StruDataCurrItem
                  .get(pk_cumandoc);
            } else {
              // 报价已经处理为空
              struitems[j] = (StruDataVO) h_StruDataAll
                  .get(pk_cumandoc);
            }
          }
          // 更新全集的有序的供应商报价结构数组(包括合计列)
          items[i].setStruDatas(struitems);
        }

        // 设置合计行
        UFDouble allrowprice = new UFDouble(0);
        int pricerowcnt = 0;
        item = new QuoteConItemVO();
        item.setPeriod("合计");
        // 列循环(含合计列)
        struitems = new StruDataVO[v_pk_cumandoc.size()];
        for (int col = 0; col < v_pk_cumandoc.size(); col++) {
          struitems[col] = (StruDataVO) h_StruDataAll
              .get(v_pk_cumandoc.elementAt(col));
          struitems[col] = (StruDataVO) struitems[col].clone();
          // 行循环(不含合计行)置相应供应商合计价
          allrowprice = new UFDouble(0);
          pricerowcnt = 0;
          for (int row = 0; row < items.length; row++) {
            struitem = (StruDataVO) items[row].getStruDatas()[col];
            // struitem = (StruDataVO) struitem.clone();
            if (struitem.getPrice() != null
                && struitem.getPrice().compareTo(
                    new UFDouble(0)) != 0) {
              pricerowcnt++;
              allrowprice = allrowprice.add(struitem.getPrice());
            }
          }
          if (allrowprice.compareTo(new UFDouble(0)) != 0
              && pricerowcnt > 0) {
            struitems[col].setPrice(allrowprice.div(pricerowcnt));
          }
        }
        item.setStruDatas(struitems);
        item.setNo((items.length + 1) + "");
        // 扩充合计行
        QuoteConItemVO[] retitems = new QuoteConItemVO[items.length + 1];
        for (int i = 0; i < items.length; i++) {
          retitems[i] = items[i];
          retitems[i].setNo((i + 1) + "");
        }
        retitems[items.length] = item;
        // 返回
        ary = new ArrayList();
        ary.add(retitems);
        ary.add(v_pk_cumandoc);
        ary.add(h_StruDataAll);
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getPricesForQuoteConVO",
        new Object[] { statType, new UFBoolean(isIntax), strSQL,
            cmangid, ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    return ary;
  }

  /**
   * @功能：返回按存货执行价对比表体VO[] 存货执行价变动表体VO[] 处理： 0.查询思路：用 cmangid + ccurrencytypeid +
   *                      pDates[i] + pDates[i+1] 作条件 用期间循环 -> 一张报表 1.存货管理档案ID +
   *                      币种ID + 查询条件 2.按供应商的最大集返回, 3.对应期间没执行价的置相应表格为空
   *                      4.供应商、业务类型等排列顺序以报表查询结果中相应项目出现的顺序一致 5.生成合计列 6.生成合计行
   *                      7.上期价格为零时本期变化率为零
   * @param dataSource
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param pDates
   *            UFDate[]
   * @param linkSign
   *            String
   * @return stockitems StockExecItemVO[]
   */
  public StockExecItemVO[] findItemsForStockExecVOMy(String dataSource,
      boolean isIntax, String cmangid, String ccurrencytypeid,
      String strSQL, UFDate[] pDates, String linkSign, int periodType,String funcNode)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "findItemsForStockExecVOMy", new Object[] { dataSource,
            new UFBoolean(isIntax), strSQL, cmangid,
            ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    StockExecItemVO[] stockitems = null;
    UFDate periodFrom = null;
    UFDate periodTo = null;
    Vector v_stockitem = new Vector();
    StockExecItemVO item = null;
    StockExecItemVO[] items = null;
    StringBuffer colNamesPart = new StringBuffer(" ");
    // colNamesPart:
    if ("Order".equals(dataSource)) {
      if (isIntax) {
        colNamesPart.append("count(po_order_b.nordernum), ");
        colNamesPart.append("sum(coalesce(po_order_b.nordernum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_order_b.noriginaltaxpricemny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_order_b.nordernum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_order_b.noriginaltaxpricemny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) end  ");
        colNamesPart
                .append(" , max(po_order_b.pk_corp) ");
      } else {
        colNamesPart.append("count(po_order_b.nordernum), ");
        colNamesPart.append("sum(coalesce(po_order_b.nordernum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_order_b.noriginalcurmny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_order_b.nordernum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_order_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) end  ");
        colNamesPart
                    .append(" , max(po_order_b.pk_corp) ");
      }
    } else {
      if (isIntax) {
        colNamesPart.append("count(po_invoice_b.ninvoicenum), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.ninvoicenum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.noriginalsummny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_invoice_b.ninvoicenum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_invoice_b.noriginalsummny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) end  ");
        colNamesPart
                    .append(" , max(po_invoice_b.pk_corp) ");
      } else {
        colNamesPart.append("count(po_invoice_b.ninvoicenum), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.ninvoicenum,0)), ");
        colNamesPart
            .append("sum(coalesce(po_invoice_b.noriginalcurmny,0)), ");
        colNamesPart
            .append("case when sum(coalesce(po_invoice_b.ninvoicenum,0)) = 0 then 0 ");
        colNamesPart
            .append("     else cast(sum(coalesce(po_invoice_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) end  ");
        colNamesPart
                        .append(" , max(po_invoice_b.pk_corp) ");
      }
    }
    StringBuffer sql = new StringBuffer("");
    sql.append("select ");
    sql.append(colNamesPart + " ");
    sql.append(strSQL + " ");
    if ("Invoice".equals(dataSource)) {
      sql.append("and po_invoice_b.cmangid = ? ");
      sql.append("and po_invoice_b.ccurrencytypeid = ? ");
      sql.append("and po_invoice.dinvoicedate >= ? ");
      sql.append("and po_invoice.dinvoicedate <= ? ");
//      sql.append("group by po_invoice_b.pk_corp ");
    } else {
      sql.append("and po_order_b.cmangid = ? ");
      sql.append("and po_order_b.ccurrencytypeid = ? ");
      sql.append("and po_order.dorderdate >= ? ");
      sql.append("and po_order.dorderdate <= ? ");
//      sql.append("group by po_order_b.pk_corp ");
    }
    //
    Connection con = null;
    PreparedStatement stmt = null;
    String period = null;
    ResultSet rs = null;
    try {
      // 查询数据库------------------------------ 开始
      // ------------------------------------------------
      con = getConnection();

      // 不必翻译
      // ((nc.bs.mw.sql.UFConnection)con).enableSQLTranslator(false);
      //

      // 分析期间为日时的特殊处理
      int pDatesEndIndex = pDates.length;
      if (periodType != 5)
        pDatesEndIndex -= 1;
      boolean isHaveRec = false;

      for (int k = 0; k < pDatesEndIndex; k++) {
        stmt = con.prepareStatement(sql.toString());
        stmt.setString(1, cmangid);
        stmt.setString(2, ccurrencytypeid);
        period = null;
        // 分析期间为日时的特殊处理
        if (periodType != 5) {
          periodFrom = pDates[k].getDateAfter(1);
          if (k == 0)
            periodFrom = pDates[k];
          periodTo = pDates[k + 1];
        } else {
          periodFrom = pDates[k];
          periodTo = pDates[k];
        }
        stmt.setString(3, periodFrom.toString());
        stmt.setString(4, periodTo.toString());
        rs = stmt.executeQuery();
        //2009/11/21 tiaft
        ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
//        int count = 0 ;
        while (rs.next()) {
//          count = 1;
          // 统计数据
          item = new StockExecItemVO();
          Integer itimes = (Integer) rs.getObject(1);
          item.setTimes(itimes);
          if (itimes.intValue() == 0) {
            item.setNum(new UFDouble(0));
            item.setMny(new UFDouble(0));
            item.setPrice(new UFDouble(0));
          } else {
            isHaveRec = true;
            BigDecimal bnum = rs.getBigDecimal(2);
            item.setNum(bnum == null ? null : new UFDouble(bnum));
            BigDecimal bmny = rs.getBigDecimal(3);
            item.setMny(bmny == null ? null : new UFDouble(bmny));
            BigDecimal bprice = rs.getBigDecimal(4);
            item.setPrice(bprice == null ? null : new UFDouble(
                bprice));
          }
          // 期间
          period = periodFrom.toString();
          period += linkSign;
          period += periodTo.toString();
          item.setPeriod(period);
          // 行号
          item.setNo((k + 1) + "");
          //公司
          item.setPk_corp(rs.getString(5));
          v_stockitem.addElement(item);
        }
        if (stmt != null) {
          stmt.close();
        }
//        if(count == 1){
//          item = new StockExecItemVO();
//          Integer itimes = (Integer) rs.getObject(1);
//          item.setTimes(itimes);
//          if (itimes.intValue() == 0) {
//            item.setNum(new UFDouble(0));
//            item.setMny(new UFDouble(0));
//            item.setPrice(new UFDouble(0));
//          }
//        }
      }
      if (v_stockitem.size() > 0 && isHaveRec) {
        items = new StockExecItemVO[v_stockitem.size()];
        v_stockitem.copyInto(items);
      }
      // 查询数据库 ------------------------------ 结束
      // -----------------------------------------------

      if (items != null && items.length > 0) {
        Integer allrowtimes = new Integer(0);
        UFDouble allrownum = new UFDouble(0);
        UFDouble allrowmny = new UFDouble(0);
        UFDouble price0 = new UFDouble(0);
        UFDouble price1 = new UFDouble(0);
        for (int i = 0; i < items.length; i++) {
          // 变化率
          if (i == 0) {
            items[i].setVarrate(new UFDouble(0));
            price0 = items[i].getPrice();
          } else {
            price0 = items[i - 1].getPrice();
            price1 = items[i].getPrice();
            if (price0.equals(new UFDouble(0)))
              items[i].setVarrate(new UFDouble(0));
            else
              items[i].setVarrate(((price1.sub(price0))
                  .div(price0)).multiply(100));
          }
          // 累计
          allrowtimes = new Integer(allrowtimes.intValue()
              + items[i].getTimes().intValue());
          allrownum = allrownum.add(items[i].getNum());
          allrowmny = allrowmny.add(items[i].getMny());
        }
        // 生成合计行
        item = new StockExecItemVO();
        item.setNo((items.length + 1) + "");
        item.setPeriod("合计");
        item.setTimes(allrowtimes);
        item.setNum(allrownum);
        item.setMny(allrowmny);
        if (allrownum.equals(new UFDouble(0)))
          item.setPrice(new UFDouble(0));
        else
          item.setPrice(allrowmny.div(allrownum));
        item.setVarrate(new UFDouble(0));
        // 扩充合计行
        stockitems = new StockExecItemVO[items.length + 1];
        for (int i = 0; i < items.length; i++) {
          stockitems[i] = items[i];
        }
        stockitems[items.length] = item;
      }
      // 合计行及变化率--------------------------------------------- 结束
      // ------------------------------
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForStockExecVOMy",
        new Object[] { dataSource, new UFBoolean(isIntax), strSQL,
            cmangid, ccurrencytypeid, pDates, linkSign });
    /** ********************************************************** */
    return stockitems;
  }

  /**
   * 查询存货报价变动分析VO 返回：同一存货同一币种的报价信息 #报价日期 #含税报价 #无税报价 创建日期：(2001-09-24-19)
   * 
   * @param pk_invmandoc
   *            String 存货管理档案ID
   * @param strSQL
   *            String 过滤条件
   * @param pk_currtype
   *            String 币种ID
   * @return items StockVarItem[] 存货报价变动分析表体VO[]
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public StockVarItemVO[] findItemsForStockVarVOMy(String pk_invmandoc,
      String strSQL, String pk_currtype) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForStockVarVOMy",
        new Object[] { pk_invmandoc, strSQL, pk_currtype });
    /** ********************************************************** */

    StringBuffer sql = new StringBuffer(" ");
    sql.append("select ");
    sql.append("po_askbill.dquotedate, ");
    sql.append("po_askbill_bb1.nquoteprice, ");
    sql.append("po_askbill_bb1.nquotetaxprice, ");
    sql.append("bd_corp.unitname ");

    sql.append(strSQL + " ");
    sql
        .append("and po_askbill_b.cmangid = ? and po_askbill.ccurrencytypeid = ? ");
    sql.append("order by po_askbill.dquotedate ");

    StockVarItemVO[] items = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      stmt.setString(1, pk_invmandoc);
      stmt.setString(2, pk_currtype);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow("4004070302"));
      //
      while (rs.next()) {
        StockVarItemVO item = new StockVarItemVO();

        String sdquotedate = rs.getString(1);
        if (sdquotedate == null || "".equals(sdquotedate.trim())) {
          item.setDquotedate(null);
        } else {
          item.setDquotedate(new UFDate(sdquotedate.trim(), false));
        }
        BigDecimal bnnotaxprice = rs.getBigDecimal(2);
        item.setNnotaxprice(bnnotaxprice == null ? null : new UFDouble(
            bnnotaxprice));

        BigDecimal bnintaxprice = rs.getBigDecimal(3);
        item.setNintaxprice(bnintaxprice == null ? null : new UFDouble(
            bnintaxprice));
        
        String unitname = rs.getString(4);
        if (unitname == null || "".equals(unitname.trim())) {
          item.setPk_corp(null);
        } else {
          item.setPk_corp(unitname.trim());
        }
        v.addElement(item);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      items = new StockVarItemVO[v.size()];
      v.copyInto(items);
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findItemsForStockVarVOMy",
        new Object[] { pk_invmandoc, strSQL, pk_currtype });
    /** ********************************************************** */

    return items;
  }

  /**
   * 功能：通过单据主键数组返回单据VO数组
   * 
   * 创建日期：(2003-12-17 12:57:10)
   * 
   * 参数： String[] keys 单据主键数组 返回值：AskbillVO[] vos 单据VO数组
   */
  public AskbillVO_Old[] findVosByHeadIds(String[] keys) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "findHeaderByPrimaryKey",
        new Object[] { keys });
    /** ********************************************************** */
    if (keys == null || keys.length == 0) {
      SCMEnv.out("传入参数不正确：单据主键数组为NULL，返回NULL");
      return null;
    }
    int iLen = keys.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (keys[i] == null)
        continue;
      listDisId.add(keys[i]);
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU99,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    // 表头SQL
    String strSqlHead = "select caskbillid, pk_corp, ltrim(rtrim(vaskbillcode)), cvendormangid, cdeptid, cemployeeid, ccurrencytypeid, dclosedate, caskpsn, daskdate, cquotepsn, dquotedate, ctermprotocolid, caccountyear, ibillstatus, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, cvendorbaseid,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,pk_purorg  ";
    strSqlHead += "from po_askbill ";
    strSqlHead += "where caskbillid in ";
    strSqlHead += strIdSet + " ";
    strSqlHead += "and dr = 0 ";
    // 表体SQL
    String strSqlBody = "select caskbill_bid, caskbillid, pk_corp, cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress, nnotaxprice, nintaxprice, bisorder, nordernum, nordernotaxprice, norderintaxprice, nordernotaxmny, ntaxmny, npricetaxmny, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid,  ";
    strSqlBody += "ntaxrate, deliverdays, crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid,vdef7, vdef8, vdef9, vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20  ";
    strSqlBody += "from po_askbill_b ";
    strSqlBody += "where caskbillid in ";
    strSqlBody += strIdSet + " ";
    strSqlBody += "and dr = 0 ";
    //
    Vector vTmp = new Vector();
    AskbillHeaderVO_Old askbillHeader = null;
    AskbillHeaderVO_Old[] headers = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String strTmp = null;
    Integer ibillstatus = null;
    int index = 0;
    AskbillVO_Old[] vos = null;
    try {
      con = getConnection();
      // 查询表头
      stmt = con.prepareStatement(strSqlHead);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(ScmConst.scmReportMaxRows);
      //
      while (rs.next()) {
        index = 0;
        //
        strTmp = rs.getString(++index);
        //
        askbillHeader = new AskbillHeaderVO_Old(strTmp);
        // pk_corp :
        strTmp = rs.getString(++index);
        askbillHeader.setPk_corp(strTmp);
        // vaskbillcode :
        strTmp = rs.getString(++index);
        askbillHeader.setVaskbillcode(strTmp);
        // cvendormangid :
        strTmp = rs.getString(++index);
        askbillHeader.setCvendormangid(strTmp);
        // cdeptid :
        strTmp = rs.getString(++index);
        askbillHeader.setCdeptid(strTmp);
        // cemployeeid :
        strTmp = rs.getString(++index);
        askbillHeader.setCemployeeid(strTmp);
        // ccurrencytypeid :
        strTmp = rs.getString(++index);
        askbillHeader.setCcurrencytypeid(strTmp);
        // dclosedate :
        strTmp = rs.getString(++index);
        askbillHeader.setDclosedate(strTmp == null ? null : new UFDate(
            strTmp.trim(), false));
        // caskpsn :
        strTmp = rs.getString(++index);
        askbillHeader.setCaskpsn(strTmp);
        // daskdate :
        strTmp = rs.getString(++index);
        askbillHeader.setDaskdate(strTmp == null ? null : new UFDate(
            strTmp.trim(), false));
        // cquotepsn :
        strTmp = rs.getString(++index);
        askbillHeader.setCquotepsn(strTmp);
        // dquotedate :
        strTmp = rs.getString(++index);
        askbillHeader.setDquotedate(strTmp == null ? null : new UFDate(
            strTmp.trim(), false));
        // ctermprotocolid :
        strTmp = rs.getString(++index);
        askbillHeader.setCtermprotocolid(strTmp);
        // caccountyear :
        strTmp = rs.getString(++index);
        askbillHeader.setCaccountyear(strTmp);
        // ibillstatus :
        ibillstatus = (Integer) rs.getObject(++index);
        askbillHeader.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // vdef1 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef1(strTmp);
        // vdef2 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef2(strTmp);
        // vdef3 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef3(strTmp);
        // vdef4 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef4(strTmp);
        // vdef5 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef5(strTmp);
        // vdef6 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef6(strTmp);
        // vdef7 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef7(strTmp);
        // vdef8 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef8(strTmp);
        // vdef9 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef9(strTmp);
        // vdef10 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef10(strTmp);
        // cvendorbaseid :
        strTmp = rs.getString(++index);
        askbillHeader.setCvendorbaseid(strTmp);
        // // vdef11 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef11(strTmp);
        // // vdef12 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef12(strTmp);
        // // vdef13 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef13(strTmp);
        // // vdef14 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef14(strTmp);
        // // vdef15 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef15(strTmp);
        // // vdef16 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef16(strTmp);
        // // vdef17 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef17(strTmp);
        // // vdef18 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef18(strTmp);
        // // vdef19 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef19(strTmp);
        // // vdef20 :
        strTmp = rs.getString(++index);
        askbillHeader.setVdef20(strTmp);

        // // pk_defdoc1 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc1(strTmp);
        // // pk_defdoc2 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc2(strTmp);
        // // pk_defdoc3 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc3(strTmp);
        // // pk_defdoc4 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc4(strTmp);
        // // pk_defdoc5 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc5(strTmp);
        // // pk_defdoc6 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc6(strTmp);
        // // pk_defdoc7 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc7(strTmp);
        // // pk_defdoc8 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc8(strTmp);
        // // pk_defdoc9 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc9(strTmp);
        // // pk_defdoc10 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc10(strTmp);
        // // pk_defdoc11 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc11(strTmp);
        // // pk_defdoc12 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc12(strTmp);
        // // pk_defdoc13 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc13(strTmp);
        // // pk_defdoc14 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc14(strTmp);
        // // pk_defdoc15 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc15(strTmp);
        // // pk_defdoc16 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc16(strTmp);
        // // pk_defdoc17 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc17(strTmp);
        // // pk_defdoc18 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc18(strTmp);
        // // pk_defdoc19 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc19(strTmp);
        // // pk_defdoc20 :
        strTmp = rs.getString(++index);
        askbillHeader.setPKDefDoc20(strTmp);
        // // pk_purorg :
        strTmp = rs.getString(++index);
        askbillHeader.setPk_purorg(strTmp);

        //
        vTmp.addElement(askbillHeader);
      }
      if (vTmp.size() > 0) {
        headers = new AskbillHeaderVO_Old[vTmp.size()];
        vTmp.copyInto(headers);
      }
      if (headers == null || headers.length == 0) {
        SCMEnv.out("未查询出表头数据，返回NULL");
        return null;
      }
      // 查询表体
      AskbillItemVO_Old askbillItem = null;
      AskbillItemVO_Old[] items = null;
      stmt = con.prepareStatement(strSqlBody);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(ScmConst.scmReportMaxRows);
      Object objTmp = null;
      Integer iTmp = null;
      //
      vTmp = new Vector();
      while (rs.next()) {
        index = 0;
        //
        askbillItem = new AskbillItemVO_Old();
        //
        strTmp = rs.getString(++index);
        askbillItem.setCaskbill_bid(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setCaskbillid(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setPk_corp(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setCmangid(strTmp);
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNasknum((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        //
        strTmp = rs.getString(++index);
        askbillItem.setVpackmode(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setDreceivedate(strTmp == null ? null : new UFDate(
            strTmp.trim(), false));
        //
        strTmp = rs.getString(++index);
        askbillItem.setVreveiveaddress(strTmp);
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNnotaxprice((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNintaxprice((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        //
        iTmp = (Integer) rs.getObject(++index);
        askbillItem.setBisorder(iTmp);
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNordernum((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNordernotaxprice((objTmp == null || "".equals(objTmp
            .toString().trim())) ? null : new UFDouble(
            objTmp.toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNorderintaxprice((objTmp == null || "".equals(objTmp
            .toString().trim())) ? null : new UFDouble(
            objTmp.toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNordernotaxmny((objTmp == null || "".equals(objTmp
            .toString().trim())) ? null : new UFDouble(
            objTmp.toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNtaxmny((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        //
        objTmp = rs.getObject(++index);
        askbillItem.setNpricetaxmny((objTmp == null || "".equals(objTmp
            .toString().trim())) ? null : new UFDouble(
            objTmp.toString().trim()));
        //
        strTmp = rs.getString(++index);
        askbillItem.setVmemo(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef1(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef2(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef3(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef4(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef5(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVdef6(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVfree1(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVfree2(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVfree3(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVfree4(strTmp);
        //
        strTmp = rs.getString(++index);
        askbillItem.setVfree5(strTmp);

        // 存货基本档案主键
        strTmp = rs.getString(++index);
        askbillItem.setCbaseid(strTmp);

        // 税率
        objTmp = rs.getObject(++index);
        askbillItem.setTaxratio((objTmp == null || "".equals(objTmp.toString()
            .trim())) ? null : new UFDouble(objTmp
            .toString().trim()));
        // 交货期（天）
        iTmp = (Integer) rs.getObject(++index);
        askbillItem.setDeliverdays(iTmp);
        // 单据行号
        strTmp = rs.getString(++index);
        askbillItem.setRowno(strTmp);
        // 来源信息
        strTmp = rs.getString(++index);
        askbillItem.setCsourcebilltype(strTmp);
        strTmp = rs.getString(++index);
        askbillItem.setCsourcebillid(strTmp);
        strTmp = rs.getString(++index);
        askbillItem.setCsourcebillrowid(strTmp);
        strTmp = rs.getString(++index);
        askbillItem.setCupsourcebilltype(strTmp);
        strTmp = rs.getString(++index);
        askbillItem.setCupsourcebillid(strTmp);
        strTmp = rs.getString(++index);
        askbillItem.setCupsourcebillrowid(strTmp);
        // // vdef7 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef7(strTmp);
        // // vdef8 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef8(strTmp);
        // // vdef9 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef9(strTmp);
        // // vdef10 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef10(strTmp);
        // // vdef11 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef11(strTmp);
        // // vdef12 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef12(strTmp);
        // // vdef13 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef13(strTmp);
        // // vdef14 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef14(strTmp);
        // // vdef15 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef15(strTmp);
        // // vdef16 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef16(strTmp);
        // // vdef17 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef17(strTmp);
        // // vdef18 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef18(strTmp);
        // // vdef19 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef19(strTmp);
        // // vdef20 :
        strTmp = rs.getString(++index);
        askbillItem.setVdef20(strTmp);

        // // pk_defdoc1 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc1(strTmp);
        // // pk_defdoc2 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc2(strTmp);
        // // pk_defdoc3 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc3(strTmp);
        // // pk_defdoc4 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc4(strTmp);
        // // pk_defdoc5 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc5(strTmp);
        // // pk_defdoc6 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc6(strTmp);
        // // pk_defdoc7 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc7(strTmp);
        // // pk_defdoc8 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc8(strTmp);
        // // pk_defdoc9 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc9(strTmp);
        // // pk_defdoc10 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc10(strTmp);
        // // pk_defdoc11 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc11(strTmp);
        // // pk_defdoc12 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc12(strTmp);
        // // pk_defdoc13 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc13(strTmp);
        // // pk_defdoc14 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc14(strTmp);
        // // pk_defdoc15 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc15(strTmp);
        // // pk_defdoc16 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc16(strTmp);
        // // pk_defdoc17 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc17(strTmp);
        // // pk_defdoc18 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc18(strTmp);
        // // pk_defdoc19 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc19(strTmp);
        // // pk_defdoc20 :
        strTmp = rs.getString(++index);
        askbillItem.setPKDefDoc20(strTmp);

        vTmp.addElement(askbillItem);
      }
      if (vTmp.size() > 0) {
        items = new AskbillItemVO_Old[vTmp.size()];
        vTmp.copyInto(items);
      }
      if (items == null || items.length == 0) {
        SCMEnv.out("未查询出表体数据，返回NULL");
        return null;
      }
      Hashtable hTmp = nc.bs.pu.pub.PubDMO.getHashBodyByHeadKey(items,
          "caskbillid");
      if (hTmp == null || hTmp.size() == 0) {
        SCMEnv.out("注意：对所有表体按表头分组时出现异常,返回NULL");
        return null;
      }
      iLen = headers.length;
      vos = new AskbillVO_Old[iLen];
      for (int i = 0; i < iLen; i++) {
        vos[i] = new AskbillVO_Old();
        vos[i].setParentVO(headers[i]);
        vos[i].setChildrenVO((CircularlyAccessibleValueObject[]) hTmp
            .get(headers[i].getPrimaryKey()));
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "findHeaderByPrimaryKey",
        new Object[] { keys });
    /** ********************************************************** */

    return vos;
  }

  /**
   * 获取询价单状态(一张单据)
   * 
   * @return ibillstatus String
   * @param caskbillid
   *            String
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public String getAskBillStatus(String caskbillid) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.sc.order.OrderDMO", "getAskBillStatus",
        new Object[] { caskbillid });
    /** ********************************************************** */
    if (caskbillid == null)
      return null;

    String sql = "select ibillstatus from po_askbill where  caskbillid = ? and dr=0 ";

    Integer ibillstatus = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, caskbillid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        ibillstatus = (Integer) rs.getObject(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.sc.order.OrderDMO", "getAskBillStatus",
        new Object[] { caskbillid });
    /** ********************************************************** */
    // if (ibillstatus.intValue() == 0 || ibillstatus.intValue() == 4)
    // return new UFBoolean(false);
    // if (ibillstatus.intValue() == 3)
    // return new UFBoolean(true);
    return ibillstatus == null ? null : ibillstatus.toString();
  }

  /**
   * 获取询价单状态(批量)
   * 
   * 参数:String[] caskbillids 单据主键数组明。
   * 
   * 返回:HashtablehStatus 状态哈希表{单据主键=单据状态}
   */
  public Hashtable getAskBillStatusHash(String[] caskbillids)
      throws SQLException {

    if (caskbillids == null || caskbillids.length <= 0)
      return null;
    int iLen = caskbillids.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (caskbillids[i] == null)
        continue;
      listDisId.add(caskbillids[i]);
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回null");
      return null;
    }
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    //
    Hashtable hStatus = new Hashtable();
    String sql = "select caskbillid, ibillstatus from po_askbill where caskbillid in "
        + strIdSet + " and dr=0 ";
    //
    Integer ibillstatus = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      String strHid = null;
      while (rs.next()) {
        strHid = rs.getString(1);
        if (strHid == null)
          continue;
        ibillstatus = (Integer) rs.getObject(2);
        if (ibillstatus == null)
          continue;
        hStatus.put(strHid, ibillstatus.toString());
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return hStatus;
  }

  /**
   * @功能：给请购转入的询价单赋相应的供应商相关信息(单张询价单) //付款协议、币种、业务员、采购部门
   * @作者：周晓 创建日期：(2001-8-15 16:58:59)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * @return askbill nc.vo.pp.ask.AskbillVO
   * @param askbill
   *            nc.vo.pp.ask.AskbillVO
   */
//  public AskbillVO_Old getAskInVendorInfos(AskbillVO_Old askbill)
//      throws SQLException {
//    AskbillHeaderVO_Old head = (AskbillHeaderVO_Old) askbill.getParentVO();
//    String cvendormangid = head.getCvendormangid();
//    String sql = "select pk_respdept1,pk_resppsn1,pk_currtype1,pk_payterm from bd_cumandoc ";
//    if (cvendormangid != null && cvendormangid.trim().length() > 0) {
//      sql += "where pk_cumandoc = '";
//      sql += cvendormangid;
//      sql += "'";
//    } else {
//      // 如果客商管理档案主键空则直接返回
//      return askbill;
//    }
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sql);
//      rs = stmt.executeQuery();
//      while (rs.next()) {
//        // 采购部门
//        String dept = rs.getString(1);
//        head.setCdeptid(dept);
//        // 业务员
//        String psn = rs.getString(2);
//        head.setCemployeeid(psn);
//        // 币种
//        String curr = rs.getString(3);
//        head.setCcurrencytypeid(curr);
//        // 付款协议
//        String term = rs.getString(4);
//        head.setCtermprotocolid(term);
//      }
//      askbill.setParentVO(head);
//    } finally {
//      try {
//        if (rs != null)
//          rs.close();
//      } catch (Exception e) {
//
//      }
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//
//    }
//    return askbill;
//  }

  /**
   * @功能：给请购转入的询价单赋相应的供应商相关信息(多张询价单) //付款协议、币种、业务员、采购部门
   * @作者：周晓 创建日期：(2001-8-15 16:58:59)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * @return askbill nc.vo.pp.ask.AskbillVO
   * @param askbill
   *            nc.vo.pp.ask.AskbillVO
   */
//  public AskbillVO_Old[] getAskInVendorInfosArray(AskbillVO_Old[] askbills)
//      throws SQLException {
//
//    AskbillHeaderVO_Old head = null;
//    String cvendormangid = null;
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    Vector v = new Vector();
//    StringBuffer sb = new StringBuffer("");
//    sb
//        .append("select pk_respdept1,pk_resppsn1,pk_currtype1,pk_payterm,pk_cumandoc from bd_cumandoc where pk_cumandoc in ");
//    // 只处理不重复的供应商主键
//    for (int i = 0; i < askbills.length; i++) {
//      head = (AskbillHeaderVO_Old) askbills[i].getParentVO();
//      cvendormangid = head.getCvendormangid();
//      if (cvendormangid != null && cvendormangid.trim().length() > 0
//          && !v.contains(cvendormangid)) {
//        v.addElement(cvendormangid);
//      }
//    }
//    // 如果所有供应商均为空则询价单不做任何处理直接返回
//    if (v == null || v.size() <= 0)
//      return askbills;
//    String[] saPkCuman = new String[v.size()];
//    v.copyInto(saPkCuman);
//    String strIdSet = null;
//    try {
//      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
//      strIdSet = dmoTmpTbl.insertTempTable(saPkCuman,
//          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
//          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//      if (strIdSet == null || strIdSet.trim().equals("()")) {
//        strIdSet = " ('ErrorPk') ";
//      }
//    } catch (Exception e) {
//      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
//          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
//                                   * @res
//                                   * "调用临时表处理出现异常:"
//                                   */
//          + e.getMessage());
//    }
//    sb.append(strIdSet);
//    //
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sb.toString());
//      rs = stmt.executeQuery();
//      String dept, psn, curr, term, pk_cumandoc;
//      Hashtable h = new Hashtable();
//      while (rs.next()) {
//        // 采购部门
//        dept = rs.getString(1);
//        // 业务员
//        psn = rs.getString(2);
//        // 币种
//        curr = rs.getString(3);
//        // 付款协议
//        term = rs.getString(4);
//        // 主键
//        pk_cumandoc = rs.getString(5);
//        if (pk_cumandoc != null && !h.containsKey(pk_cumandoc)) {
//          v = new Vector();
//          v.addElement(dept);
//          v.addElement(psn);
//          v.addElement(curr);
//          v.addElement(term);
//          h.put(pk_cumandoc, v);
//        }
//      }
//      // 处理参数VO[]
//      for (int i = 0; i < askbills.length; i++) {
//        head = (AskbillHeaderVO_Old) askbills[i].getParentVO();
//        cvendormangid = head.getCvendormangid();
//        if (cvendormangid == null || cvendormangid.trim().equals(""))
//          continue;
//        v = (Vector) h.get(cvendormangid);
//        if (v != null) {
//          head.setCdeptid((String) v.get(0));
//          head.setCemployeeid((String) v.get(1));
//          head.setCcurrencytypeid((String) v.get(2));
//          head.setCtermprotocolid((String) v.get(3));
//        }
//        askbills[i].setParentVO(head);
//      }
//    } finally {
//      try {
//        if (rs != null)
//          rs.close();
//      } catch (Exception e) {
//
//      }
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//
//    }
//    return askbills;
//  }

  /**
   * 功能：获取请购单行ID对应的请购单业务类型主键 参数: ArrayList 请购单行ID 返回：ArrayList
   * 请购单行ID对应的请购单业务类型主键 作者：周晓 创建：2004-6-3 19:52:07
   * 
   * @modified by czp , 2006-09-28, 支持辅数量传递到下游订单(委外订单、采购订单)
   */
  public Hashtable getBusiIdForOrd(ArrayList listPara) throws SQLException {

//    ArrayList aryRslt = null;
    PriceauditItemMergeVO item = null;
    Hashtable result = new Hashtable();
    String sql = "select po_praybill_b.cpraybill_bid , po_praybill_b.cbiztype,po_praybill_b.pk_reqcorp,po_praybill_b.pk_reqstoorg,po_praybill_b.cwarehouseid,po_praybill.pk_corp, ";
    sql += "po_praybill_b.cassistunit,po_praybill_b.cprojectid,po_praybill_b.cprojectphaseid,po_praybill_b.vproducenum ";
    sql += ",po_praybill_b.cbaseid ";
    sql += "from po_praybill ";
    sql += "inner join po_praybill_b on po_praybill.cpraybillid = po_praybill_b.cpraybillid ";
    sql += "where po_praybill_b.cpraybill_bid in ";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
      String strIdSet = dmoTempTbl.insertTempTable(listPara,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU12,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
      sql += strIdSet + " ";
      sql += "and po_praybill.dr = 0 and po_praybill_b.dr = 0 ";
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
//      aryRslt = new ArrayList();
      String strBid = null;
      ArrayList<String> listBaseid = new ArrayList<String>();
      ArrayList<String> listCassid = new ArrayList<String>();
      int index = 0;
      while (rs.next()) {
        index = 0;
        strBid = PuPubVO.getString_TrimZeroLenAsNull(rs.getString(++index));
        if(strBid == null){
          continue;
        }
        item = new PriceauditItemMergeVO();
        item.setCbiztype(rs.getString(++index));
        item.setPk_reqcorp(rs.getString(++index));
        item.setPk_reqstoorg(rs.getString(++index));
        item.setPk_creqwareid(rs.getString(++index));
        item.setPk_upsrccorp(rs.getString(++index));
        item.setCassistunit(rs.getString(++index));
        item.setCprojectid(rs.getString(++index));
        item.setCprojectphaseid(rs.getString(++index));
        item.setVproducenum(rs.getString(++index));
        item.setCbaseid(rs.getString(++index));
        
        //为换算率准备数据
        if(PuPubVO.getString_TrimZeroLenAsNull(item.getCassistunit()) != null){
          listBaseid.add(item.getCbaseid());
          listCassid.add(item.getCassistunit());
        }
        
        result.put(strBid, item);
        
        //设置换算率
        if(listBaseid.size() > 0){
          IScmPub srvScmPub = (IScmPub) NCLocator.getInstance().lookup(IScmPub.class.getName());
          HashMap mapRate = srvScmPub.loadBatchInvConvRateInfo(
              (String[]) listBaseid.toArray(new String[listBaseid.size()]), 
              (String[]) listCassid.toArray(new String[listCassid.size()]));
          if(mapRate != null && mapRate.size() > 0){
            Iterator it = result.keySet().iterator();
            Object[] oaRate = null;
            while (it.hasNext()) {
              strBid = (String) it.next();
              if(!mapRate.containsKey(strBid) || mapRate.get(strBid) == null){
                continue;
              }
              oaRate = (Object[]) mapRate.get(strBid);
              if(oaRate.length > 0){
                ((PriceauditItemMergeVO)result.get(strBid)).setNconvertrate((UFDouble)oaRate[0]);
              }
            }
          }
        }
      }
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      SCMEnv.out(e);
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return result;
  }

  /**
   * @功能：根据 存货基本ID + 辅计量主键 给出 1.换算率 2.是否固定换算率
   * @param pk_measdoc
   *            String
   * @return measname String
   */
  public Object[] getConvertFixed(String pk_invbasdoc, String pk_measdoc)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getConvert", new Object[] {
        pk_invbasdoc, pk_measdoc });
    /** ********************************************************** */
    UFDouble ufdConvert = null;
    String strFixed = null;
    UFBoolean ufbFixed = null;
    Object[] arrObjRet = null;
    if (pk_invbasdoc == null)
      return null;
    if ("".equals(pk_invbasdoc.trim()))
      return null;
    if (pk_measdoc == null)
      return null;
    if ("".equals(pk_measdoc.trim()))
      return null;
    String sql = "select mainmeasrate,fixedflag from bd_convert where pk_invbasdoc = ? and pk_measdoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_invbasdoc);
      stmt.setString(2, pk_measdoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        Object bigConvert = rs.getObject(1);
        ufdConvert = ((bigConvert == null || "".equals(bigConvert.toString()
            .trim())) ? null : new UFDouble(bigConvert
            .toString().trim()));
        strFixed = (String) rs.getObject(2);
        ufbFixed = (strFixed == null ? null : new UFBoolean(strFixed
            .trim()));
        arrObjRet = new Object[2];
        arrObjRet[0] = ufdConvert;
        arrObjRet[1] = ufbFixed;
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getConvert", new Object[] {
        pk_invbasdoc, pk_measdoc });
    /** ********************************************************** */
    return arrObjRet;
  }

  /**
   * @功能：返回供应商管理档案ID对应的参考成本和计划价
   * @处理说明： 1.pk_invmandoc 为空或为""时返回 null 1.costprice为空时返回 null
   *        2.planprice为空时返回 null
   * @作者：周晓 创建日期：(2001-11-05 13:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @return aryprice ArrayList
   */
  public ArrayList getCostPlanPriceForThanVO(String pk_invmandoc)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getCostPlanPriceForThanVO", new Object[] { pk_invmandoc });
    /** ********************************************************** */
    if (pk_invmandoc == null)
      return null;
    if ("".equals(pk_invmandoc.trim()))
      return null;
    ArrayList aryprice = null;
    UFDouble costprice = null;
    UFDouble planprice = null;
    String sql = "SELECT costprice, planprice ";
    sql += "FROM bd_invmandoc ";
    sql += "WHERE pk_invmandoc = ? ";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      stmt.setString(1, pk_invmandoc);
      rs = stmt.executeQuery();
      if (rs.next()) {

        aryprice = new ArrayList();

        Object bcostprice = rs.getObject(1);
        if (bcostprice == null
            || "".equals(bcostprice.toString().trim())) {
          costprice = null;
        } else {
          costprice = new UFDouble(bcostprice.toString().trim());
        }
        aryprice.add(0, costprice);

        Object bplanprice = rs.getObject(2);
        if (bplanprice == null
            || "".equals(bplanprice.toString().trim())) {
          planprice = null;
        } else {
          planprice = new UFDouble(bplanprice.toString().trim());
        }
        aryprice.add(1, planprice);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getCostPlanPriceForThanVO",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    return aryprice;
  }

  /**
   * @功能：返回供应商管理档案ID对应的参考成本和计划价的哈希表 返回的HASH以存货管理档案ID为KEY，ARRAYLIST为值
   * @处理说明： 1.pk_invmandoc 为空或为""时返回 null 1.costprice为空时返回 null
   *        2.planprice为空时返回 null
   * @作者：周晓 创建日期：(2003-02-12 13:32:46)
   * @param pk_invmandoc
   *            Vector
   * @return hRslt Hashtable
   */
  public Hashtable getCostPlanPriceForThanVOHash(Vector pk_invmandoc)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getCostPlanPriceForThanVO", new Object[] { pk_invmandoc });
    /** ********************************************************** */
    if (pk_invmandoc == null)
      return null;
    if (pk_invmandoc.size() <= 0)
      return null;
    Hashtable hRslt = new Hashtable();
    ArrayList aryprice = null;
    StringBuffer sb = new StringBuffer(
        "SELECT costprice, planprice,pk_invmandoc ");
    sb.append("FROM bd_invmandoc WHERE pk_invmandoc in ");

    String[] saPkCuman = new String[pk_invmandoc.size()];
    pk_invmandoc.copyInto(saPkCuman);
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkCuman,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sb.append(strIdSet);

    String sql = sb.toString(), strPK = null;

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Object oprice = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      while (rs.next()) {

        aryprice = new ArrayList();
        //
        oprice = rs.getObject(1);
        if (oprice == null || "".equals(oprice.toString().trim())) {
          oprice = null;
        } else {
          oprice = new UFDouble(oprice.toString().trim());
        }
        aryprice.add(0, oprice);
        //
        oprice = rs.getObject(2);
        if (oprice == null || "".equals(oprice.toString().trim())) {
          oprice = null;
        } else {
          oprice = new UFDouble(oprice.toString().trim());
        }
        aryprice.add(1, oprice);
        //
        strPK = rs.getString(3);
        if (strPK != null)
          hRslt.put(strPK, aryprice);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getCostPlanPriceForThanVO",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    if (hRslt == null || hRslt.size() < 0)
      return null;
    return hRslt;
  }

  /**
   * @功能：根据计量主键给出 1.名称
   * @param pk_measdoc
   *            String
   * @return measname String
   */
  public String getCurrtypenameByPk(String pk_currtype) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getCurrtypenameByPk",
        new Object[] { pk_currtype });
    /** ********************************************************** */
    String currtypename = null;
    if (pk_currtype == null)
      return null;
    if ("".equals(pk_currtype.trim()))
      return null;
    String sql = "select currtypename from bd_currtype where pk_currtype = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_currtype);
      rs = stmt.executeQuery();
      if (rs.next()) {
        currtypename = rs.getString(1);
        if (currtypename != null) {
          currtypename = currtypename.trim();
        }
        if ("".equals(currtypename)) {
          currtypename = null;
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getCurrtypenameByPk",
        new Object[] { pk_currtype });
    /** ********************************************************** */
    return currtypename;
  }
  /**
   * @功能：根据计量主键给出 1.名称
   * @param pk_measdoc
   *            String
   * @return measname String
   */
  public Hashtable getCurrtypenameByPkForBantch(String[] pk_currtypes,String funcNode) throws SQLException {
    
    String currtypename = null;
    String pk_currtype = null;
    Hashtable result = new Hashtable();
    if (pk_currtypes == null)
      return null;
    if (pk_currtypes.length == 0)
      return null;
    String[] saPkInv = pk_currtypes;
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    String sql = "select currtypename,pk_currtype from bd_currtype where pk_currtype in " + strIdSet + " ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      while (rs.next()) {
        currtypename = rs.getString(1);
        if (currtypename != null) {
          currtypename = currtypename.trim();
        }
        if ("".equals(currtypename)) {
          currtypename = null;
        }
        pk_currtype = rs.getString(2);
        if(pk_currtype != null && pk_currtype.trim().length() > 0 &&
            currtypename != null && currtypename.trim().length() > 0 
            && !result.containsKey(pk_currtype)){
          result.put(pk_currtype, currtypename);
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }
  /**
   * 根据币种名称取得币种ID 创建日期：(2001-10-27 13:34:00)
   * 
   * @return java.lang.String
   * @param currname
   *            java.lang.String
   */
  public String getCurrtypePkByCurrName(String currname) throws SQLException {
    if (currname == null)
      return null;
    if ("".equals(currname.trim()))
      return null;
    String currid = null;
    String sql = "SELECT pk_currtype ";
    sql += "FROM bd_currtype ";
    sql += "WHERE RTRIM(LTRIM(currtypename)) = ? ";
    currname = currname.trim();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, currname);
      rs = stmt.executeQuery();
      while (rs.next()) {
        currid = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return currid;
  }

  /**
   * @功能：供应商 pk_cumandoc -> 订单表头默认值 业务类型：pk_cumandoc ->
   *         bd_invmandoc.pk_defbusitype
   * @return strBusitype String
   * @param pk_cumandoc
   *            String
   */
  public String getDefBusitypeByCmangid(String pk_cumandoc)
      throws SQLException {
    String pk_defbusitype = null;
    if (pk_cumandoc == null)
      return null;
    if ("".equals(pk_cumandoc.trim()))
      return null;
    String sql = "";
    sql += "select ";
    sql += "bd_cumandoc.pk_defbusitype ";
    sql += "from bd_cumandoc ";
    sql += "where bd_cumandoc.pk_cumandoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_cumandoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        // 业务类型：cmangid -> bd_invmandoc.pk_defbusitype
        pk_defbusitype = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
    }
    return pk_defbusitype;
  }

  /**
   * 参见订单VO PoVendorVO
   * 
   * @功能：供应商 pk_cumandoc -> 订单表头默认值 发运方式：pk_cumandoc ->
   *         bd_invmandoc.pk_sendtype 默认仓库：pk_cumandoc ->
   *         bd_invmandoc.pk_stordoc2 业务类型：pk_cumandoc ->
   *         bd_invmandoc.pk_defbusitype 发票方： pk_cumandoc ->
   *         bd_invmandoc.pk_cusmandoc2 开票客商 (如果为空则与供应商相同) 开户银行：pk_cumandoc ->
   *         pk_cubasdoc -> bd_custbank.pk_custbank where
   *         upper(bd_custbank.defflag) = "Y" 发货地址：pk_cumandoc -> pk_cubasdoc ->
   *         bd_custaddr.pk_custaddr where upper(bd_custaddr.defaddrflag) =
   *         "Y" 专管业务员： pk_cumandoc -> bd_cumandoc.pk_resppsn1 专管部门：
   *         pk_cumandoc -> bd_cumandoc.pk_respdept1 默认付款协议：pk_cumandoc ->
   *         bd_cumandoc.pk_payterm
   * @return aryRetDefInfos ArrayList
   * @param pk_cumandoc
   *            String
   */
  public ArrayList getDefInfoByCmangid(String pk_cumandoc)
      throws SQLException {
    ArrayList aryRetDefInfos = null;
    PoVendorVO vo = null;
    Hashtable hRetDefInfo = null;
    hRetDefInfo = getHashtableVendorDataMy(null, null, null);
    if (hRetDefInfo == null)
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40040701", "UPP40040701-000030")/*
                                   * @res
                                   * "查询不到供应商管理档案对应的默认信息"
                                   */);
    vo = (PoVendorVO) hRetDefInfo.get(pk_cumandoc);
    if (vo == null)
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40040701", "UPP40040701-000030")/*
                                   * @res
                                   * "查询不到供应商管理档案对应的默认信息"
                                   */);
    aryRetDefInfos = new ArrayList();
    aryRetDefInfos.add(vo.getCsendtype());
    aryRetDefInfos.add(vo.getCstordoc2());
    aryRetDefInfos.add(getDefBusitypeByCmangid(pk_cumandoc));
    aryRetDefInfos.add(vo.getCcusmandoc2());
    aryRetDefInfos.add(vo.getCcustbank());
    aryRetDefInfos.add(vo.getCcustaddr());
    aryRetDefInfos.add(vo.getCresppsn1());
    aryRetDefInfos.add(vo.getCrespdept1());
    aryRetDefInfos.add(vo.getCpayterm());
    //
    aryRetDefInfos.add(vo.getCaccount());
    aryRetDefInfos.add(vo.getCcubasdoc());
    aryRetDefInfos.add(vo.getCcurrtype1());
    aryRetDefInfos.add(vo.getFreecustflag());
    //
    return aryRetDefInfos;
  }

  /**
   * 取客商信用额度、默认部门、默认业务员、默认发票方、默认发运方式、默认付款协议
   * 
   * 查询条件 ： 排序 ： 适用BO方法： queryForOrdQuery(String,String,int)
   * 
   * 创建日期：(2001-5-14)
   * 
   * @return Vector 0客商信用额度 1默认部门 2默认业务员 3默认发票方 4默认发运方式 5默认付款协议
   * @param unitCode
   *            int
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public Hashtable getHashtableVendorDataMy(String pk_corp,
      String cvendormangid, String cvendorbaseid) throws SQLException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    // beforeCallMethod("nc.bs.po.OrderDMO", "queryAll", new
    // Object[]{unitCode});
    /** ********************************************************** */

    // 取客商信用额度
    String sql = "select o.pk_cumandoc, o.pk_cubasdoc, o.pk_corp, o.pk_respdept1, o.pk_resppsn1, o.pk_currtype1, o.pk_cusmandoc2, o.pk_cusmandoc3, o.pk_sendtype, o.pk_stordoc2, o.pk_payterm, p.pk_custbank, p.account, q.pk_custaddr, r.freecustflag from bd_cumandoc o left outer join bd_custbank p on (o.pk_cubasdoc = p.pk_cubasdoc and o.dr = p.dr and upper(p.defflag) = 'Y') left outer join bd_custaddr q on (o.pk_cubasdoc = q.pk_cubasdoc and o.dr = q.dr and upper(q.defaddrflag) = 'Y') left outer join bd_cubasdoc r on (o.pk_cubasdoc = r.pk_cubasdoc and o.dr = r.dr) where o.dr = 0 and upper(o.frozenflag) = 'N' and (o.custflag = '1' or o.custflag = '3')";
    if (pk_corp != null) {
      sql = sql + " and o.pk_corp = '" + pk_corp + "'";
    }
    if (cvendormangid != null) {
      sql = sql + " and o.pk_cumandoc = '" + cvendormangid + "'";
    }
    if (cvendorbaseid != null) {
      sql = sql + " and o.pk_cubasdoc = '" + cvendorbaseid + "'";
    }

    Connection con = null;
    PreparedStatement stmt = null;
    Hashtable table = new Hashtable();
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      rs = stmt.executeQuery();
      while (rs.next()) {
        PoVendorVO vo = new PoVendorVO();

        String cumandoc = rs.getString(1);
        if (cumandoc == null)
          continue;
        vo.setCcumandoc(cumandoc);
        String cubasdoc = rs.getString(2);
        vo.setCcubasdoc(cubasdoc);
        pk_corp = rs.getString(3);
        vo.setPk_corp(pk_corp);
        String dept = rs.getString(4);
        vo.setCrespdept1(dept);
        String psn = rs.getString(5);
        vo.setCresppsn1(psn);
        String currtype = rs.getString(6);
        vo.setCcurrtype1(currtype);
        String cusmandoc2 = rs.getString(7);
        vo.setCcusmandoc2(cusmandoc2);
        String cusmandoc3 = rs.getString(8);
        vo.setCcusmandoc3(cusmandoc3);
        String sendtype = rs.getString(9);
        vo.setCsendtype(sendtype);
        String stor = rs.getString(10);
        vo.setCstordoc2(stor);
        String cpayterm = rs.getString(11);
        vo.setCpayterm(cpayterm);
        String cbank = rs.getString(12);
        vo.setCcustbank(cbank);
        String caccount = rs.getString(13);
        vo.setCaccount(caccount);
        String caddr = rs.getString(14);
        vo.setCcustaddr(caddr);
        String freecustflag = rs.getString(15);
        vo.setFreecustflag(freecustflag);

        table.put(cumandoc, vo);

      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    // afterCallMethod("nc.bs.po.OrderDMO", "queryAll", new
    // Object[]{unitCode});
    /** ********************************************************** */

    return table;
  }

  /**
   * @功能：根据一个存货主键给比相关存货相关信息值 1.编码 2.名称 3.规格 4.型号 5.主计量ID 6.税目税率ID
   * @param pk_invbasdoc
   *            String
   * @return aryInvInfos ArrayList
   */
  public ArrayList getInvInfosByPk(String pk_invbasdoc) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getInvInfosByPk",
        new Object[] { pk_invbasdoc });
    /** ********************************************************** */
    ArrayList aryInvInfos = null;
    if (pk_invbasdoc == null)
      return null;
    if ("".equals(pk_invbasdoc.trim()))
      return null;
    String sql = "select bd_invbasdoc.invcode, bd_invbasdoc.invname, bd_invbasdoc.invspec,bd_invbasdoc.invtype,bd_invbasdoc.pk_measdoc,bd_invbasdoc.pk_taxitems,bd_measdoc.measname,bd_taxitems.taxratio,bd_invmandoc.costprice, bd_invmandoc.planprice    from bd_invbasdoc left outer join bd_invmandoc on bd_invbasdoc.pk_invbasdoc = bd_invmandoc.pk_invbasdoc left outer join bd_measdoc on bd_invbasdoc.pk_measdoc = bd_measdoc.pk_measdoc left outer join bd_taxitems on bd_invbasdoc.pk_taxitems =  bd_taxitems.pk_taxitems where bd_invbasdoc.pk_invbasdoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_invbasdoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        aryInvInfos = new ArrayList();

        String invcode = rs.getString(1);
        aryInvInfos.add(invcode == null ? null : invcode.trim());

        String invname = rs.getString(2);
        aryInvInfos.add(invname == null ? null : invname.trim());

        String invtype = rs.getString(3);
        aryInvInfos.add(invtype == null ? null : invtype.trim());

        String invspec = rs.getString(4);
        aryInvInfos.add(invspec == null ? null : invspec.trim());

        String pk_measdoc = rs.getString(5);
        aryInvInfos.add(pk_measdoc == null ? null : pk_measdoc.trim());

        String pk_taxitems = rs.getString(6);
        aryInvInfos
            .add(pk_taxitems == null ? null : pk_taxitems.trim());
        
        String measname = rs.getString(7);
        aryInvInfos.add(measname == null ? null : measname.trim());

        String taxratio = rs.getString(8);
        aryInvInfos
            .add(taxratio == null ? null : taxratio.trim());
        
        String costprice = rs.getString(9);
        aryInvInfos.add(costprice == null ? null : costprice.trim());

        String planprice = rs.getString(10);
        aryInvInfos
            .add(planprice == null ? null : planprice.trim());

      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getInvInfosByPk",
        new Object[] { pk_invbasdoc });
    /** ********************************************************** */
    return aryInvInfos;
  }
  /**
   * @功能：根据一个存货主键给比相关存货相关信息值 1.编码 2.名称 3.规格 4.型号 5.主计量ID 6.税目税率ID
   * @param pk_invbasdoc
   *            String
   * @return aryInvInfos ArrayList
   */
  public Hashtable getInvInfosByPkForBantch(String[] pk_invbasdocs,String funcNode) throws SQLException {
    
    ArrayList aryInvInfos = null;
    Hashtable result = new Hashtable();
    if (pk_invbasdocs == null)
      return null;
    if (pk_invbasdocs.length == 0)
      return null;
    String[] saPkInv = pk_invbasdocs;
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_ASK_10,
          "cmangid");
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    String sql = "select bd_invbasdoc.invcode, bd_invbasdoc.invname, bd_invbasdoc.invspec,bd_invbasdoc.invtype,bd_invbasdoc.pk_measdoc,bd_invbasdoc.pk_taxitems,bd_measdoc.measname,bd_taxitems.taxratio,bd_invmandoc.costprice, bd_invmandoc.planprice,bd_invbasdoc.pk_invbasdoc    from bd_invbasdoc left outer join bd_invmandoc on bd_invbasdoc.pk_invbasdoc = bd_invmandoc.pk_invbasdoc left outer join bd_measdoc on bd_invbasdoc.pk_measdoc = bd_measdoc.pk_measdoc left outer join bd_taxitems on bd_invbasdoc.pk_taxitems =  bd_taxitems.pk_taxitems where bd_invbasdoc.pk_invbasdoc in  "+ strIdSet + " " ;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      while (rs.next()) {
        aryInvInfos = new ArrayList();

        String invcode = rs.getString(1);
        aryInvInfos.add(invcode == null ? null : invcode.trim());

        String invname = rs.getString(2);
        aryInvInfos.add(invname == null ? null : invname.trim());

        String invtype = rs.getString(3);
        aryInvInfos.add(invtype == null ? null : invtype.trim());

        String invspec = rs.getString(4);
        aryInvInfos.add(invspec == null ? null : invspec.trim());

        String pk_measdoc = rs.getString(5);
        aryInvInfos.add(pk_measdoc == null ? null : pk_measdoc.trim());

        String pk_taxitems = rs.getString(6);
        aryInvInfos
            .add(pk_taxitems == null ? null : pk_taxitems.trim());
        
        String measname = rs.getString(7);
        aryInvInfos.add(measname == null ? null : measname.trim());

        String taxratio = rs.getString(8);
        aryInvInfos
            .add(taxratio == null ? null : taxratio.trim());
        
        String costprice = rs.getString(9);
        aryInvInfos.add(costprice == null ? null : costprice.trim());

        String planprice = rs.getString(10);
        aryInvInfos
            .add(planprice == null ? null : planprice.trim());
        String pk_invbasdoc = rs.getString(11);
        if(pk_invbasdoc != null && !result.containsKey(pk_invbasdoc)){
          result.put(pk_invbasdoc, aryInvInfos);
        }

      }
      
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }
  /**
   * @功能：根据计量主键给出 1.名称
   * @param pk_measdoc
   *            String
   * @return measname String
   */
  public String getMeasnameByPk(String pk_measdoc) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getMeasnameByPk",
        new Object[] { pk_measdoc });
    /** ********************************************************** */
    String measname = null;
    if (pk_measdoc == null)
      return null;
    if ("".equals(pk_measdoc.trim()))
      return null;
    String sql = "select measname from bd_measdoc where pk_measdoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_measdoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        measname = rs.getString(1);
        if (measname != null) {
          measname = measname.trim();
        }
        if ("".equals(measname)) {
          measname = null;
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getMeasnameByPk",
        new Object[] { pk_measdoc });
    /** ********************************************************** */
    return measname;
  }

  /**
   * @功能：获取一个主键
   * @作者：周晓 创建日期：(2001-9-19 11:06:42)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @return java.lang.String
   */
  public String getOIDMy() throws SQLException {
    String key = null;
    try {
      key = getOID();
    } catch (Exception e) {
      SCMEnv.out(e.getMessage());
      throw new SQLException(e.getMessage());
    }
    return key;
  }

  /**
   * @功能：根据人员档案主键获取所在部门主键
   * @作者：周晓 创建日期：(2001-9-14 11:06:11)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @return java.lang.String
   * @param pk_psndoc
   *            java.lang.String
   */
  public String getPkDeptByPkPsn(String pk_psndoc) throws SQLException {
    String pk_deptdoc = null;
    String sql = "select pk_deptdoc from bd_psndoc where pk_psndoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (pk_psndoc != null)
        stmt.setString(1, pk_psndoc);
      else
        stmt.setNull(1, Types.CHAR);
      rs = stmt.executeQuery();
      if (rs.next()) {
        pk_deptdoc = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      if (con != null) {
        con.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
    return pk_deptdoc;
  }

  /**
   * @功能：返回订单最新无税本币单价
   * @处理：订单本币金额/订单数量 说明： 1.订货数量非空 2.本币金额非空 3.订单行非作废 4.订单状态为审批 5 po_order_b.ts
   *                 最大 6.公司条件 7.存货条件
   * @作者：周晓 创建日期：(2001-6-16 17:32:46) 修改日期：(2001-11-20 20:13:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_corp
   *            java.lang.String
   * @return newprice UFDouble
   */
  public UFDouble getPriceLastForThanVO(String pk_invmandoc, String pk_corp)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getNewPriceForThanVO",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    UFDouble newprice = null;
    UFDouble nmoney = null;
    UFDouble nordernum = null;
    StringBuffer sql = new StringBuffer("select top 1 nmoney, nordernum ");
    sql.append("from po_order_b ");
    sql.append("inner join po_order on po_order_b.corderid = po_order.corderid ");
    sql.append("where po_order.forderstatus = 3 ");
    sql.append("and po_order.dr = 0 ");
    sql.append("and po_order_b.dr = 0 ");
    sql.append("and po_order_b.nmoney is not null ");
    sql.append("and po_order_b.nordernum is not null ");
    sql.append("and po_order.pk_corp = '" + pk_corp + "' ");
    sql.append("and po_order_b.cmangid = '" + pk_invmandoc + "' ");
    sql.append("and po_order_b.ts = ");
    sql.append("(select max(po_order_b.ts) from po_order_b ");
    sql.append("inner join po_order on po_order_b.corderid = po_order.corderid ");
    sql.append("where po_order.forderstatus = 3 ");
    sql.append("and po_order.dr = 0 ");
    sql.append("and po_order_b.dr = 0 ");
    sql.append("and po_order_b.nmoney is not null ");
    sql.append("and po_order_b.nordernum is not null ");
    sql.append("and po_order.pk_corp = '" + pk_corp + "' ");
    sql.append("and po_order_b.cmangid = '" + pk_invmandoc + "' ");
    sql.append(")");
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      if (rs.next()) {
        Object bnmoney = rs.getObject(1);
        if (bnmoney == null || "".equals(bnmoney.toString().trim()))
          return null;
        nmoney = new UFDouble(bnmoney.toString().trim());
        Object bnordernum = rs.getObject(2);
        if (bnordernum == null
            || "".equals(bnordernum.toString().trim()))
          return null;
        nordernum = new UFDouble(bnordernum.toString().trim());
        if (bnordernum.equals(new UFDouble(0)))
          return null;
        newprice = nmoney.div(nordernum);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getNewPriceForThanVO",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    return newprice;
  }

  /**
   * @功能：返回订单最新无税本币单价哈希表 哈希表结构： KEY，存货管理档案ID VAL, 订单本币金额/订单数量 返回值处理说明：
   *                     1.订货数量非空 2.本币金额非空 3.订单行非作废 4.订单状态为审批 5 po_order_b.ts
   *                     最大 6.公司条件 7.存货条件
   * @作者：周晓 创建日期：(2001-6-16 17:32:46) 修改日期：(2001-11-20 20:13:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_corp
   *            java.lang.String
   * @return newprice UFDouble
   * V55 重构 使用订单提供的方法进行询最新价 modify by donggq 2008-10-30 
   * 明晚万圣节 小心小鬼出来吓唬人，哈哈哈
   */
  public Hashtable getPriceLastForThanVOHash(Vector vCmangid,
      String pk_corp) throws SQLException {
	  Hashtable hmRet = new Hashtable();
	  String[] cmangids = new String[vCmangid.size()];
	  String[] cbaseids = null;
	  String[] pk_purcorp = null;
	  vCmangid.toArray(cmangids);
	  UFDouble[] price = null;
	  try{
		  PubImpl pubImpl = new PubImpl();
		  Object[][] retOb = pubImpl.queryArrayValue("bd_invmandoc",
				  "pk_invmandoc", new String[] { "pk_invbasdoc","pk_invmandoc" }, cmangids);
		  Hashtable paraForPrice = new Hashtable();
		  Vector tempVbas = new Vector();
		  Vector tempVman = new Vector();
		  if (retOb != null) {
			  for (int i = 0; i < retOb.length; i++) {
				  if (retOb[i] != null && retOb[i][0] != null &&retOb[i][1] != null) {
					  tempVbas.add((String) retOb[i][0]);
					  tempVman.add((String) retOb[i][1]);
				  }
			  }
		  }
		  if (tempVbas.size() > 0) {
				cbaseids = new String[tempVbas.size()];
				tempVbas.copyInto(cbaseids);
				cmangids = new String[tempVman.size()];
				tempVman.copyInto(cmangids);
		  }
		  pk_purcorp = new String[cmangids.length];
		  for (int i = 0; i < cmangids.length; i++) {
			  pk_purcorp[i] = pk_corp;
		  }
		  price = new OrderDMO().queryNewPriceArray(pk_purcorp, cbaseids,false);
	  }catch(Exception e){
		  SCMEnv.out(e);
	  }
	  if(price != null){
		  for (int i = 0; i < price.length; i++) {
			  if(!hmRet.containsKey(cmangids[i]) && price[i] != null){
				  hmRet.put(cmangids[i],price[i]);
			  }
		  }
	  }
	  return hmRet;
  }

  /**
   * @功能：返回发票最新报价
   * @说明：符合条件的记录中 ts 时间截最大 无税最新价---------------------------------
   *              1.直接取发票原币无税单价 非空、非零 含税单价-----------------------------------
   *              1.取原币无税单价 非空、非零 2.取税率：空 处理成 零 3.含税单价 = 原币无税单价*(1+税率)
   * @作者：周晓 创建日期：(2001-11-17 17:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_curtype
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return newprice UFDouble
   */
  public UFDouble getPriceLastInvoice(String pk_invmandoc, String pk_curtype,
      boolean isIntax, String strSQL) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastInvoice",
        new Object[] { pk_invmandoc, pk_curtype,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    UFDouble newprice = null;

    String colNames = " ";
    colNames += "po_invoice_b.noriginalcurprice";
    if (isIntax)
      colNames += ",coalesce(po_invoice_b.ntaxrate,0) ";
    StringBuffer allStrSQL = new StringBuffer(strSQL);
    allStrSQL.append("and po_invoice_b.cmangid = '" + pk_invmandoc + "' ");
    allStrSQL.append("and po_invoice_b.ccurrencytypeid = '" + pk_curtype
        + "' ");
    allStrSQL.append("and po_invoice_b.noriginalcurprice is not null ");
    allStrSQL.append("and po_invoice_b.noriginalcurprice <> 0 ");

    StringBuffer sql = new StringBuffer(" ");
    sql = new StringBuffer("select top 1 ");
    sql.append(colNames + " ");
    sql.append(allStrSQL + " ");
    sql.append("and po_invoice_b.ts = ");
    sql.append("(select max(po_invoice_b.ts) ");
    sql.append(allStrSQL);
    sql.append(")");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      if (rs.next()) {
        if (isIntax) {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = new UFDouble(bprice);
          BigDecimal bntaxrate = rs.getBigDecimal(2);
          UFDouble ntaxrate = new UFDouble(bntaxrate);
          newprice = newprice.multiply((ntaxrate.div(100)).add(1));
        } else {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = ((bprice == null || bprice
              .equals(new UFDouble(0))) ? null : new UFDouble(
              bprice));
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastInvoice",
        new Object[] { pk_invmandoc, pk_curtype,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    return newprice;
  }
  
  /**
   * @功能：返回发票最新报价
   * @说明：符合条件的记录中 ts 时间截最大 无税最新价---------------------------------
   *              1.直接取发票原币无税单价 非空、非零 含税单价-----------------------------------
   *              1.取原币无税单价 非空、非零 2.取税率：空 处理成 零 3.含税单价 = 原币无税单价*(1+税率)
   * @作者：周晓 创建日期：(2001-11-17 17:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_curtype
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return newprice UFDouble
   */
  public Hashtable getPriceLastInvoiceForBantch(String[] pk_invmandocs, String[] pk_curtypes,
      boolean isIntax, String strSQL,String funcNode) throws SQLException {
    
    UFDouble newprice = null;
    Hashtable result = new Hashtable();
    String cmangid = null;
    String ccurrencytypeid = null;
    String[] saPkInv = pk_invmandocs;
    String strIdSet = null;
//    String[] saPkCuType = pk_curtypes;
    String strIdSetForCuType = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_ASK_10,
          "cmangid");
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
      nc.bs.scm.pub.TempTableDMO dmoTmpTblForCuType = new nc.bs.scm.pub.TempTableDMO();
      strIdSetForCuType = dmoTmpTblForCuType.insertTempTable(pk_curtypes,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PO006,
          "corder_bid");
      if (strIdSetForCuType == null || "()".equals(strIdSetForCuType.trim())) {
        strIdSetForCuType = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }

    String colNames = " ";
    colNames += "po_invoice_b.noriginalcurprice";
    if (isIntax)
      colNames += ",coalesce(po_invoice_b.ntaxrate,0) ";
    colNames += " ,po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ";
    StringBuffer allStrSQL = new StringBuffer(strSQL);
    allStrSQL.append("and po_invoice_b.cmangid in " + strIdSet + " ");
    allStrSQL.append("and po_invoice_b.ccurrencytypeid in " + strIdSetForCuType + " ");
    allStrSQL.append("and po_invoice_b.noriginalcurprice is not null ");
    allStrSQL.append("and po_invoice_b.noriginalcurprice <> 0 ");

    StringBuffer sql = new StringBuffer(" ");
    sql = new StringBuffer("select top 1 ");
    sql.append(colNames + " ");
    sql.append(allStrSQL + " ");
    sql.append("and po_invoice_b.ts = ");
    sql.append("(select max(po_invoice_b.ts) ");
    sql.append(allStrSQL);
    sql.append(")");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      while (rs.next()) {
        if (isIntax) {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = new UFDouble(bprice);
          BigDecimal bntaxrate = rs.getBigDecimal(2);
          UFDouble ntaxrate = new UFDouble(bntaxrate);
          newprice = newprice.multiply((ntaxrate.div(100)).add(1));
        } else {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = ((bprice == null || bprice
              .equals(new UFDouble(0))) ? null : new UFDouble(
              bprice));
        }
        if(isIntax){
         cmangid = rs.getString(3);
         ccurrencytypeid = rs.getString(4);
        }else{
         cmangid = rs.getString(2);
         ccurrencytypeid = rs.getString(3); 
        }
         
         if(cmangid != null && cmangid.trim().length() > 0
             && ccurrencytypeid != null && ccurrencytypeid.trim().length() > 0
             && !result.containsKey(cmangid+ccurrencytypeid)){
           result.put(cmangid+ccurrencytypeid, newprice);
         }
         
         
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }

  /**
   * @功能：返回订单最新报价
   * @说明：符合条件的记录中 ts 时间截最大 无税最新价--------------------------------- 1.直接取订单无税净单价
   *              非空、非零 含税单价----------------------------------- 1.取原币净单价 非空、非零
   *              2.取税率：空 处理成 零 3.含税单价 = 原币净单价*(1+税率)
   * @作者：周晓 创建日期：(2001-11-17 17:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_curtype
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return newprice UFDouble
   */
  public UFDouble getPriceLastOrder(String pk_invmandoc, String pk_curtype,
      boolean isIntax, String strSQL) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastOrder",
        new Object[] { pk_invmandoc, pk_curtype,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    UFDouble newprice = null;

    String colNames = " ";
    colNames += "po_order_b.noriginalnetprice";
    if (isIntax)
      colNames += ",coalesce(po_order_b.ntaxrate,0) ";
    StringBuffer allStrSQL = new StringBuffer(strSQL);
    allStrSQL.append("and po_order_b.cmangid = '" + pk_invmandoc + "' ");
    allStrSQL.append("and po_order_b.ccurrencytypeid = '" + pk_curtype
        + "' ");
    allStrSQL.append("and po_order_b.noriginalnetprice is not null ");
    allStrSQL
        .append("and po_order_b.noriginalnetprice <> 0 and  po_order_b.iisreplenish = 0 ");

    StringBuffer sql = new StringBuffer(" ");
    sql.append("select top 1 ");
    sql.append(colNames + " ");
    sql.append(allStrSQL + " ");
    sql.append("and po_order_b.ts = ");
    sql.append("(select max(po_order_b.ts) ");
    sql.append(allStrSQL);
    sql.append(")");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      if (rs.next()) {
        if (isIntax) {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = new UFDouble(bprice);
          BigDecimal bntaxrate = rs.getBigDecimal(2);
          UFDouble ntaxrate = new UFDouble(bntaxrate);
          newprice = newprice.multiply((ntaxrate.div(100)).add(1));
        } else {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = ((bprice == null || bprice
              .equals(new UFDouble(0))) ? null : new UFDouble(
              bprice));
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastOrder",
        new Object[] { pk_invmandoc, pk_curtype,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    return newprice;
  }
  /**
   * @功能：返回订单最新报价
   * @说明：符合条件的记录中 ts 时间截最大 无税最新价--------------------------------- 1.直接取订单无税净单价
   *              非空、非零 含税单价----------------------------------- 1.取原币净单价 非空、非零
   *              2.取税率：空 处理成 零 3.含税单价 = 原币净单价*(1+税率)
   * @作者：周晓 创建日期：(2001-11-17 17:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_curtype
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return newprice UFDouble
   */
  public Hashtable getPriceLastOrderForBantch(String[] pk_invmandocs, String[] pk_curtypes,
      boolean isIntax, String strSQL,String funcNode) throws SQLException {
    
    UFDouble newprice = null;
    Hashtable result = new Hashtable();
    String cmangid = null;
    String ccurrencytypeid = null;
    String[] saPkInv = pk_invmandocs;
    String strIdSet = null;
//    String[] saPkCuType = pk_curtypes;
    String strIdSetForCuType = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_ASK_10,
          "cmangid");
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
      nc.bs.scm.pub.TempTableDMO dmoTmpTblForCuType = new nc.bs.scm.pub.TempTableDMO();
      strIdSetForCuType = dmoTmpTblForCuType.insertTempTable(pk_curtypes,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PO006,
          "corder_bid");
      if (strIdSetForCuType == null || "()".equals(strIdSetForCuType.trim())) {
        strIdSetForCuType = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    String colNames = " ";
    colNames += "po_order_b.noriginalnetprice";
    if (isIntax)
      colNames += ",coalesce(po_order_b.ntaxrate,0) ";
    colNames += " ,po_order_b.cmangid,po_order_b.ccurrencytypeid ";
    StringBuffer allStrSQL = new StringBuffer(strSQL);
    allStrSQL.append("and po_order_b.cmangid in " + strIdSet + " ");
    allStrSQL.append("and po_order_b.ccurrencytypeid in " + strIdSetForCuType + " ");
    allStrSQL.append("and po_order_b.noriginalnetprice is not null ");
    allStrSQL
        .append("and po_order_b.noriginalnetprice <> 0 and  po_order_b.iisreplenish = 0 ");

    StringBuffer sql = new StringBuffer(" ");
    sql.append("select top 1 ");
    sql.append(colNames + " ");
    sql.append(allStrSQL + " ");
    sql.append("and po_order_b.ts = ");
    sql.append("(select max(po_order_b.ts) ");
    sql.append(allStrSQL);
    sql.append(")");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      while (rs.next()) {
        if (isIntax) {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = new UFDouble(bprice);
          BigDecimal bntaxrate = rs.getBigDecimal(2);
          UFDouble ntaxrate = new UFDouble(bntaxrate);
          newprice = newprice.multiply((ntaxrate.div(100)).add(1));
        } else {
          BigDecimal bprice = rs.getBigDecimal(1);
          newprice = ((bprice == null || bprice
              .equals(new UFDouble(0))) ? null : new UFDouble(
              bprice));
        }
        if (isIntax) {
         cmangid = rs.getString(3);
         ccurrencytypeid = rs.getString(4);
        }else{
         cmangid = rs.getString(2);
         ccurrencytypeid = rs.getString(3);
        }
         
         if(cmangid != null && cmangid.trim().length() > 0
             && ccurrencytypeid != null && ccurrencytypeid.trim().length() > 0
             && !result.containsKey(cmangid+ccurrencytypeid)){
           result.put(cmangid+ccurrencytypeid, newprice);
         }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }
  /**
   * @功能：供应商报价的 最大值、最小值、平均值 说明：strSQL 中已经过滤掉为空的报价,所以此处算出的是有效的平均报价 存货管理档案ID +
   *            币种ID + 查询条件 的 最大报价、最低报价、平均报价
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param boolean
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return aryprice ArrayList
   */
  public ArrayList getPricesForQuoteConVO(String cmangid,
      String ccurrencytypeid, boolean isIntax, String strSQL)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getPricesForQuoteConVO",
        new Object[] { cmangid, ccurrencytypeid,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    ArrayList aryprice = null;
    UFDouble maxprice = null;
    UFDouble minprice = null;
    UFDouble avgprice = null;
    String priceColName = "po_askbill_bb1.nquoteprice";
    if (isIntax)
      priceColName = "po_askbill_bb1.nquotetaxprice";
    StringBuffer sql = new StringBuffer("SELECT MAX(coalesce("
        + priceColName + ",0)), MIN(coalesce(" + priceColName
        + ",0)) ,AVG(coalesce(" + priceColName + ",0)) ");
    sql.append(strSQL + " ");
    sql.append("and po_askbill_b.cmangid = ? ");
    sql.append("and po_askbill.ccurrencytypeid = ? ");
    sql.append("group by po_askbill_b.cmangid,po_askbill.ccurrencytypeid ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());

      stmt.setString(1, cmangid);
      stmt.setString(2, ccurrencytypeid);
      rs = stmt.executeQuery();
      if (rs.next()) {
        aryprice = new ArrayList();
        BigDecimal bmaxprice = rs.getBigDecimal(1);
        if (bmaxprice == null) {
          maxprice = null;
        } else {
          maxprice = new UFDouble(bmaxprice);
        }
        aryprice.add(0, maxprice);

        BigDecimal bminprice = rs.getBigDecimal(2);
        if (bminprice == null) {
          minprice = null;
        } else {
          minprice = new UFDouble(bminprice);
        }
        aryprice.add(1, minprice);

        BigDecimal bavgprice = rs.getBigDecimal(3);
        if (bavgprice == null) {
          avgprice = null;
        } else {
          avgprice = new UFDouble(bavgprice);
        }
        aryprice.add(2, avgprice);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getPricesForQuoteConVO",
        new Object[] { cmangid, ccurrencytypeid,
            new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    return aryprice;
  }

  /**
   * @功能：发票上采购执行价的 最大值、最小值、平均值 说明： 无税单价----------- 1.取发票无税单价
   *               2.无税单价非空非零(保证此处算出的是有效的最大价、最小价、平均价) 含税单价-----------
   *               ！基础数据的税率为 0.17 ==> 单据的税率为 17 1.取发票无税单价 非空非零 2.取税率 空按零计
   *               3.含税单价 = 发票无税单价*(1+税率)
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return aryprice ArrayList czp/2003-12-27/修正平均价算法： 平均无税单价=
   *         sum(原币净无税金额)/sum(订单数量) 平均含税单价= sum(原币价税合计)/sum(订单数量)
   */
  public ArrayList getPricesForQuoteConVOInvoice(String cmangid,
      String ccurrencytypeid, boolean isIntax, String strSQL)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getPricesForQuoteConVOInvoice", new Object[] { cmangid,
            ccurrencytypeid, new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    ArrayList aryprice = null;
    UFDouble maxprice = null;
    UFDouble minprice = null;
    UFDouble avgprice = null;
    StringBuffer sql = new StringBuffer(" ");
    if (isIntax) {
      sql
          .append("SELECT MAX(coalesce(po_invoice_b.norgnettaxprice,0)), MIN(coalesce(po_invoice_b.norgnettaxprice,0)) ,cast(sum(coalesce(po_invoice_b.noriginalsummny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) ");
      sql.append(strSQL + " ");
      sql.append("and po_invoice_b.cmangid = ? ");
      sql.append("and po_invoice_b.ccurrencytypeid = ? ");
      sql.append("and po_invoice_b.norgnettaxprice is not null ");
      sql.append("and po_invoice_b.norgnettaxprice <> 0 ");
      sql
          .append("group by po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql
          .append("having sum(coalesce(po_invoice_b.ninvoicenum,0)) <> 0 ");
    } else {
      sql
          .append("SELECT MAX(coalesce(po_invoice_b.noriginalcurprice,0)), MIN(coalesce(po_invoice_b.noriginalcurprice,0)) ,cast(sum(coalesce(po_invoice_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)) ");
      sql.append(strSQL + " ");
      sql.append("and po_invoice_b.cmangid = ? ");
      sql.append("and po_invoice_b.ccurrencytypeid = ? ");
      sql.append("and po_invoice_b.noriginalcurprice is not null ");
      sql.append("and po_invoice_b.noriginalcurprice <> 0 ");
      sql
          .append("group by po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql
          .append("having sum(coalesce(po_invoice_b.ninvoicenum,0)) <> 0 ");
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());

      stmt.setString(1, cmangid);
      stmt.setString(2, ccurrencytypeid);
      rs = stmt.executeQuery();
      if (rs.next()) {
        aryprice = new ArrayList();
        // 此处不必区分含税或无税
        BigDecimal bmaxprice = rs.getBigDecimal(1);
        if (bmaxprice == null) {
          maxprice = null;
        } else {
          maxprice = new UFDouble(bmaxprice);
        }
        aryprice.add(0, maxprice);

        BigDecimal bminprice = rs.getBigDecimal(2);
        if (bminprice == null) {
          minprice = null;
        } else {
          minprice = new UFDouble(bminprice);
        }
        aryprice.add(1, minprice);

        BigDecimal bavgprice = rs.getBigDecimal(3);
        if (bavgprice == null) {
          avgprice = null;
        } else {
          avgprice = new UFDouble(bavgprice);
        }
        aryprice.add(2, avgprice);
        /*
         * //含税 BigDecimal bntaxrate = rs.getBigDecimal(4); UFDouble
         * ntaxrate = new UFDouble(bntaxrate); if (isIntax){ if
         * (bmaxprice == null) { maxprice = null; }else{ maxprice = (new
         * UFDouble(bmaxprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(0, maxprice);
         * 
         * if (bminprice == null) { minprice = null; }else{ minprice =
         * (new
         * UFDouble(minprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(1, minprice);
         * 
         * if (bavgprice == null) { avgprice = null; }else{ avgprice =
         * (new
         * UFDouble(avgprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(2, avgprice); }
         */
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getPricesForQuoteConVOInvoice", new Object[] { cmangid,
            ccurrencytypeid, new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    return aryprice;
  }
  /**
   * @功能：发票上采购执行价的 最大值、最小值、平均值 说明： 无税单价----------- 1.取发票无税单价
   *               2.无税单价非空非零(保证此处算出的是有效的最大价、最小价、平均价) 含税单价-----------
   *               ！基础数据的税率为 0.17 ==> 单据的税率为 17 1.取发票无税单价 非空非零 2.取税率 空按零计
   *               3.含税单价 = 发票无税单价*(1+税率)
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return aryprice ArrayList czp/2003-12-27/修正平均价算法： 平均无税单价=
   *         sum(原币净无税金额)/sum(订单数量) 平均含税单价= sum(原币价税合计)/sum(订单数量)
   */
  public Hashtable getPricesForQuoteConVOInvoiceForBantch(String[] cmangids,
      String[] ccurrencytypeids, boolean isIntax, String strSQL,String funcNode)
      throws SQLException {
    
    if (cmangids == null || cmangids.length == 0)
      return null;
    if (ccurrencytypeids == null || ccurrencytypeids.length == 0)
      return null;
    
    ArrayList aryprice = null;
    UFDouble maxprice = null;
    UFDouble minprice = null;
    UFDouble avgprice = null;
    Hashtable result = new Hashtable();
    String cmangid = null;
    String ccurrencytypeid = null;
    String[] saPkInv = cmangids;
    String strIdSet = null;
    String[] saPkCuType = ccurrencytypeids;
    String strIdSetForCuType = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_ASK_10,
          "cmangid");
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
      nc.bs.scm.pub.TempTableDMO dmoTmpTblForCuType = new nc.bs.scm.pub.TempTableDMO();
      strIdSetForCuType = dmoTmpTblForCuType.insertTempTable(saPkCuType,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PO006,
          "corder_bid");
      if (strIdSetForCuType == null || "()".equals(strIdSetForCuType.trim())) {
        strIdSetForCuType = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    StringBuffer sql = new StringBuffer(" ");
    if (isIntax) {
      sql
          .append("SELECT MAX(coalesce(po_invoice_b.norgnettaxprice,0)), MIN(coalesce(po_invoice_b.norgnettaxprice,0)) ,cast(sum(coalesce(po_invoice_b.noriginalsummny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)),po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql.append(strSQL + " ");
      sql.append("and po_invoice_b.cmangid in " + strIdSet + " ");
      sql.append("and po_invoice_b.ccurrencytypeid in " + strIdSetForCuType + " ");
      sql.append("and po_invoice_b.norgnettaxprice is not null ");
      sql.append("and po_invoice_b.norgnettaxprice <> 0 ");
      sql
          .append("group by po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql
          .append("having sum(coalesce(po_invoice_b.ninvoicenum,0)) <> 0 ");
    } else {
      sql
          .append("SELECT MAX(coalesce(po_invoice_b.noriginalcurprice,0)), MIN(coalesce(po_invoice_b.noriginalcurprice,0)) ,cast(sum(coalesce(po_invoice_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_invoice_b.ninvoicenum,0)) as decimal(20,8)),po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql.append(strSQL + " ");
      sql.append("and po_invoice_b.cmangid in " + strIdSet + " ");
      sql.append("and po_invoice_b.ccurrencytypeid in " + strIdSetForCuType + " ");
      sql.append("and po_invoice_b.noriginalcurprice is not null ");
      sql.append("and po_invoice_b.noriginalcurprice <> 0 ");
      sql
          .append("group by po_invoice_b.cmangid,po_invoice_b.ccurrencytypeid ");
      sql
          .append("having sum(coalesce(po_invoice_b.ninvoicenum,0)) <> 0 ");
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      while (rs.next()) {
        aryprice = new ArrayList();
        // 此处不必区分含税或无税
        BigDecimal bmaxprice = rs.getBigDecimal(1);
        if (bmaxprice == null) {
          maxprice = null;
        } else {
          maxprice = new UFDouble(bmaxprice);
        }
        aryprice.add(0, maxprice);

        BigDecimal bminprice = rs.getBigDecimal(2);
        if (bminprice == null) {
          minprice = null;
        } else {
          minprice = new UFDouble(bminprice);
        }
        aryprice.add(1, minprice);

        BigDecimal bavgprice = rs.getBigDecimal(3);
        if (bavgprice == null) {
          avgprice = null;
        } else {
          avgprice = new UFDouble(bavgprice);
        }
        aryprice.add(2, avgprice);
        
        cmangid = rs.getString(4);
        
         ccurrencytypeid = rs.getString(5);
         
         if(cmangid != null && cmangid.trim().length() > 0
             && ccurrencytypeid != null && ccurrencytypeid.trim().length() > 0
             && !result.containsKey(cmangid+ccurrencytypeid)){
           result.put(cmangid+ccurrencytypeid, aryprice);
         }
        /*
         * //含税 BigDecimal bntaxrate = rs.getBigDecimal(4); UFDouble
         * ntaxrate = new UFDouble(bntaxrate); if (isIntax){ if
         * (bmaxprice == null) { maxprice = null; }else{ maxprice = (new
         * UFDouble(bmaxprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(0, maxprice);
         * 
         * if (bminprice == null) { minprice = null; }else{ minprice =
         * (new
         * UFDouble(minprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(1, minprice);
         * 
         * if (bavgprice == null) { avgprice = null; }else{ avgprice =
         * (new
         * UFDouble(avgprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(2, avgprice); }
         */
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }
  /**
   * @功能：订单上采购执行价的 最大值、最小值、平均值 说明： 0.加过滤条件：非补货标志 po_order_b.iisreplenish = 0
   *               无税单价----------- 1.取订单无税净单价
   *               2.无税净单价非空非零(保证此处算出的是有效的最大价、最小价、平均价) 含税单价----------- ！税率为
   *               0.17 ==> 数据库中税率为 17 1.取订单无税净单价 非空非零 2.取税率 空按零计 3.含税单价 =
   *               订单无税净单价*(1+税率)
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return aryprice ArrayList czp/2003-12-27/修正平均价算法： 平均无税单价=
   *         sum(原币净无税金额)/sum(订单数量) 平均含税单价= sum(原币价税合计)/sum(订单数量)
   */
  public ArrayList getPricesForQuoteConVOOrder(String cmangid,
      String ccurrencytypeid, boolean isIntax, String strSQL)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getPricesForQuoteConVOOrder", new Object[] { cmangid,
            ccurrencytypeid, new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    if (cmangid == null)
      return null;
    if ("".equals(cmangid.trim()))
      return null;
    if (ccurrencytypeid == null)
      return null;
    if ("".equals(ccurrencytypeid.trim()))
      return null;
    ArrayList aryprice = null;
    UFDouble maxprice = null;
    UFDouble minprice = null;
    UFDouble avgprice = null;
    StringBuffer sql = new StringBuffer(" ");
    if (isIntax) {
      sql
          .append("SELECT MAX(coalesce(po_order_b.norgnettaxprice,0)), MIN(coalesce(po_order_b.norgnettaxprice,0)) ,cast(sum(coalesce(po_order_b.noriginaltaxpricemny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) ");
      sql.append(strSQL + " ");
      sql.append("and po_order_b.cmangid = ? ");
      sql.append("and po_order_b.ccurrencytypeid = ? ");
      sql.append("and po_order_b.norgnettaxprice is not null ");
      sql
          .append("and po_order_b.norgnettaxprice <> 0 and  po_order_b.iisreplenish = 0 ");
      sql.append("and po_order_b.iisreplenish = 0 ");
      sql
          .append("group by po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append("having sum(coalesce(po_order_b.nordernum,0)) <> 0 ");
    } else {
      sql
          .append("SELECT MAX(coalesce(po_order_b.noriginalnetprice,0)), MIN(coalesce(po_order_b.noriginalnetprice,0)) ,cast(sum(coalesce(po_order_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)) ");
      sql.append(strSQL + " ");
      sql.append("and po_order_b.cmangid = ? ");
      sql.append("and po_order_b.ccurrencytypeid = ? ");
      sql.append("and po_order_b.noriginalnetprice is not null ");
      sql
          .append("and po_order_b.noriginalnetprice <> 0 and  po_order_b.iisreplenish = 0 ");
      sql.append("and po_order_b.iisreplenish = 0 ");
      sql
          .append("group by po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append("having sum(coalesce(po_order_b.nordernum,0)) <> 0 ");
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());

      stmt.setString(1, cmangid);
      stmt.setString(2, ccurrencytypeid);
      rs = stmt.executeQuery();
      if (rs.next()) {
        aryprice = new ArrayList();
        // 此处不必区分含税或无税
        BigDecimal bmaxprice = rs.getBigDecimal(1);
        if (bmaxprice == null) {
          maxprice = null;
        } else {
          maxprice = new UFDouble(bmaxprice);
        }
        aryprice.add(0, maxprice);

        BigDecimal bminprice = rs.getBigDecimal(2);
        if (bminprice == null) {
          minprice = null;
        } else {
          minprice = new UFDouble(bminprice);
        }
        aryprice.add(1, minprice);

        BigDecimal bavgprice = rs.getBigDecimal(3);
        if (bavgprice == null) {
          avgprice = null;
        } else {
          avgprice = new UFDouble(bavgprice);
        }
        aryprice.add(2, avgprice);
        /*
         * //含税 BigDecimal bntaxrate = rs.getBigDecimal(4); UFDouble
         * ntaxrate = new UFDouble(bntaxrate); if (isIntax){ if
         * (bmaxprice == null) { maxprice = null; }else{ maxprice = (new
         * UFDouble(bmaxprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(0, maxprice);
         * 
         * if (bminprice == null) { minprice = null; }else{ minprice =
         * (new
         * UFDouble(minprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(1, minprice);
         * 
         * if (bavgprice == null) { avgprice = null; }else{ avgprice =
         * (new
         * UFDouble(avgprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(2, avgprice); }
         */
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO",
        "getPricesForQuoteConVOOrder", new Object[] { cmangid,
            ccurrencytypeid, new UFBoolean(isIntax), strSQL });
    /** ********************************************************** */
    return aryprice;
  }
  /**
   * @功能：订单上采购执行价的 最大值、最小值、平均值 说明： 0.加过滤条件：非补货标志 po_order_b.iisreplenish = 0
   *               无税单价----------- 1.取订单无税净单价
   *               2.无税净单价非空非零(保证此处算出的是有效的最大价、最小价、平均价) 含税单价----------- ！税率为
   *               0.17 ==> 数据库中税率为 17 1.取订单无税净单价 非空非零 2.取税率 空按零计 3.含税单价 =
   *               订单无税净单价*(1+税率)
   * @param cmangid
   *            java.lang.String
   * @param ccurrencytypeid
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return aryprice ArrayList czp/2003-12-27/修正平均价算法： 平均无税单价=
   *         sum(原币净无税金额)/sum(订单数量) 平均含税单价= sum(原币价税合计)/sum(订单数量)
   */
  public Hashtable getPricesForQuoteConVOOrderForBantch(String[] cmangids,
      String[] ccurrencytypeids, boolean isIntax, String strSQL,String funcNode)
      throws SQLException {
    
    if (cmangids == null || cmangids.length == 0)
      return null;
    if (ccurrencytypeids == null || ccurrencytypeids.length == 0)
      return null;
    
    ArrayList aryprice = null;
    UFDouble maxprice = null;
    UFDouble minprice = null;
    UFDouble avgprice = null;
    Hashtable result = new Hashtable();
    String cmangid = null;
    String ccurrencytypeid = null;
    String[] saPkInv = cmangids;
    String strIdSet = null;
    String[] saPkCuType = ccurrencytypeids;
    String strIdSetForCuType = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saPkInv,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_ASK_10,
          "cmangid");
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
      nc.bs.scm.pub.TempTableDMO dmoTmpTblForCuType = new nc.bs.scm.pub.TempTableDMO();
      strIdSetForCuType = dmoTmpTblForCuType.insertTempTable(saPkCuType,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_PO006,
          "corder_bid");
      if (strIdSetForCuType == null || "()".equals(strIdSetForCuType.trim())) {
        strIdSetForCuType = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    StringBuffer sql = new StringBuffer(" ");
    if (isIntax) {
      sql
          .append("SELECT MAX(coalesce(po_order_b.norgnettaxprice,0)), MIN(coalesce(po_order_b.norgnettaxprice,0)) ,cast(sum(coalesce(po_order_b.noriginaltaxpricemny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)),po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append(strSQL + " ");
      sql.append("and po_order_b.cmangid in " + strIdSet+ " ");
      sql.append("and po_order_b.ccurrencytypeid in " + strIdSetForCuType+ " ");
      sql.append("and po_order_b.norgnettaxprice is not null ");
      sql
          .append("and po_order_b.norgnettaxprice <> 0 and  po_order_b.iisreplenish = 0 ");
      sql.append("and po_order_b.iisreplenish = 0 ");
      sql
          .append("group by po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append("having sum(coalesce(po_order_b.nordernum,0)) <> 0 ");
    } else {
      sql
          .append("SELECT MAX(coalesce(po_order_b.noriginalnetprice,0)), MIN(coalesce(po_order_b.noriginalnetprice,0)) ,cast(sum(coalesce(po_order_b.noriginalcurmny,0)) as decimal(20,8)) / cast(sum(coalesce(po_order_b.nordernum,0)) as decimal(20,8)),po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append(strSQL + " ");
      sql.append("and po_order_b.cmangid in " + strIdSet+ " ");
      sql.append("and po_order_b.ccurrencytypeid in " + strIdSetForCuType+ " ");
      sql.append("and po_order_b.noriginalnetprice is not null ");
      sql
          .append("and po_order_b.noriginalnetprice <> 0 and  po_order_b.iisreplenish = 0 ");
      sql.append("and po_order_b.iisreplenish = 0 ");
      sql
          .append("group by po_order_b.cmangid,po_order_b.ccurrencytypeid ");
      sql.append("having sum(coalesce(po_order_b.nordernum,0)) <> 0 ");
    }

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      //2009/11/21 tiaft
      ((CrossDBResultSet) rs).setMaxRows(CustomerConfigVO.getReportMaxRow(funcNode));
      if (rs.next()) {
        aryprice = new ArrayList();
        // 此处不必区分含税或无税
        BigDecimal bmaxprice = rs.getBigDecimal(1);
        if (bmaxprice == null) {
          maxprice = null;
        } else {
          maxprice = new UFDouble(bmaxprice);
        }
        aryprice.add(0, maxprice);

        BigDecimal bminprice = rs.getBigDecimal(2);
        if (bminprice == null) {
          minprice = null;
        } else {
          minprice = new UFDouble(bminprice);
        }
        aryprice.add(1, minprice);

        BigDecimal bavgprice = rs.getBigDecimal(3);
        if (bavgprice == null) {
          avgprice = null;
        } else {
          avgprice = new UFDouble(bavgprice);
        }
        aryprice.add(2, avgprice);
        
        cmangid = rs.getString(4);
        
         ccurrencytypeid = rs.getString(5);
         
         if(cmangid != null && cmangid.trim().length() > 0
             && ccurrencytypeid != null && ccurrencytypeid.trim().length() > 0
             && !result.containsKey(cmangid+ccurrencytypeid)){
           result.put(cmangid+ccurrencytypeid, aryprice);
         }
        /*
         * //含税 BigDecimal bntaxrate = rs.getBigDecimal(4); UFDouble
         * ntaxrate = new UFDouble(bntaxrate); if (isIntax){ if
         * (bmaxprice == null) { maxprice = null; }else{ maxprice = (new
         * UFDouble(bmaxprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(0, maxprice);
         * 
         * if (bminprice == null) { minprice = null; }else{ minprice =
         * (new
         * UFDouble(minprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(1, minprice);
         * 
         * if (bavgprice == null) { avgprice = null; }else{ avgprice =
         * (new
         * UFDouble(avgprice)).multiply((ntaxrate.div(100)).add(1)); }
         * aryprice.add(2, avgprice); }
         */
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    
    return result;
  }
  /**
   * @功能：根据存货管理档案主键给出 1.存货管理档案产地
   * @param pk_invmandoc
   *            String
   * @return prodarea String
   */
  public String getProdareaByPk(String pk_invmandoc) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getProdareaByPk",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    String parodarea = null;
    if (pk_invmandoc == null)
      return null;
    if ("".equals(pk_invmandoc.trim()))
      return null;
    String sql = "select prodarea from bd_invmandoc where pk_invmandoc = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_invmandoc);
      rs = stmt.executeQuery();
      if (rs.next()) {
        parodarea = rs.getString(1);
        if (parodarea != null) {
          parodarea = parodarea.trim();
        }
        if (parodarea != null && "".equals(parodarea)) {
          parodarea = null;
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getProdareaByPk",
        new Object[] { pk_invmandoc });
    /** ********************************************************** */
    return parodarea;
  }

  /**
   * 获取存货默认税率 传入参数：存货基本档案ID数组 返回值： 哈希表{存货基本档案ID=存货默认税率} 默认税率公式描述 ： pk_taxitems ->
   * getColValue(bd_invbasdoc, pk_taxitems, pk_invbasdoc, cbaseid); taxratio - >
   * getColValue(bd_taxitems, taxratio, pk_taxitems, pk_taxitems)
   */
  public Hashtable getRate(String[] saCbaseid) throws SQLException {
    Hashtable hRate = new Hashtable();
    if (saCbaseid == null || saCbaseid.length <= 0)
      return null;
    String sql = "select bd_invbasdoc.pk_invbasdoc,bd_taxitems.taxratio ";
    sql += "from bd_taxitems ";
    sql += "left outer join bd_invbasdoc on bd_invbasdoc.pk_taxitems = bd_taxitems.pk_taxitems ";
    sql += "where bd_invbasdoc.pk_invbasdoc in ";
    String strIdSet = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strIdSet = dmoTmpTbl.insertTempTable(saCbaseid,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strIdSet == null || "()".equals(strIdSet.trim())) {
        strIdSet = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql += strIdSet;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String sCbaseid = null;
    Object oTmp = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        sCbaseid = rs.getString(1);
        oTmp = rs.getObject(2);
        if (oTmp == null || "".equals(oTmp.toString().trim()))
          oTmp = "0";
        hRate.put(sCbaseid, new UFDouble(oTmp.toString().trim()));
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return hRate;
  }

  /**
   * @功能：根据税目税率主键给出 1.税率
   * @param pk_taxitems
   *            String
   * @return taxratio UFDouble
   */
  public UFDouble getTaxratioByPk(String pk_taxitems) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getTaxratioByPk",
        new Object[] { pk_taxitems });
    /** ********************************************************** */
    UFDouble taxratio = null;
    if (pk_taxitems == null)
      return null;
    if ("".equals(pk_taxitems.trim()))
      return null;
    String sql = "select taxratio from bd_taxitems where pk_taxitems = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, pk_taxitems);
      rs = stmt.executeQuery();
      if (rs.next()) {
        Object btaxratio = rs.getObject(1);
        if (btaxratio != null
            && !"".equals(btaxratio.toString().trim())) {
          taxratio = new UFDouble(btaxratio.toString().trim());
        } else {
          taxratio = null;
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getTaxratioByPk",
        new Object[] { pk_taxitems });
    /** ********************************************************** */
    return taxratio;
  }

  /**
   * @功能：“供应商+存货” 是否重复: true, 重复；false,不重复 注意： 与作废的单据号重复返回 true !
   *              //---------------------------------------- czp modified on
   *              2002-09-20 begin 项目：赛格日立 提出：祝奇 要求：作废的单据号回收系统，即系统可再用
   *              调整：与作废的单据号重复返回 false ! czp modified on 2002-09-20 end
   *              //----------------------------------------
   * @作者：周晓 创建日期：(2001-8-9 11:14:20)
   * @return boolean
   * @param arrcode
   *            java.lang.String
   * @param vendorid
   *            java.lang.String
   */
  public boolean haveCodeAndVendorMy(String arrcode, String vendorid)
      throws SQLException {
    String sql = "select ltrim(rtrim(vaskbillcode)) ";
    sql += "from po_askbill ";
    sql += "where vaskbillcode = ? and dr = 0 ";
    String sqlVendor = "";
    if (vendorid == null || "".equals(vendorid.trim())) {
      sqlVendor = "and ( cvendormangid is null or cvendormangid = '') ";
    } else {
      sqlVendor = "and cvendormangid = '" + vendorid + "'";
    }
    sql += sqlVendor;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);

      stmt.setString(1, arrcode);

      rs = stmt.executeQuery();
      if (rs.next()) {
        return true;
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }

    }
    return false;
  }

  /**
   * @功能：单据号是否重复: true, 重复；false,不重复 注意： 与作废的单据号重复返回 true !
   * @作者：周晓 创建日期：(2001-8-9 11:14:20)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @return boolean
   * @param newCode
   *            java.lang.String
   */
  public boolean haveTheArrCodeMy(String newCode) throws SQLException {
    String sql = "select ltrim(rtrim(vaskbillcode)) from po_askbill where vaskbillcode = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      if (newCode != null)
        stmt.setString(1, newCode);
      else
        stmt.setNull(1, Types.CHAR);
      rs = stmt.executeQuery();
      if (rs.next()) {
        return true;
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }

    }
    return false;
  }

  /**
   * 插入一个询价单行(处理存货管理档案ID->存货档案ID)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVO[] insertItemMyArray(AskbillItemVO[] askbillItems)
      throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length == 0) {
      SCMEnv.out("传入参数为空，直接返回!");
      return askbillItems;
    }
    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    AskbillItemVO askbillItem = null;
    // 基本档案处理
//    Connection con2 = null;
//    PreparedStatement stmt2 = null;
    String sql0 = "select bd_invmandoc.pk_invmandoc,bd_invbasdoc.pk_invbasdoc ";
    sql0 += "from bd_invbasdoc, bd_invmandoc ";
    sql0 += "where bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc and bd_invmandoc.pk_invmandoc in ";
    int iLen = askbillItems.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (askbillItems[i].getCmangid() == null)
        continue;
      listDisId.add(askbillItems[i].getCmangid());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行存货管理档案ID，直接返回");
      return askbillItems;
    }
//    String strIdSet = null;
    try {
//      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
//      strIdSet = dmoTmpTbl.insertTempTable(listDisId,
//          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
//          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//      if (strIdSet == null || strIdSet.trim().equals("()")) {
//        throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
//            .getStrByID("40040701", "UPP40040701-000031")/*
//                                     * @res
//                                     * "获取存货基本档案主键时出错！请稍后再试！"
//                                     */);
//      }
//      sql0 += strIdSet;
      //
      // String sql1 =
      // "insert into po_askbill_b(caskbill_bid, caskbillid, pk_corp,
      // cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress,
      // nnotaxprice, nintaxprice, bisorder, nordernum, nordernotaxprice,
      // norderintaxprice, nordernotaxmny, ntaxmny, npricetaxmny, vmemo,
      // vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3,
      // vfree4, vfree5, cbaseid,ntaxrate,deliverdays, crowno,
      // csourcebilltype, csourcebillid, csourcebillrowid,
      // cupsourcebilltype, cupsourcebillid, cupsourcebillrowid) values(?,
      // ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
      // ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)";
      String sql1 = "insert into po_askbill_b(caskbill_bid, caskbillid, pk_corp, cmangid, nasknum, vpackmode, dreceivedate, vreveiveaddress,  vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,pk_upsrccorp) values(?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

//      ResultSet rs = null;
//      con2 = getConnection();

      // cbaseid 哈希表
//      stmt2 = con2.prepareStatement(sql0);
//      rs = stmt2.executeQuery();
//      Hashtable hBaseId = new Hashtable();
//      String cmangid = null, cbaseid = null;
//      while (rs.next()) {
//        cmangid = rs.getString(1);
//        cbaseid = rs.getString(2);
//        if (cmangid != null && cbaseid != null) {
//          hBaseId.put(cmangid, cbaseid);
//        }
//      }
//      rs.close();
      // stmt.close();
      // 更新
      // stmt = con.prepareStatement(sql1);
      con = getConnection();

      // cbaseid 哈希表
      stmt = con.prepareStatement(sql1);
      // stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // 存货基本档案主键
//        cmangid = askbillItem.getCmangid();
//        if (cmangid != null) {
//          askbillItem.setCbaseid((String) hBaseId.get(cmangid));
//        }
        // set PK fields:
        key = getOID(askbillItem.getPk_corp());

        askbillItem.setCaskbill_bid(key);

        stmt.setString(1, key);
        // set non PK fields:
        if (askbillItem.getCaskbillid() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getCaskbillid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getPk_corp());
        }
        if (askbillItem.getCmangid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getCmangid());
        }
        if (askbillItem.getNasknum() == null) {
          stmt.setNull(5, Types.INTEGER);
        } else {
          stmt.setBigDecimal(5, askbillItem.getNasknum()
              .toBigDecimal());
        }
        if (askbillItem.getVpackmode() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getVpackmode());
        }
        if (askbillItem.getDreceivedate() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getDreceivedate().toString());
        }
        if (askbillItem.getVreveiveaddress() == null) {
          stmt.setNull(8, Types.CHAR);
        } else {
          stmt.setString(8, askbillItem.getVreveiveaddress());
        }
        if (askbillItem.getVmemo() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, askbillItem.getVmemo());
        }
        if (askbillItem.getVdef1() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getVdef1());
        }
        if (askbillItem.getVdef2() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt.setString(11, askbillItem.getVdef2());
        }
        if (askbillItem.getVdef3() == null) {
          stmt.setNull(12, Types.CHAR);
        } else {
          stmt.setString(12, askbillItem.getVdef3());
        }
        if (askbillItem.getVdef4() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, askbillItem.getVdef4());
        }
        if (askbillItem.getVdef5() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt.setString(14, askbillItem.getVdef5());
        }
        if (askbillItem.getVdef6() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVdef6());
        }
        if (askbillItem.getVfree1() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVfree1());
        }
        if (askbillItem.getVfree2() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVfree2());
        }
        if (askbillItem.getVfree3() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getVfree3());
        }
        if (askbillItem.getVfree4() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getVfree4());
        }
        if (askbillItem.getVfree5() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getVfree5());
        }
        // 存货基本档案主键
        if (askbillItem.getCbaseid() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getCbaseid());
        }
        // 税率
//        if (askbillItem.getNtaxrate() == null) {
//          stmt.setNull(22, Types.INTEGER);
//        } else {
//          stmt.setBigDecimal(22, askbillItem.getNtaxrate()
//              .toBigDecimal());
//        }
        // 单据行号
        if (askbillItem.getCrowno() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getCrowno());
        }
        // 来源信息
        if (askbillItem.getCsourcebilltype() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getCsourcebilltype());
        }
        if (askbillItem.getCsourcebillid() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getCsourcebillid());
        }
        if (askbillItem.getCsourcebillrowid() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getCsourcebillrowid());
        }
        if (askbillItem.getCupsourcebilltype() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getCupsourcebilltype());
        }
        if (askbillItem.getCupsourcebillid() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getCupsourcebillid());
        }
        if (askbillItem.getCupsourcebillrowid() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getCupsourcebillrowid());
        }
        if (askbillItem.getVdef7() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVdef7());
        }
        if (askbillItem.getVdef8() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVdef8());
        }
        if (askbillItem.getVdef9() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVdef9());
        }
        if (askbillItem.getVdef10() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVdef10());
        }
        if (askbillItem.getVdef11() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVdef11());
        }
        if (askbillItem.getVdef12() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getVdef12());
        }
        if (askbillItem.getVdef13() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getVdef13());
        }
        if (askbillItem.getVdef14() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getVdef14());
        }
        if (askbillItem.getVdef15() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getVdef15());
        }
        if (askbillItem.getVdef16() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getVdef16());
        }
        if (askbillItem.getVdef17() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getVdef17());
        }
        if (askbillItem.getVdef18() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getVdef18());
        }
        if (askbillItem.getVdef19() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getVdef19());
        }
        if (askbillItem.getVdef20() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getVdef20());
        }
        if (askbillItem.getPk_defdoc1() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_defdoc1());
        }
        if (askbillItem.getPk_defdoc2() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_defdoc2());
        }
        if (askbillItem.getPk_defdoc3() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_defdoc3());
        }
        if (askbillItem.getPk_defdoc4() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_defdoc4());
        }
        if (askbillItem.getPk_defdoc5() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_defdoc5());
        }
        if (askbillItem.getPk_defdoc6() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_defdoc6());
        }
        if (askbillItem.getPk_defdoc7() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_defdoc7());
        }
        if (askbillItem.getPk_defdoc8() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_defdoc8());
        }
        if (askbillItem.getPk_defdoc9() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_defdoc9());
        }
        if (askbillItem.getPk_defdoc10() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_defdoc10());
        }
        if (askbillItem.getPk_defdoc11() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_defdoc11());
        }
        if (askbillItem.getPk_defdoc12() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, askbillItem.getPk_defdoc12());
        }
        if (askbillItem.getPk_defdoc13() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, askbillItem.getPk_defdoc13());
        }
        if (askbillItem.getPk_defdoc14() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, askbillItem.getPk_defdoc14());
        }
        if (askbillItem.getPk_defdoc15() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, askbillItem.getPk_defdoc15());
        }
        if (askbillItem.getPk_defdoc16() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, askbillItem.getPk_defdoc16());
        }
        if (askbillItem.getPk_defdoc17() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, askbillItem.getPk_defdoc17());
        }
        if (askbillItem.getPk_defdoc18() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, askbillItem.getPk_defdoc18());
        }
        if (askbillItem.getPk_defdoc19() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, askbillItem.getPk_defdoc19());
        }
        if (askbillItem.getPk_defdoc20() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, askbillItem.getPk_defdoc20());
        }
        if (askbillItem.getUpsrccorp() == null) {
          stmt.setNull(63, Types.CHAR);
        } else {
          stmt.setString(63, askbillItem.getUpsrccorp());
        }

        executeUpdate(stmt);
        //
        askbillItems[i] = askbillItem;
      }
      executeBatch(stmt);
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return askbillItems;
  }

  /**
   * 插入一个询价单行(处理存货管理档案ID->存货档案ID)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBVO[] insertItemMyArrayForPriceAudit(
      PriceauditBVO[] askbillItems) throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length == 0) {
      SCMEnv.out("传入参数为空，直接返回!");
      return askbillItems;
    }
    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    PriceauditBVO askbillItem = null;
    // 基本档案处理
//    Connection con2 = null;
//    PreparedStatement stmt2 = null;
    String sql0 = "select bd_invmandoc.pk_invmandoc,bd_invbasdoc.pk_invbasdoc ";
    sql0 += "from bd_invbasdoc, bd_invmandoc ";
    sql0 += "where bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc and bd_invmandoc.pk_invmandoc in ";
    int iLen = askbillItems.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (askbillItems[i].getCmangid() == null)
        continue;
      listDisId.add(askbillItems[i].getCmangid());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行存货管理档案ID，直接返回");
      return askbillItems;
    }
//    String strIdSet = null;
    try {
      String sql1 = "insert into po_priceaudit_b(cpriceaudit_bid, cpriceauditid, pk_corp, cmangid, nnum, darrvdate,  vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, crowno, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,vsourcebillcode,vupsourcebillcode,pk_upsrccorp,pk_srccorp) values(?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

      con = getConnection();

      stmt = con.prepareStatement(sql1);
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // 存货基本档案主键
//        cmangid = askbillItem.getCmangid();
//        if (cmangid != null) {
//          askbillItem.setCbaseid((String) hBaseId.get(cmangid));
//        }
        // set PK fields:
        key = getOID(askbillItem.getPk_corp());

        askbillItem.setPrimaryKey(key);

        stmt.setString(1, key);
        // set non PK fields:
        if (askbillItem.getCpriceauditid() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getCpriceauditid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getPk_corp());
        }
        if (askbillItem.getCmangid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getCmangid());
        }
        if (askbillItem.getNnum() == null) {
          stmt.setNull(5, Types.DECIMAL);
        } else {
          stmt.setBigDecimal(5, askbillItem.getNnum().toBigDecimal());
        }
        if (askbillItem.getDarrvdate() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getDarrvdate().toString());
        }
        if (askbillItem.getVmemo() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getVmemo());
        }
        if (askbillItem.getVdef1() == null) {
          stmt.setNull(8, Types.CHAR);
        } else {
          stmt.setString(8, askbillItem.getVdef1());
        }
        if (askbillItem.getVdef2() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, askbillItem.getVdef2());
        }
        if (askbillItem.getVdef3() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getVdef3());
        }
        if (askbillItem.getVdef4() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt.setString(11, askbillItem.getVdef4());
        }
        if (askbillItem.getVdef5() == null) {
          stmt.setNull(12, Types.CHAR);
        } else {
          stmt.setString(12, askbillItem.getVdef5());
        }
        if (askbillItem.getVdef6() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, askbillItem.getVdef6());
        }
        if (askbillItem.getVfree1() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt.setString(14, askbillItem.getVfree1());
        }
        if (askbillItem.getVfree2() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVfree2());
        }
        if (askbillItem.getVfree3() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVfree3());
        }
        if (askbillItem.getVfree4() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVfree4());
        }
        if (askbillItem.getVfree5() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getVfree5());
        }
        // 存货基本档案主键
        if (askbillItem.getCbaseid() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getCbaseid());
        }
        // 税率
//        if (askbillItem.getNtaxrate() == null) {
//          stmt.setNull(20, Types.INTEGER);
//        } else {
//          stmt.setBigDecimal(20, askbillItem.getNtaxrate()
//              .toBigDecimal());
//        }
        // 单据行号
        if (askbillItem.getCrowno() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getCrowno());
        }
        // 来源信息
        if (askbillItem.getCsourcebilltype() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getCsourcebilltype());
        }
        if (askbillItem.getCsourcebillid() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getCsourcebillid());
        }
        if (askbillItem.getCsourcebillrowid() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getCsourcebillrowid());
        }
        if (askbillItem.getCupsourcebilltype() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getCupsourcebilltype());
        }
        if (askbillItem.getCupsourcebillid() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getCupsourcebillid());
        }
        if (askbillItem.getCupsourcebillrowid() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getCupsourcebillrowid());
        }
        if (askbillItem.getVdef7() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getVdef7());
        }
        if (askbillItem.getVdef8() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getVdef8());
        }
        if (askbillItem.getVdef9() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVdef9());
        }
        if (askbillItem.getVdef10() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVdef10());
        }
        if (askbillItem.getVdef11() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVdef11());
        }
        if (askbillItem.getVdef12() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVdef12());
        }
        if (askbillItem.getVdef13() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVdef13());
        }
        if (askbillItem.getVdef14() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getVdef14());
        }
        if (askbillItem.getVdef15() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getVdef15());
        }
        if (askbillItem.getVdef16() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getVdef16());
        }
        if (askbillItem.getVdef17() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getVdef17());
        }
        if (askbillItem.getVdef18() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getVdef18());
        }
        if (askbillItem.getVdef19() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getVdef19());
        }
        if (askbillItem.getVdef20() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getVdef20());
        }
        if (askbillItem.getPk_defdoc1() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getPk_defdoc1());
        }
        if (askbillItem.getPk_defdoc2() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getPk_defdoc2());
        }
        if (askbillItem.getPk_defdoc3() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_defdoc3());
        }
        if (askbillItem.getPk_defdoc4() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_defdoc4());
        }
        if (askbillItem.getPk_defdoc5() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_defdoc5());
        }
        if (askbillItem.getPk_defdoc6() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_defdoc6());
        }
        if (askbillItem.getPk_defdoc7() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_defdoc7());
        }
        if (askbillItem.getPk_defdoc8() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_defdoc8());
        }
        if (askbillItem.getPk_defdoc9() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_defdoc9());
        }
        if (askbillItem.getPk_defdoc10() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_defdoc10());
        }
        if (askbillItem.getPk_defdoc11() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_defdoc11());
        }
        if (askbillItem.getPk_defdoc12() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_defdoc12());
        }
        if (askbillItem.getPk_defdoc13() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_defdoc13());
        }
        if (askbillItem.getPk_defdoc14() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, askbillItem.getPk_defdoc14());
        }
        if (askbillItem.getPk_defdoc15() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, askbillItem.getPk_defdoc15());
        }
        if (askbillItem.getPk_defdoc16() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, askbillItem.getPk_defdoc16());
        }
        if (askbillItem.getPk_defdoc17() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, askbillItem.getPk_defdoc17());
        }
        if (askbillItem.getPk_defdoc18() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, askbillItem.getPk_defdoc18());
        }
        if (askbillItem.getPk_defdoc19() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, askbillItem.getPk_defdoc19());
        }
        if (askbillItem.getPk_defdoc20() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, askbillItem.getPk_defdoc20());
        }
        if (askbillItem.getVsourcebillcode() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, askbillItem.getVsourcebillcode());
        }
        if (askbillItem.getVupsourcebillcode() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, askbillItem.getVupsourcebillcode());
        }
        if (askbillItem.getPk_upsrccorp() == null) {
          stmt.setNull(63, Types.CHAR);
        } else {
          stmt.setString(63, askbillItem.getPk_upsrccorp());
        }
        if (askbillItem.getPk_srccorp() == null) {
          stmt.setNull(64, Types.CHAR);
        } else {
          stmt.setString(64, askbillItem.getPk_srccorp());
        }

        executeUpdate(stmt);
        //
        askbillItems[i] = askbillItem;
      }
      executeBatch(stmt);
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return askbillItems;
  }

  /**
   * 插入一个询价单行(处理存货管理档案ID->存货档案ID)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVendorVO[] insertItemVendorMyArray(
      AskbillItemVendorVO[] askbillItems) throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length == 0) {
      SCMEnv.out("传入参数为空，直接返回!");
      return askbillItems;
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "insertItemMyArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    AskbillItemVendorVO askbillItem = null;
    try {
      String sql1 = "insert into po_askbill_b1(caskbill_b1id, caskbillid, pk_corp, cvendorbaseid,cvendormangid) values(?, ?, ?, ?,?)";
//      ResultSet rs = null;
      con = getConnection();
      stmt = con.prepareStatement(sql1);
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // set PK fields:
        key = getOID(askbillItem.getPk_corp());
        askbillItem.setCaskbill_b1id(key);
        stmt.setString(1, key);
        // set non PK fields:
        if (askbillItem.getCaskbillid() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getCaskbillid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getPk_corp());
        }
        if (askbillItem.getCvendorbaseid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getCvendorbaseid());
        }
        if (askbillItem.getCvendormangid() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, askbillItem.getCvendormangid());
        }

        executeUpdate(stmt);
        //
        askbillItems[i] = askbillItem;
      }
      executeBatch(stmt);
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "insertItemMyArray",
        new Object[] { askbillItems });
    /** ********************************************************** */

    return askbillItems;
  }

  /**
   * 插入一个询价单行(处理存货管理档案ID->存货档案ID)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemBVO[] insertItemBMyArray(AskbillItemBVO[] askbillItems)
      throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length == 0) {
      SCMEnv.out("传入参数为空，直接返回!");
      return askbillItems;
    }
    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    AskbillItemBVO askbillItem = null;

    try {
      String sql1 = "insert into po_askbill_bb1(caskbill_bb1id,caskbill_b1id,caskbill_bid, caskbillid, pk_corp, cvendormangid, cvendorbaseid, nquoteprice, nquotetaxprice, dvaliddate, dinvaliddate, deliverdays,dr,ntaxrate,vbdef1, vbdef2, vbdef3, vbdef4, vbdef5, vbdef6, vbdef7, vbdef8, vbdef9, vbdef10, vbdef11, vbdef12, vbdef13, vbdef14, vbdef15, vbdef16, vbdef17, vbdef18, vbdef19, vbdef20,pk_bdefdoc1,pk_bdefdoc2,pk_bdefdoc3,pk_bdefdoc4,pk_bdefdoc5,pk_bdefdoc6,pk_bdefdoc7,pk_bdefdoc8,pk_bdefdoc9,pk_bdefdoc10,pk_bdefdoc11,pk_bdefdoc12,pk_bdefdoc13,pk_bdefdoc14,pk_bdefdoc15,pk_bdefdoc16,pk_bdefdoc17,pk_bdefdoc18,pk_bdefdoc19,pk_bdefdoc20,creceiptareaid,csendtypeid) values(?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?,?, ?, ?, ?,?, ?, ?, ?, ?,?,?, ?, ?, ?,?, ?, ?, ?, ?,?,?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?,?, ?, ?, ?,?, ?,?,?)";

//      ResultSet rs = null;
      con = getConnection();
      stmt = con.prepareStatement(sql1);
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // set PK fields:
        key = getOID(askbillItem.getPk_corp());
        askbillItem.setCaskbill_bb1id(key);
        stmt.setString(1, key);
        // set non PK fields:
        if (askbillItem.getCaskbill_b1id() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getCaskbill_b1id());
        }
        if (askbillItem.getCaskbill_bid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getCaskbill_bid());
        }
        if (askbillItem.getCaskbillid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getCaskbillid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, askbillItem.getPk_corp());
        }
        if (askbillItem.getCvendmangid() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getCvendmangid());
        }
        if (askbillItem.getCvendbaseid() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getCvendbaseid());
        }
        if (askbillItem.getNquoteprice() == null) {
          stmt.setNull(8, Types.INTEGER);
        } else {
          stmt.setBigDecimal(8, askbillItem.getNquoteprice()
              .toBigDecimal());
        }
        if (askbillItem.getNquotetaxprice() == null) {
          stmt.setNull(9, Types.INTEGER);
        } else {
          stmt.setBigDecimal(9, askbillItem.getNquotetaxprice()
              .toBigDecimal());
        }
        if (askbillItem.getDvaliddate() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getDvaliddate().toString());
        }
        if (askbillItem.getDinvaliddate() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt
              .setString(11, askbillItem.getDinvaliddate()
                  .toString());
        }
        if (askbillItem.getDeliverdays() == null) {
          stmt.setNull(12, Types.INTEGER);
        } else {
          stmt.setInt(12, askbillItem.getDeliverdays().intValue());
        }
        if (askbillItem.getDr() == null) {
          stmt.setInt(13, 0);
        } else {
          stmt.setInt(13, askbillItem.getDr().intValue());
        }
        if (askbillItem.getNtaxrate() == null) {
          stmt.setNull(14, Types.INTEGER);
        } else {
          stmt.setBigDecimal(14, askbillItem.getNtaxrate()
              .toBigDecimal());
        }
        if (askbillItem.getVbdef1() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVbdef1());
        }
        if (askbillItem.getVbdef2() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVbdef2());
        }
        if (askbillItem.getVbdef3() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVbdef3());
        }
        if (askbillItem.getVbdef4() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getVbdef4());
        }
        if (askbillItem.getVbdef5() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getVbdef5());
        }
        if (askbillItem.getVbdef6() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getVbdef6());
        }
        if (askbillItem.getVbdef7() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getVbdef7());
        }
        if (askbillItem.getVbdef8() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getVbdef8());
        }
        if (askbillItem.getVbdef9() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getVbdef9());
        }
        if (askbillItem.getVbdef10() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getVbdef10());
        }
        if (askbillItem.getVbdef11() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getVbdef11());
        }
        if (askbillItem.getVbdef12() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getVbdef12());
        }
        if (askbillItem.getVbdef13() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getVbdef13());
        }
        if (askbillItem.getVbdef14() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getVbdef14());
        }
        if (askbillItem.getVbdef15() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVbdef15());
        }
        if (askbillItem.getVbdef16() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVbdef16());
        }
        if (askbillItem.getVbdef17() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVbdef17());
        }
        if (askbillItem.getVbdef18() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVbdef18());
        }
        if (askbillItem.getVbdef19() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVbdef19());
        }
        if (askbillItem.getVbdef20() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getVbdef20());
        }
        if (askbillItem.getPk_bdefdoc1() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getPk_bdefdoc1());
        }
        if (askbillItem.getPk_bdefdoc2() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getPk_bdefdoc2());
        }
        if (askbillItem.getPk_bdefdoc3() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getPk_bdefdoc3());
        }
        if (askbillItem.getPk_bdefdoc4() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getPk_bdefdoc4());
        }
        if (askbillItem.getPk_bdefdoc5() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getPk_bdefdoc5());
        }
        if (askbillItem.getPk_bdefdoc6() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getPk_bdefdoc6());
        }
        if (askbillItem.getPk_bdefdoc7() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getPk_bdefdoc7());
        }
        if (askbillItem.getPk_bdefdoc8() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getPk_bdefdoc8());
        }
        if (askbillItem.getPk_bdefdoc9() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_bdefdoc9());
        }
        if (askbillItem.getPk_bdefdoc10() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_bdefdoc10());
        }
        if (askbillItem.getPk_bdefdoc11() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_bdefdoc11());
        }
        if (askbillItem.getPk_bdefdoc12() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_bdefdoc12());
        }
        if (askbillItem.getPk_bdefdoc13() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_bdefdoc13());
        }
        if (askbillItem.getPk_bdefdoc14() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_bdefdoc14());
        }
        if (askbillItem.getPk_bdefdoc15() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_bdefdoc15());
        }
        if (askbillItem.getPk_bdefdoc16() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_bdefdoc16());
        }
        if (askbillItem.getPk_bdefdoc17() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_bdefdoc17());
        }
        if (askbillItem.getPk_bdefdoc18() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_bdefdoc18());
        }
        if (askbillItem.getPk_bdefdoc19() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_bdefdoc19());
        }
        if (askbillItem.getPk_bdefdoc20() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, askbillItem.getPk_bdefdoc20());
        }
        if (askbillItem.getCreceiptareaid() == null) {
            stmt.setNull(55, Types.CHAR);
          } else {
            stmt.setString(55, askbillItem.getCreceiptareaid());
          }
        if (askbillItem.getCsendtypeid() == null) {
            stmt.setNull(56, Types.CHAR);
          } else {
            stmt.setString(56, askbillItem.getCsendtypeid());
          }

        executeUpdate(stmt);
        //
        askbillItems[i] = askbillItem;
      }
      executeBatch(stmt);
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return askbillItems;
  }

  /**
   * 插入一个询价单行(处理存货管理档案ID->存货档案ID)
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param node
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBb1VO[] insertItemBMyArrayForPriceAudit(
      PriceauditBb1VO[] priceaudtiBb1s) throws java.sql.SQLException {

    if (priceaudtiBb1s == null || priceaudtiBb1s.length == 0) {
      SCMEnv.out("传入参数为空，直接返回!");
      return priceaudtiBb1s;
    }
    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    PriceauditBb1VO priceaudtiBb1 = null;

    try {
      String sql1 = "insert into po_priceaudit_bb1(cpriceaudit_bb1id,cpriceaudit_bid,cpriceauditid, pk_corp, cvendormangid, cvendorbaseid, nquoteprice, nquotetaxprice, dvaliddate, dinvaliddate, deliverdays,fpricetype,vquotebillcode,cquotebillid,cquotebill_bid,cquotebill_bb1id,border,iprior,nordernum,norderprice,nordertaxprice,norgmny,norgtaxmny,norgsummny,norderbill,dr,ntaxrate,vbdef1, vbdef2, vbdef3, vbdef4, vbdef5, vbdef6, vbdef7, vbdef8, vbdef9, vbdef10, vbdef11, vbdef12, vbdef13, vbdef14, vbdef15, vbdef16, vbdef17, vbdef18, vbdef19, vbdef20,pk_bdefdoc1,pk_bdefdoc2,pk_bdefdoc3,pk_bdefdoc4,pk_bdefdoc5,pk_bdefdoc6,pk_bdefdoc7,pk_bdefdoc8,pk_bdefdoc9,pk_bdefdoc10,pk_bdefdoc11,pk_bdefdoc12,pk_bdefdoc13,pk_bdefdoc14,pk_bdefdoc15,pk_bdefdoc16,pk_bdefdoc17,pk_bdefdoc18,pk_bdefdoc19,pk_bdefdoc20,creceiptareaid,csendtypeid,ngenct ) values(?,?,?,?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?,?, ?, ?, ?,?,?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?,?, ?, ?)";

//      ResultSet rs = null;
      con = getConnection();
      stmt = con.prepareStatement(sql1);
      for (int i = 0; i < priceaudtiBb1s.length; i++) {
        priceaudtiBb1 = priceaudtiBb1s[i];
        if (priceaudtiBb1 == null)
          continue;
        // set PK fields:
        key = getOID(priceaudtiBb1.getPk_corp());
        priceaudtiBb1.setPrimaryKey(key);
        stmt.setString(1, key);
        // set non PK fields:
        if (priceaudtiBb1.getCpriceaudit_bid() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, priceaudtiBb1.getCpriceaudit_bid());
        }
        if (priceaudtiBb1.getCpriceauditid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, priceaudtiBb1.getCpriceauditid());
        }
        if (priceaudtiBb1.getPk_corp() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, priceaudtiBb1.getPk_corp());
        }
        if (priceaudtiBb1.getCvendormangid() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, priceaudtiBb1.getCvendormangid());
        }
        if (priceaudtiBb1.getCvendorbaseid() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, priceaudtiBb1.getCvendorbaseid());
        }
        if (priceaudtiBb1.getNquoteprice() == null) {
          stmt.setNull(7, Types.INTEGER);
        } else {
          stmt.setBigDecimal(7, priceaudtiBb1.getNquoteprice()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNquotetaxprice() == null) {
          stmt.setNull(8, Types.INTEGER);
        } else {
          stmt.setBigDecimal(8, priceaudtiBb1.getNquotetaxprice()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getDvaliddate() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, priceaudtiBb1.getDvaliddate().toString());
        }
        if (priceaudtiBb1.getDinvaliddate() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt
              .setString(10, priceaudtiBb1.getDinvaliddate()
                  .toString());
        }
        if (priceaudtiBb1.getDeliverdays() == null) {
          stmt.setNull(11, Types.INTEGER);
        } else {
          stmt.setInt(11, priceaudtiBb1.getDeliverdays().intValue());
        }
        if (priceaudtiBb1.getFpricetype() == null) {
          stmt.setNull(12, Types.INTEGER);
        } else {
          stmt.setInt(12, new Integer(priceaudtiBb1.getFpricetype())
              .intValue());
        }
        if (priceaudtiBb1.getVquotebillcode() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, priceaudtiBb1.getVquotebillcode()
              );
        }
        if (priceaudtiBb1.getCquotebillid() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt
              .setString(14, priceaudtiBb1.getCquotebillid()
                  );
        }
        if (priceaudtiBb1.getCquotebill_bid() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, priceaudtiBb1.getCquotebill_bid()
              );
        }
        if (priceaudtiBb1.getCquotebill_bb1id() == null) {
          stmt.setNull(16, Types.CHAR);
        } else if (priceaudtiBb1.getCquotebill_bb1id() != null
            && priceaudtiBb1.getCquotebill_bb1id().trim()
                .length() > 0
            && !"self"
                .equals(priceaudtiBb1.getCquotebill_bb1id().trim())) {
          stmt.setString(16, priceaudtiBb1.getCquotebill_bb1id()
              );
        } else if (priceaudtiBb1.getCquotebill_bb1id() != null
            && priceaudtiBb1.getCquotebill_bb1id().trim()
                .length() > 0
            && "self"
                .equals(priceaudtiBb1.getCquotebill_bb1id().trim())) {
          stmt.setString(16, key);
        }
        if (priceaudtiBb1.getBorder() == null) {
          stmt.setString(17, "N");
        } else {
          stmt.setString(17, priceaudtiBb1.getBorder().toString());
        }
        if (priceaudtiBb1.getIprior() == null) {
          stmt.setNull(18, Types.INTEGER);
        } else {
          stmt.setString(18, priceaudtiBb1.getIprior());
        }
        if (priceaudtiBb1.getNordernum() == null) {
          stmt.setNull(19, Types.INTEGER);
        } else {
          stmt.setBigDecimal(19, priceaudtiBb1.getNordernum()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNorderprice() == null) {
          stmt.setNull(20, Types.INTEGER);
        } else {
          stmt.setBigDecimal(20, priceaudtiBb1.getNorderprice()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNordertaxprice() == null) {
          stmt.setNull(21, Types.INTEGER);
        } else {
          stmt.setBigDecimal(21, priceaudtiBb1.getNordertaxprice()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNorgmny() == null) {
          stmt.setNull(22, Types.INTEGER);
        } else {
          stmt.setBigDecimal(22, priceaudtiBb1.getNorgmny()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNorgtaxmny() == null) {
          stmt.setNull(23, Types.INTEGER);
        } else {
          stmt.setBigDecimal(23, priceaudtiBb1.getNorgtaxmny()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNorgsummny() == null) {
          stmt.setNull(24, Types.INTEGER);
        } else {
          stmt.setBigDecimal(24, priceaudtiBb1.getNorgsummny()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getNorderbill() == null) {
          stmt.setNull(25, Types.INTEGER);
        } else {
          stmt.setInt(25, priceaudtiBb1.getNorderbill().intValue());
        }
        if (priceaudtiBb1.getDr() == null) {
          stmt.setInt(26, 0);
        } else {
          stmt.setInt(26, priceaudtiBb1.getDr().intValue());
        }
        if (priceaudtiBb1.getNtaxrate() == null) {
          stmt.setNull(27, Types.INTEGER);
        } else {
          stmt.setBigDecimal(27, priceaudtiBb1.getNtaxrate()
              .toBigDecimal());
        }
        if (priceaudtiBb1.getVbdef1() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, priceaudtiBb1.getVbdef1());
        }
        if (priceaudtiBb1.getVbdef2() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, priceaudtiBb1.getVbdef2());
        }
        if (priceaudtiBb1.getVbdef3() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, priceaudtiBb1.getVbdef3());
        }
        if (priceaudtiBb1.getVbdef4() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, priceaudtiBb1.getVbdef4());
        }
        if (priceaudtiBb1.getVbdef5() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, priceaudtiBb1.getVbdef5());
        }
        if (priceaudtiBb1.getVbdef6() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, priceaudtiBb1.getVbdef6());
        }
        if (priceaudtiBb1.getVbdef7() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, priceaudtiBb1.getVbdef7());
        }
        if (priceaudtiBb1.getVbdef8() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, priceaudtiBb1.getVbdef8());
        }
        if (priceaudtiBb1.getVbdef9() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, priceaudtiBb1.getVbdef9());
        }
        if (priceaudtiBb1.getVbdef10() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, priceaudtiBb1.getVbdef10());
        }
        if (priceaudtiBb1.getVbdef11() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, priceaudtiBb1.getVbdef11());
        }
        if (priceaudtiBb1.getVbdef12() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, priceaudtiBb1.getVbdef12());
        }
        if (priceaudtiBb1.getVbdef13() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, priceaudtiBb1.getVbdef13());
        }
        if (priceaudtiBb1.getVbdef14() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, priceaudtiBb1.getVbdef14());
        }
        if (priceaudtiBb1.getVbdef15() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, priceaudtiBb1.getVbdef15());
        }
        if (priceaudtiBb1.getVbdef16() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, priceaudtiBb1.getVbdef16());
        }
        if (priceaudtiBb1.getVbdef17() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, priceaudtiBb1.getVbdef17());
        }
        if (priceaudtiBb1.getVbdef18() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, priceaudtiBb1.getVbdef18());
        }
        if (priceaudtiBb1.getVbdef19() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, priceaudtiBb1.getVbdef19());
        }
        if (priceaudtiBb1.getVbdef20() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, priceaudtiBb1.getVbdef20());
        }
        if (priceaudtiBb1.getPk_bdefdoc1() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, priceaudtiBb1.getPk_bdefdoc1());
        }
        if (priceaudtiBb1.getPk_bdefdoc2() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, priceaudtiBb1.getPk_bdefdoc2());
        }
        if (priceaudtiBb1.getPk_bdefdoc3() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, priceaudtiBb1.getPk_bdefdoc3());
        }
        if (priceaudtiBb1.getPk_bdefdoc4() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, priceaudtiBb1.getPk_bdefdoc4());
        }
        if (priceaudtiBb1.getPk_bdefdoc5() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, priceaudtiBb1.getPk_bdefdoc5());
        }
        if (priceaudtiBb1.getPk_bdefdoc6() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, priceaudtiBb1.getPk_bdefdoc6());
        }
        if (priceaudtiBb1.getPk_bdefdoc7() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, priceaudtiBb1.getPk_bdefdoc7());
        }
        if (priceaudtiBb1.getPk_bdefdoc8() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, priceaudtiBb1.getPk_bdefdoc8());
        }
        if (priceaudtiBb1.getPk_bdefdoc9() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, priceaudtiBb1.getPk_bdefdoc9());
        }
        if (priceaudtiBb1.getPk_bdefdoc10() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, priceaudtiBb1.getPk_bdefdoc10());
        }
        if (priceaudtiBb1.getPk_bdefdoc11() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, priceaudtiBb1.getPk_bdefdoc11());
        }
        if (priceaudtiBb1.getPk_bdefdoc12() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, priceaudtiBb1.getPk_bdefdoc12());
        }
        if (priceaudtiBb1.getPk_bdefdoc13() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, priceaudtiBb1.getPk_bdefdoc13());
        }
        if (priceaudtiBb1.getPk_bdefdoc14() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, priceaudtiBb1.getPk_bdefdoc14());
        }
        if (priceaudtiBb1.getPk_bdefdoc15() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, priceaudtiBb1.getPk_bdefdoc15());
        }
        if (priceaudtiBb1.getPk_bdefdoc16() == null) {
          stmt.setNull(63, Types.CHAR);
        } else {
          stmt.setString(63, priceaudtiBb1.getPk_bdefdoc16());
        }
        if (priceaudtiBb1.getPk_bdefdoc17() == null) {
          stmt.setNull(64, Types.CHAR);
        } else {
          stmt.setString(64, priceaudtiBb1.getPk_bdefdoc17());
        }
        if (priceaudtiBb1.getPk_bdefdoc18() == null) {
          stmt.setNull(65, Types.CHAR);
        } else {
          stmt.setString(65, priceaudtiBb1.getPk_bdefdoc18());
        }
        if (priceaudtiBb1.getPk_bdefdoc19() == null) {
          stmt.setNull(66, Types.CHAR);
        } else {
          stmt.setString(66, priceaudtiBb1.getPk_bdefdoc19());
        }
        if (priceaudtiBb1.getPk_bdefdoc20() == null) {
          stmt.setNull(67, Types.CHAR);
        } else {
          stmt.setString(67, priceaudtiBb1.getPk_bdefdoc20());
        }
        if (priceaudtiBb1.getCreceiptareaid() == null) {
            stmt.setNull(68, Types.CHAR);
          } else {
            stmt.setString(68, priceaudtiBb1.getCreceiptareaid());
          }
        if (priceaudtiBb1.getCsendtypeid() == null) {
            stmt.setNull(69, Types.CHAR);
          } else {
            stmt.setString(69, priceaudtiBb1.getCsendtypeid());
          }
        if (priceaudtiBb1.getNgenct() == null){
        	stmt.setNull(70, Types.INTEGER);
        }else{
        	stmt.setInt(70, priceaudtiBb1.getNgenct().intValue());
        }
        executeUpdate(stmt);
        //
        priceaudtiBb1s[i] = priceaudtiBb1;
      }
      executeBatch(stmt);
    } catch (SQLException e) {
      throw e;
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return priceaudtiBb1s;
  }

  /**
   * <p>
   * 将VO插入母子表(批量)
   * <p>
   * 创建日期：(2001-6-7)
   * 
   * @param vo
   *            nc.vo.pp.ask.AskbillVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public AskbillVO_Old[] insertVOsFromPrayMyArray(AskbillVO_Old[] vos)
//      throws SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "insertVOsFromPrayMy",
//        new Object[] { vos });
//    /** ********************************************************** */
//
//    // String key = null;
//    // AskbillHeaderVO_Old head = null;
//    // AskbillItemVO_Old[] items = null;
//    // String[] tss = null;
//    // String[] bTss = null;
//    // String ts =null;
//    // for (int i = 0; i < vos.length; i++) {
//    // // 插入表头：
//    // key = insertHeader((AskbillHeaderVO_Old) vos[i].getParentVO());
//    // head = (AskbillHeaderVO_Old) vos[i].getParentVO();
//    // head.setPrimaryKey(key);
//    // tss = queryTs(key,true);
//    // if(tss!=null&&tss.length>0){
//    // ts = tss[0];
//    // }
//    // head.setTs(ts);
//    // vos[i].setParentVO(head);
//    // for(int k=0;k<vos[i].getChildrenVO().length;k++){
//    // items = (AskbillItemVO_Old[]) vos[i].getChildrenVO();
//    // }
//    // /**表体赋表头主键*/
//    // for (int j = 0; j < vos[i].getChildrenVO().length; j++) {
//    // ((AskbillItemVO_Old)vos[i].getChildrenVO()[j]).setCaskbillid(key);
//    // //bTsv.add(((AskbillItemVO)vos[i].getChildrenVO()[j]).getCaskbill_bid());
//    // }
//    // // if(bTsv!=null&&bTsv.size()>0){
//    // // bTss = new String[bTsv.size()];
//    // // bTsv.copyInto(bTss);
//    // // bTss = queryTs(key,bTss,false);
//    // // if(bTss!=null&&bTss.length>0){
//    // // for (int j = 0; j < vos[i].getChildrenVO().length; j++) {
//    // // ((AskbillItemVO)vos[i].getChildrenVO()[j]).setTs(bTss[j]);
//    // // }
//    // // }
//    // // }
//    //    
//    //    
//    // //一次性插入表体各项：
//    // items = insertItemMyArray((AskbillItemVO_Old[])
//    // vos[i].getChildrenVO());
//    // // for (int j = 0; j < items.length; j++) {
//    // // bTsv.add(items[j].getCaskbill_bid());
//    // // }
//    //    
//    // bTss = queryTs(key,false);
//    // if(bTss!=null&&bTss.length>0){
//    // for (int j = 0; j < vos[i].getChildrenVO().length; j++) {
//    // ((AskbillItemVO_Old)vos[i].getChildrenVO()[j]).setTs(bTss[0]);
//    // }
//    // }
//    //    
//    // //写入到货地址
//    // items = setAddrArray(items);
//    // //返回
//    // vos[i].setChildrenVO(items);
//    // /*
//    // for ( int j = 0; j < items.length; j++ ) {
//    // //写入到货地址
//    // if (items[i].getCwarehouseid() != null &&
//    // !items[i].getCwarehouseid().trim().equals("")){
//    // items[i] = setAddr(items[i]);
//    // }
//    // itemKey = insertItem(items[i], key);
//    // items[i].setPrimaryKey(itemKey);
//    // }
//    // */
//    // }
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "insertVOsFromPrayMy",
//        new Object[] { vos });
//    /** ********************************************************** */
//
//    return vos;
//  }

  /**
   * 功能：根据仓库档案ID获取仓库地址 创建日期：(2001-10-27 19:35:14)
   * 
   * @return java.lang.String
   * @param cvendormangid
   *            java.lang.String
   */
  public String queryAddressByWarehouseId(String cwarehouseid)
      throws SQLException {
    String addr = null;
    String sql = "select storaddr from bd_stordoc where pk_stordoc = ?";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cwarehouseid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        addr = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return addr;
  }

  /**
   * 功能描述: 查询表头\体的所有ts
   */
  public Hashtable queryTs(String hId, String HeadORItems) throws SQLException {

    if (hId == null || hId.length() < 0) {
      return null;
    }
    String sql = null;
    String ts = null;
    String id = null;
    int index = 0;
//    Vector hTsOrbTs = new Vector();
//    String[] tss = null;
    Hashtable result = new Hashtable();
    if (HeadORItems.equals(new Integer(IPosition.HEAD).toString())) {
      sql = "select caskbillid,ts from po_askbill where dr=0 and caskbillid = '"
          + hId + "'";
    } else if (HeadORItems.equals(new Integer(IPosition.BODY).toString())) {
      sql = "select caskbill_bid,ts from po_askbill_b where dr=0 and caskbillid = '"
          + hId + "' ";
    } else if (HeadORItems.equals(new Integer(IPosition.BBODY).toString())) {
      sql = "select caskbill_bb1id,ts from po_askbill_bb1 where dr=0 and caskbillid = '"
          + hId + "' ";
    } else if (HeadORItems.equals(new Integer(IPosition.VBODY).toString())) {
      sql = "select caskbill_b1id,ts from po_askbill_b1 where dr=0 and caskbillid = '"
          + hId + "' ";
    }
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        index = 0;
        id = rs.getString(++index);
        ts = rs.getString(++index);
        if(!result.containsKey(id)){
          result.put(id, ts);
        }
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return result;
  }

  /**
   * 功能描述: 查询表头\体的所有ts
   */
  public Hashtable queryTsForPriceAudit(String hId, String HeadORItems)
      throws SQLException {

    if (hId == null || hId.length() < 0) {
      return null;
    }
    String sql = null;
    String ts = null;
    String id = null;
    int index = 0;
//    Vector hTsOrbTs = new Vector();
    Hashtable result = new Hashtable();
//    String[] tss = null;
    if (HeadORItems.equals(new Integer(IPosition.HEAD).toString())) {
      sql = "select cpriceauditid,ts from po_priceaudit where dr=0 and cpriceauditid = '"
          + hId + "'";
    } else if (HeadORItems.equals(new Integer(IPosition.BODY).toString())) {
      sql = "select cpriceaudit_bid,ts from po_priceaudit_b where dr=0 and cpriceauditid = '"
          + hId + "' ";
    } else if (HeadORItems.equals(new Integer(IPosition.BBODY).toString())) {
      sql = "select cpriceaudit_bb1id,ts from po_priceaudit_bb1 where dr=0 and cpriceauditid = '"
          + hId + "' ";
    }
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        index = 0;
        id = rs.getString(++index);
        ts = rs.getString(++index);
        if(!result.containsKey(id)){
          result.put(id, ts);
        }
        
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return result;
  }

  /**
   * 功能描述: 查询表头ID[]的所有表体
   */
  public PriceauditBb1VO[] queryItemBForPriceAuditByHid(String[] saHId)
      throws SQLException {
    PriceauditBb1VO[] items = null;
    PriceauditBb1VO[] itemsTemp = null;
    Vector v = new Vector();
    itemsTemp = queryItemBForPriceAuditByHidOrderByQuotePrice(saHId);
    if (itemsTemp != null && itemsTemp.length > 0) {
      for (int i = 0; i < itemsTemp.length; i++) {
        v.add(itemsTemp[i]);
      }
    }
    itemsTemp = queryItemBForPriceAuditByHidOrderByIprior(saHId);
    if (itemsTemp != null && itemsTemp.length > 0) {
      for (int i = 0; i < itemsTemp.length; i++) {
        v.add(itemsTemp[i]);
      }
    }
    if (v.size() > 0) {
      items = new PriceauditBb1VO[v.size()];
      v.copyInto(items);
    }
    return items;
  }

  /**
   * 功能描述: 查询表头ID[]的所有表体
   */
  public PriceauditBb1VO[] queryItemBForPriceAuditByHidOrderByQuotePrice(
      String[] saHId) throws SQLException {
    if (saHId == null || saHId.length < 0)
      return null;
    /*
     * 创建临时表: nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100
     * nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
     */
    Vector vAllKey = new Vector(); // 除重复ID
    java.util.ArrayList listTblDataId = new java.util.ArrayList();
    int iLen = saHId.length;
    for (int i = 0; i < iLen; i++) {
      if (saHId[i] == null) {
        continue;
      }
      if (vAllKey.contains(saHId[i])) {
        continue;
      }
      listTblDataId.add(saHId[i]);
    }
    iLen = vAllKey.size();
    String strTblNameId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
      strTblNameId = dmo.insertTempTable(listTblDataId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    // 拼接SQL
    String sql =
    // "select b.caskbill_bid, b.caskbillid, b.pk_corp, b.cmangid,
    // b.nasknum, b.vpackmode, b.dreceivedate, b.vreveiveaddress,
    // b.nnotaxprice, b.nintaxprice, b.bisorder, b.nordernum,
    // b.nordernotaxprice, b.norderintaxprice, b.nordernotaxmny, b.ntaxmny,
    // b.npricetaxmny, b.vmemo, b.vdef1, b.vdef2, b.vdef3, b.vdef4, b.vdef5,
    // b.vdef6, b.vfree1, b.vfree2, b.vfree3, b.vfree4, b.vfree5,
    // b.cbaseid,b.ntaxrate,b.deliverdays,b.crowno,b.csourcebilltype,b.csourcebillid,b.csourcebillrowid,b.cupsourcebilltype,b.cupsourcebillid,b.cupsourcebillrowid
    // "
      "select b.cpriceaudit_bb1id, b.cpriceaudit_bid, b.cpriceauditid, b.pk_corp, b.cvendormangid, b.cvendorbaseid, b.dvaliddate, b.dinvaliddate, b.deliverdays, b.nquoteprice, b.nquotetaxprice, b.fpricetype, b.vquotebillcode, b.cquotebillid, b.cquotebill_bid, b.cquotebill_bb1id, b.border, b.iprior, b.nordernum, b.norderprice, b.nordertaxprice, b.norgmny, b.norgtaxmny, b.norgsummny, b.norderbill, " +
      " b.ntaxrate,b.vbdef1, b.vbdef2, b.vbdef3, b.vbdef4, b.vbdef5, b.vbdef6, b.vbdef7, b.vbdef8, b.vbdef9, b.vbdef10, b.vbdef11, b.vbdef12, b.vbdef13, b.vbdef14, b.vbdef15, b.vbdef16, b.vbdef17, b.vbdef18, b.vbdef19, b.vbdef20,b.pk_bdefdoc1,b.pk_bdefdoc2,b.pk_bdefdoc3,b.pk_bdefdoc4,b.pk_bdefdoc5,b.pk_bdefdoc6,b.pk_bdefdoc7,b.pk_bdefdoc8,b.pk_bdefdoc9,b.pk_bdefdoc10,b.pk_bdefdoc11,b.pk_bdefdoc12,b.pk_bdefdoc13,b.pk_bdefdoc14,b.pk_bdefdoc15,b.pk_bdefdoc16,b.pk_bdefdoc17,b.pk_bdefdoc18,b.pk_bdefdoc19,b.pk_bdefdoc20,b.creceiptareaid,b.csendtypeid ,b.ngenct "
          + "from po_priceaudit_bb1 as b,po_priceaudit as h "
          + "where b.cpriceauditid = h.cpriceauditid  "
          + " and h.dr = 0 and b.dr = 0 and (b.border = 'N' or b.border is null)  and h.cpriceauditid in"
          + strTblNameId + " order by b.nquoteprice";
    //
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Vector vRslt = new Vector();
    PriceauditBb1VO item = null;
    PriceauditBb1VO[] items = null;
    int index = 0;
    String sTmp = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        //
        index = 0;
        //
        item = new PriceauditBb1VO();
        //
        sTmp = rs.getString(++index);
        item.setPrimaryKey(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCpriceaudit_bid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCpriceauditid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setPk_corp(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCvendormangid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCvendorbaseid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setDvaliddate(sTmp == null ? null
            : new UFDate(sTmp.trim()));
        sTmp = rs.getString(++index);
        item.setDinvaliddate(sTmp == null ? null : new UFDate(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setDeliverdays(sTmp == null ? null : new Integer(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNquoteprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNquotetaxprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setFpricetype(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVquotebillcode(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebillid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebill_bid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebill_bb1id(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item
            .setBorder(sTmp == null ? null : new UFBoolean(sTmp
                .trim()));
        sTmp = rs.getString(++index);
        item.setIprior(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setNordernum(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorderprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNordertaxprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item
            .setNorgmny(sTmp == null ? null : new UFDouble(sTmp
                .trim()));
        sTmp = rs.getString(++index);
        item.setNorgtaxmny(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorgsummny(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorderbill(sTmp == null ? null : new Integer(sTmp
            .trim()));
        Object oRate = rs.getObject(++index);
        item.setNtaxrate((oRate == null || "".equals(oRate.toString()
            .trim())) ? null : new UFDouble(oRate
            .toString().trim()));
        sTmp = rs.getString(++index);
        item.setVbdef1(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef2(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef3(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef4(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef5(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef6(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef20(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc1(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc2(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc3(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc4(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc5(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc6(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc20(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCreceiptareaid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCsendtypeid(sTmp == null ? null : sTmp.trim());
        int igenct = rs.getInt(++index);
        item.setNgenct(new Integer(igenct));

        vRslt.addElement(item);
      }
      if (vRslt.size() > 0) {
        items = new PriceauditBb1VO[vRslt.size()];
        vRslt.copyInto(items);
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return items;
  }

  /**
   * 功能描述: 查询表头ID[]的所有表体
   */
  public PriceauditBb1VO[] queryItemBForPriceAuditByHidOrderByIprior(
      String[] saHId) throws SQLException {
    if (saHId == null || saHId.length < 0)
      return null;
    /*
     * 创建临时表: nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100
     * nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
     */
    Vector vAllKey = new Vector(); // 除重复ID
//    Vector vHid = new Vector();
    int iLen = saHId.length;
    java.util.ArrayList listTblDataId = new java.util.ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (saHId[i] == null) {
        continue;
      }
      if (vAllKey.contains(saHId[i])) {
        continue;
      }
      listTblDataId.add(saHId[i]);
    }

    iLen = vAllKey.size();
    String strTblNameId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
      strTblNameId = dmo.insertTempTable(listTblDataId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    // 拼接SQL
    String sql =
    // "select b.caskbill_bid, b.caskbillid, b.pk_corp, b.cmangid,
    // b.nasknum, b.vpackmode, b.dreceivedate, b.vreveiveaddress,
    // b.nnotaxprice, b.nintaxprice, b.bisorder, b.nordernum,
    // b.nordernotaxprice, b.norderintaxprice, b.nordernotaxmny, b.ntaxmny,
    // b.npricetaxmny, b.vmemo, b.vdef1, b.vdef2, b.vdef3, b.vdef4, b.vdef5,
    // b.vdef6, b.vfree1, b.vfree2, b.vfree3, b.vfree4, b.vfree5,
    // b.cbaseid,b.ntaxrate,b.deliverdays,b.crowno,b.csourcebilltype,b.csourcebillid,b.csourcebillrowid,b.cupsourcebilltype,b.cupsourcebillid,b.cupsourcebillrowid
    // "
    "select b.cpriceaudit_bb1id, b.cpriceaudit_bid, b.cpriceauditid, b.pk_corp, b.cvendormangid, b.cvendorbaseid, b.dvaliddate, b.dinvaliddate, b.deliverdays, b.nquoteprice, b.nquotetaxprice, b.fpricetype, b.vquotebillcode, b.cquotebillid, b.cquotebill_bid, b.cquotebill_bb1id, b.border, b.iprior, b.nordernum, b.norderprice, b.nordertaxprice, b.norgmny, b.norgtaxmny, b.norgsummny, b.norderbill, "
        + " b.ntaxrate,b.vbdef1, b.vbdef2, b.vbdef3, b.vbdef4, b.vbdef5, b.vbdef6, b.vbdef7, b.vbdef8, b.vbdef9, b.vbdef10, b.vbdef11, b.vbdef12, b.vbdef13, b.vbdef14, b.vbdef15, b.vbdef16, b.vbdef17, b.vbdef18, b.vbdef19, b.vbdef20,b.pk_bdefdoc1,b.pk_bdefdoc2,b.pk_bdefdoc3,b.pk_bdefdoc4,b.pk_bdefdoc5,b.pk_bdefdoc6,b.pk_bdefdoc7,b.pk_bdefdoc8,b.pk_bdefdoc9,b.pk_bdefdoc10,b.pk_bdefdoc11,b.pk_bdefdoc12,b.pk_bdefdoc13,b.pk_bdefdoc14,b.pk_bdefdoc15,b.pk_bdefdoc16,b.pk_bdefdoc17,b.pk_bdefdoc18,b.pk_bdefdoc19,b.pk_bdefdoc20, b.creceiptareaid,b.csendtypeid,b.ngenct "
        + "from po_priceaudit_bb1 as b,po_priceaudit as h "
        + "where b.cpriceauditid = h.cpriceauditid  "
        + " and h.dr = 0 and b.dr = 0 and b.border = 'Y'  and  h.cpriceauditid in "
        + strTblNameId + " order by b.iprior";
    //
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Vector vRslt = new Vector();
    PriceauditBb1VO item = null;
    PriceauditBb1VO[] items = null;
    int index = 0;
    String sTmp = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        //
        index = 0;
        //
        item = new PriceauditBb1VO();
        //
        sTmp = rs.getString(++index);
        item.setPrimaryKey(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCpriceaudit_bid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCpriceauditid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setPk_corp(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCvendormangid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCvendorbaseid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setDvaliddate(sTmp == null ? null
            : new UFDate(sTmp.trim()));
        sTmp = rs.getString(++index);
        item.setDinvaliddate(sTmp == null ? null : new UFDate(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setDeliverdays(sTmp == null ? null : new Integer(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNquoteprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNquotetaxprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setFpricetype(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVquotebillcode(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebillid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebill_bid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCquotebill_bb1id(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item
            .setBorder(sTmp == null ? null : new UFBoolean(sTmp
                .trim()));
        sTmp = rs.getString(++index);
        item.setIprior(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setNordernum(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorderprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNordertaxprice(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item
            .setNorgmny(sTmp == null ? null : new UFDouble(sTmp
                .trim()));
        sTmp = rs.getString(++index);
        item.setNorgtaxmny(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorgsummny(sTmp == null ? null : new UFDouble(sTmp
            .trim()));
        sTmp = rs.getString(++index);
        item.setNorderbill(sTmp == null ? null : new Integer(sTmp
            .trim()));
        Object oRate = rs.getObject(++index);
        item.setNtaxrate((oRate == null || "".equals(oRate.toString()
            .trim())) ? null : new UFDouble(oRate
            .toString().trim()));
        sTmp = rs.getString(++index);
        item.setVbdef1(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef2(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef3(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef4(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef5(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef6(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVbdef20(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc1(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc2(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc3(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc4(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc5(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc6(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPk_bdefdoc20(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCreceiptareaid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCsendtypeid(sTmp == null ? null : sTmp.trim());
        int igenct = rs.getInt(++index);
        item.setNgenct(new Integer(igenct));
        
        vRslt.addElement(item);
      }
      if (vRslt.size() > 0) {
        items = new PriceauditBb1VO[vRslt.size()];
        vRslt.copyInto(items);
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return items;
  }

  /**
   * 功能描述: 查询表头ID[]的所有表体
   */
  public AskbillItemVO_Old[] queryBodyByHidsHts(String[] saHId, String[] saHTs)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "queryBodyByHids",
        new Object[] { saHId, saHTs });
    /** ********************************************************** */
    if (saHId == null || saHId.length < 0)
      return null;
    if (saHTs == null || saHTs.length < 0)
      return null;
    if (saHId.length != saHTs.length)
      return null;
    /*
     * 创建临时表: nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100
     * nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
     */
    Vector vAllKey = new Vector(); // 除重复ID
    Vector vHid = new Vector();
    Vector vHts = new Vector();
    int iLen = saHId.length;
    for (int i = 0; i < iLen; i++) {
      if (saHId[i] == null) {
        continue;
      }
      if (saHTs[i] == null) {
        saHTs[i] = "2000-01-01 00:00:00";
      }
      if (vAllKey.contains(saHId[i] + saHTs[i])) {
        continue;
      }
      vHid.add(saHId[i]);
      vHts.add(saHTs[i]);
      vAllKey.add(saHId[i] + saHTs[i]);
    }
    java.util.ArrayList listTblDataId = new java.util.ArrayList();
    java.util.ArrayList listTblDataTs = new java.util.ArrayList();
    java.util.ArrayList listTmp = null;
    iLen = vAllKey.size();
    for (int i = 0; i < iLen; i++) {
      listTmp = new java.util.ArrayList();
      listTmp.add(new Integer(i));
      listTmp.add(vHid.elementAt(i));
      listTblDataId.add(listTmp);
      listTmp = new java.util.ArrayList();
      listTmp.add(new Integer(i));
      listTmp.add(vHts.elementAt(i));
      listTblDataTs.add(listTmp);
    }
    String strTblNameTs = null;
    String strTblNameId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
      strTblNameTs = dmo.getTempStringTable(
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100, new String[] {
              nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cts" },
          new String[] { "int", "char(19)" },
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, listTblDataTs);
      strTblNameId = dmo.getTempStringTable(
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94,
          new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
              "cmangid" }, new String[] { "int", "char(20)" },
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, listTblDataId);
    } catch (Exception e) {
      throw new SQLException(e.getMessage());
    }
    // 拼接SQL
    String sql =
    // "select b.caskbill_bid, b.caskbillid, b.pk_corp, b.cmangid,
    // b.nasknum, b.vpackmode, b.dreceivedate, b.vreveiveaddress,
    // b.nnotaxprice, b.nintaxprice, b.bisorder, b.nordernum,
    // b.nordernotaxprice, b.norderintaxprice, b.nordernotaxmny, b.ntaxmny,
    // b.npricetaxmny, b.vmemo, b.vdef1, b.vdef2, b.vdef3, b.vdef4, b.vdef5,
    // b.vdef6, b.vfree1, b.vfree2, b.vfree3, b.vfree4, b.vfree5,
    // b.cbaseid,b.ntaxrate,b.deliverdays,b.crowno,b.csourcebilltype,b.csourcebillid,b.csourcebillrowid,b.cupsourcebilltype,b.cupsourcebillid,b.cupsourcebillrowid
    // "
    "select b.caskbill_bid, b.caskbillid, b.pk_corp, b.cmangid, b.nasknum, b.vpackmode, b.dreceivedate, b.vreveiveaddress, b.nnotaxprice, b.nintaxprice, b.bisorder, b.nordernum, b.nordernotaxprice, b.norderintaxprice, b.nordernotaxmny, b.ntaxmny, b.npricetaxmny, b.vmemo, b.vdef1, b.vdef2, b.vdef3, b.vdef4, b.vdef5, b.vdef6, b.vfree1, b.vfree2, b.vfree3, b.vfree4, b.vfree5, b.cbaseid,b.ntaxrate,b.deliverdays,b.crowno,b.csourcebilltype,b.csourcebillid,b.csourcebillrowid,b.cupsourcebilltype,b.cupsourcebillid,b.cupsourcebillrowid , b.vdef7, b.vdef8, b.vdef9, b.vdef10, b.vdef11, b.vdef12, b.vdef13, b.vdef14, b.vdef15, b.vdef16, b.vdef17, b.vdef18, b.vdef19, b.vdef20,b.pk_defdoc1,b.pk_defdoc2,b.pk_defdoc3,b.pk_defdoc4,b.pk_defdoc5,b.pk_defdoc6,b.pk_defdoc7,b.pk_defdoc8,b.pk_defdoc9,b.pk_defdoc10,b.pk_defdoc11,b.pk_defdoc12,b.pk_defdoc13,b.pk_defdoc14,b.pk_defdoc15,b.pk_defdoc16,b.pk_defdoc17,b.pk_defdoc18,b.pk_defdoc19,b.pk_defdoc20 "
        + "from po_askbill_b as b,po_askbill as h,"
        + strTblNameId
        + " as hid,"
        + strTblNameTs
        + " as tts "
        + "where b.caskbillid = h.caskbillid and h.caskbillid = hid.cmangid and h.ts = tts.cts and hid."
        + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
        + " = tts."
        + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
        + " and h.dr = 0 and b.dr = 0 ";
    //
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Vector vRslt = new Vector();
    AskbillItemVO_Old item = null;
    AskbillItemVO_Old[] items = null;
    int index = 0;
    String sTmp = null;
    Object oTmp = null;
    Integer iTmp = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        //
        index = 0;
        //
        item = new AskbillItemVO_Old();
        //
        sTmp = rs.getString(++index);
        item.setCaskbill_bid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCaskbillid(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setPk_corp(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setCmangid(sTmp == null ? null : sTmp.trim());
        //
        oTmp = rs.getObject(++index);
        item.setNasknum((oTmp == null || "".equals(
            oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString().trim()));
        //
        sTmp = rs.getString(++index);
        item.setVpackmode(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setDreceivedate(sTmp == null ? null : new UFDate(sTmp
            .trim(), false));
        //
        sTmp = rs.getString(++index);
        item.setVreveiveaddress(sTmp == null ? null : sTmp.trim());
        //
        oTmp = rs.getObject(++index);
        item.setNnotaxprice((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNintaxprice((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        //
        iTmp = (Integer) rs.getObject(++index);
        item.setBisorder(iTmp == null ? null : iTmp);
        //
        oTmp = rs.getObject(++index);
        item.setNordernum((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNordernotaxprice((oTmp == null || "".equals(oTmp.toString()
            .trim())) ? null : new UFDouble(oTmp
            .toString().trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNorderintaxprice((oTmp == null || "".equals(oTmp.toString()
            .trim())) ? null : new UFDouble(oTmp
            .toString().trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNordernotaxmny((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNtaxmny((oTmp == null || "".equals(
            oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString().trim()));
        //
        oTmp = rs.getObject(++index);
        item.setNpricetaxmny((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        //
        sTmp = rs.getString(++index);
        item.setVmemo(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef1(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef2(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef3(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef4(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef5(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVdef6(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVfree1(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVfree2(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVfree3(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVfree4(sTmp == null ? null : sTmp.trim());
        //
        sTmp = rs.getString(++index);
        item.setVfree5(sTmp == null ? null : sTmp.trim());
        // 存货基本档案主键
        sTmp = rs.getString(++index);
        item.setCbaseid(sTmp == null ? null : sTmp);
        // 税率
        oTmp = rs.getObject(++index);
        item.setTaxratio((oTmp == null || ""
            .equals(oTmp.toString().trim())) ? null : new UFDouble(oTmp.toString()
            .trim()));
        // 交货期（天）
        iTmp = (Integer) rs.getObject(++index);
        item.setDeliverdays(iTmp);
        // crowno
        sTmp = rs.getString(++index);
        item.setRowno(sTmp == null ? null : sTmp.trim());
        // 来源信息
        sTmp = rs.getString(++index);
        item.setCsourcebilltype(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCsourcebillid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCsourcebillrowid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCupsourcebilltype(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCupsourcebillid(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setCupsourcebillrowid(sTmp == null ? null : sTmp.trim());

        sTmp = rs.getString(++index);
        item.setVdef7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setVdef20(sTmp == null ? null : sTmp.trim());

        sTmp = rs.getString(++index);
        item.setPKDefDoc1(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc2(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc3(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc4(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc5(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc6(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc7(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc8(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc9(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc10(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc11(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc12(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc13(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc14(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc15(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc16(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc17(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc18(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc19(sTmp == null ? null : sTmp.trim());
        sTmp = rs.getString(++index);
        item.setPKDefDoc20(sTmp == null ? null : sTmp.trim());

        vRslt.addElement(item);
      }
      if (vRslt.size() > 0) {
        items = new AskbillItemVO_Old[vRslt.size()];
        vRslt.copyInto(items);
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "queryBodyByHids",
        new Object[] { saHId, saHTs });
    /** ********************************************************** */

    return items;
  }

  /**
   * 功能：根据供应商管理档案获取付款协议 创建日期：(2001-9-24 15:57:14)
   * 
   * @return java.lang.String
   * @param cvendormangid
   *            java.lang.String
   */
  public String queryCtermprotocolidByCvendormangid(String cvendormangid)
      throws SQLException {
    String ctermid = null;
    String sql = "select pk_payterm from bd_cumandoc where pk_cumandoc = ?";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cvendormangid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        ctermid = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return ctermid;
  }

  /**
   * 功能：根据供应商管理档案ID获取供应商基本档案ID 创建日期：(2001-9-24 14:35:14)
   * 
   * @return java.lang.String
   * @param cvendormangid
   *            java.lang.String
   */
  public String queryCvendorbaseidByMangid(String cvendormangid)
      throws SQLException {
    String cvendorbaseid = null;
    String sql = "select pk_cubasdoc from bd_cumandoc where pk_cumandoc = ?";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cvendormangid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        cvendorbaseid = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return cvendorbaseid;
  }

  /**
   * @根据供应商管理档案ID获取： 1. 付款协议 2. 专管部门 3. 专管业务员 4. 默认交易币种
   * @作者：周晓 创建日期：(2001-10-27 15:04:05)
   * @return java.lang.ArrayList
   */
  public ArrayList queryDefaultInfosForVendor(String cvendormangid)
      throws SQLException {
    ArrayList ary = null;
    String ctermprotocolid = null;
    String cdeptid = null;
    String cemployeeid = null;
    String ccurrencytypeid = null;
    String sql = "select pk_payterm,pk_respdept1,pk_resppsn1,pk_currtype1 from bd_cumandoc where pk_cumandoc = ?";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, cvendormangid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        ctermprotocolid = rs.getString(1);
        cdeptid = rs.getString(2);
        cemployeeid = rs.getString(3);
        ccurrencytypeid = rs.getString(4);
        ary = new ArrayList();
        ary.add(ctermprotocolid);
        ary.add(cdeptid);
        ary.add(cemployeeid);
        ary.add(ccurrencytypeid);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return ary;
  }
  
  //zhufeng add
  public boolean haveNoSpareNumber(String billId) throws SQLException{
	  boolean flag = true;
	  StringBuffer sql = new StringBuffer(" select po_praybill_b.npraynum,sum(nvl(po_priceaudit_b.nnum,0)) from po_praybill_b  left join po_priceaudit_b on  po_praybill_b.cpraybill_bid = po_priceaudit_b.cupsourcebillrowid where po_praybill_b.cpraybillid = '");
	  sql.append(billId);
	  sql.append("' and (po_priceaudit_b.dr is null or po_priceaudit_b.dr=0) group by po_praybill_b.npraynum,po_priceaudit_b.cupsourcebillrowid  having (po_praybill_b.npraynum - sum(nvl(po_priceaudit_b.nnum,0)) >0)");
	  
	  Connection con = null;
      PreparedStatement stmt = null;
	  ResultSet rs = null;
	  
	  try {
	      con = getConnection();
	      stmt = con.prepareStatement(sql.toString());
	      rs = stmt.executeQuery();
	      
	      if(rs.next())
	    	  flag = false;
	  } finally {
	      try {
	        if (rs != null)
	          rs.close();
	      } catch (Exception e) {
	      }
	      try {
	        if (stmt != null) {
	          stmt.close();
	        }
	      } catch (Exception e) {
	      }
	      try {
	        if (con != null) {
	          con.close();
	        }
	      } catch (Exception e) {
	      }
	  } 
	  return flag;
  }
  public boolean havaAuditInfo(String billId) throws SQLException{
	  boolean flag = false;
	  StringBuffer sb = new StringBuffer("select * from po_priceaudit_b where dr = 0 and cupsourcebillid = '");
	  sb.append(billId);
	  sb.append("'");
	  
	  Connection con = null;
      PreparedStatement stmt = null;
	  ResultSet rs = null;
	  
	  try {
	      con = getConnection();
	      stmt = con.prepareStatement(sb.toString());
	      rs = stmt.executeQuery();
	      
	      if(rs.next())
	    	  flag = true;
	  } finally {
	      try {
	        if (rs != null)
	          rs.close();
	      } catch (Exception e) {
	      }
	      try {
	        if (stmt != null) {
	          stmt.close();
	        }
	      } catch (Exception e) {
	      }
	      try {
	        if (con != null) {
	          con.close();
	        }
	      } catch (Exception e) {
	      }
	  } 
	  return flag;
  }
  public UFDouble findItemSpareNumber(String cpraybid) throws SQLException{
	  StringBuffer sb = new StringBuffer(" select sum(nvl(po_priceaudit_b.nnum,0))  from po_praybill_b left join po_priceaudit_b on  po_praybill_b.cpraybill_bid = po_priceaudit_b.cupsourcebillrowid where po_praybill_b.cpraybill_bid = '");
	  sb.append(cpraybid);
	  sb.append("' and (po_priceaudit_b.dr is null or po_priceaudit_b.dr=0) group by po_praybill_b.npraynum,po_priceaudit_b.cupsourcebillrowid");
	  
	  Connection con = null;
      PreparedStatement stmt = null;
	  ResultSet rs = null;
	  
	  UFDouble number = new UFDouble(0);
	  try {
	      con = getConnection();
	      stmt = con.prepareStatement(sb.toString());
	      rs = stmt.executeQuery();
	      
	      if(rs.next()){
	    	  number = PuPubVO.getUFDouble_NullAsZero(rs.getObject(1));
	      }
	  } finally {
	      try {
	        if (rs != null)
	          rs.close();
	      } catch (Exception e) {
	      }
	      try {
	        if (stmt != null) {
	          stmt.close();
	        }
	      } catch (Exception e) {
	      }
	      try {
	        if (con != null) {
	          con.close();
	        }
	      } catch (Exception e) {
	      }
	  } 
	  return number;
  }
  //zhufeng add

  /**
   * 功能描述:查询请购单表头 输入参数:公司编码,查询条件 !!!含表头表体信息 返回值:请购单表头VO数组
   */
  public PraybillHeaderVO[] queryPraybillHeaderVOsMy(String strSQLHeaders)
      throws SQLException {
    String sql = "";
    // sql = "select distinct po_praybill.cpraybillid, po_praybill.pk_corp,
    // ltrim(rtrim(po_praybill.vpraycode)), po_praybill.dpraydate,
    // po_praybill.cdeptid, po_praybill.cpraypsn, po_praybill.cbiztype,
    // po_praybill.ipraysource, po_praybill.ipraytype, po_praybill.vmemo,
    // po_praybill.caccountyear, po_praybill.ibillstatus,
    // po_praybill.coperator, po_praybill.cstoreorganization,
    // po_praybill.vdef1, po_praybill.vdef2, po_praybill.vdef3,
    // po_praybill.vdef4, po_praybill.vdef5, po_praybill.vdef6,
    // po_praybill.vdef7, po_praybill.vdef8, po_praybill.vdef9,
    // po_praybill.vdef10 ";
    sql = "select distinct po_praybill.cpraybillid, po_praybill.pk_corp, ltrim(rtrim(po_praybill.vpraycode)), po_praybill.dpraydate, po_praybill.cdeptid, po_praybill.cpraypsn, po_praybill.ipraysource, po_praybill.ipraytype, po_praybill.vmemo, po_praybill.caccountyear, po_praybill.ibillstatus, po_praybill.coperator, po_praybill.vdef1, po_praybill.vdef2, po_praybill.vdef3, po_praybill.vdef4, po_praybill.vdef5, po_praybill.vdef6, po_praybill.vdef7, po_praybill.vdef8, po_praybill.vdef9, po_praybill.vdef10 , po_praybill.vdef11, po_praybill.vdef12, po_praybill.vdef13, po_praybill.vdef14, po_praybill.vdef15, po_praybill.vdef16, po_praybill.vdef17, po_praybill.vdef18, po_praybill.vdef19, po_praybill.vdef20,po_praybill.pk_defdoc1,po_praybill.pk_defdoc2,po_praybill.pk_defdoc3,po_praybill.pk_defdoc4,po_praybill.pk_defdoc5,po_praybill.pk_defdoc6,po_praybill.pk_defdoc7,po_praybill.pk_defdoc8,po_praybill.pk_defdoc9,po_praybill.pk_defdoc10,po_praybill.pk_defdoc11,po_praybill.pk_defdoc12,po_praybill.pk_defdoc13,po_praybill.pk_defdoc14,po_praybill.pk_defdoc15,po_praybill.pk_defdoc16,po_praybill.pk_defdoc17,po_praybill.pk_defdoc18,po_praybill.pk_defdoc19,po_praybill.pk_defdoc20,po_praybill.ts,po_praybill.cauditpsn,po_praybill.dauditdate,po_praybill.bdirecttransit,po_praybill.nversion,po_praybill.tmaketime,po_praybill.taudittime,po_praybill.tlastmaketime ";

    sql += strSQLHeaders;

    PraybillHeaderVO praybills[] = null;
    Vector v = new Vector();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        PraybillHeaderVO praybill = new PraybillHeaderVO();
        // cpraybillid :
        String cpraybillid = rs.getString(1);
        praybill.setCpraybillid(cpraybillid == null ? null
            : cpraybillid.trim());
        // cunitid :
        String cunitid = rs.getString(2);
        praybill.setPk_corp(cunitid == null ? null : cunitid.trim());
        // vpraycode :
        String vpraycode = rs.getString(3);
        praybill.setVpraycode(vpraycode == null ? null : vpraycode
            .trim());
        // dpraydate :
        String dpraydate = rs.getString(4);
        praybill.setDpraydate(dpraydate == null ? null : new UFDate(
            dpraydate.trim(), false));
        // cdeptid :
        String cdeptid = rs.getString(5);
        praybill.setCdeptid(cdeptid == null ? null : cdeptid.trim());
        // cpraypsn :
        String cpraypsn = rs.getString(6);
        praybill.setCpraypsn(cpraypsn == null ? null : cpraypsn.trim());
//        // cbiztype :
//        String cbiztype = rs.getString(7);
//        praybill.setCbiztype(cbiztype == null ? null : cbiztype.trim());
        // ipraysource :
        Integer ipraysource = (Integer) rs.getObject(7);
        praybill.setIpraysource(ipraysource == null ? null
            : ipraysource);
        // ipraytype :
        Integer ipraytype = (Integer) rs.getObject(8);
        praybill.setIpraytype(ipraytype == null ? null : ipraytype);
        // vmemo :
        String vmemo = rs.getString(9);
        praybill.setVmemo(vmemo == null ? null : vmemo.trim());
        // caccountyear :
        String caccountyear = rs.getString(10);
        praybill.setCaccountyear(caccountyear == null ? null
            : caccountyear.trim());
        // ibillstatus :
        Integer ibillstatus = (Integer) rs.getObject(11);
        praybill.setIbillstatus(ibillstatus == null ? null
            : ibillstatus);
        // coperator :
        String coperator = rs.getString(12);
        praybill.setCoperator(coperator == null ? null : coperator
            .trim());
        // cstoreorganization :
//        String cstoreorganization = rs.getString(14);
//        praybill
//            .setCstoreorganization(cstoreorganization == null ? null
//                : cstoreorganization.trim());
        // vdef1 :
        String vdef1 = rs.getString(13);
        praybill.setVdef1(vdef1 == null ? null : vdef1.trim());
        // vdef2 :
        String vdef2 = rs.getString(14);
        praybill.setVdef2(vdef2 == null ? null : vdef2.trim());
        // vdef3 :
        String vdef3 = rs.getString(15);
        praybill.setVdef3(vdef3 == null ? null : vdef3.trim());
        // vdef4 :
        String vdef4 = rs.getString(16);
        praybill.setVdef4(vdef4 == null ? null : vdef4.trim());
        // vdef5 :
        String vdef5 = rs.getString(17);
        praybill.setVdef5(vdef5 == null ? null : vdef5.trim());
        // vdef6 :
        String vdef6 = rs.getString(18);
        praybill.setVdef6(vdef6 == null ? null : vdef6.trim());
        // vdef7 :
        String vdef7 = rs.getString(19);
        praybill.setVdef7(vdef7 == null ? null : vdef7.trim());
        // vdef8 :
        String vdef8 = rs.getString(20);
        praybill.setVdef8(vdef8 == null ? null : vdef8.trim());
        // vdef9 :
        String vdef9 = rs.getString(21);
        praybill.setVdef9(vdef9 == null ? null : vdef9.trim());
        // vdef10 :
        String vdef10 = rs.getString(22);
        praybill.setVdef10(vdef10 == null ? null : vdef10.trim());
        // // vdef11 :
        String vdef11 = rs.getString(23);
        praybill.setVdef11(vdef11 == null ? null : vdef11.trim());
        // // vdef12 :
        String vdef12 = rs.getString(24);
        praybill.setVdef12(vdef12 == null ? null : vdef12.trim());
        // // vdef13 :
        String vdef13 = rs.getString(25);
        praybill.setVdef13(vdef13 == null ? null : vdef13.trim());
        // // vdef14 :
        String vdef14 = rs.getString(26);
        praybill.setVdef14(vdef14 == null ? null : vdef14.trim());
        // // vdef15 :
        String vdef15 = rs.getString(27);
        praybill.setVdef15(vdef15 == null ? null : vdef15.trim());
        // // vdef16 :
        String vdef16 = rs.getString(28);
        praybill.setVdef16(vdef16 == null ? null : vdef16.trim());
        // // vdef17 :
        String vdef17 = rs.getString(29);
        praybill.setVdef17(vdef17 == null ? null : vdef17.trim());
        // // vdef18 :
        String vdef18 = rs.getString(30);
        praybill.setVdef18(vdef18 == null ? null : vdef18.trim());
        // // vdef19 :
        String vdef19 = rs.getString(31);
        praybill.setVdef19(vdef19 == null ? null : vdef19.trim());
        // // vdef20 :
        String vdef20 = rs.getString(32);
        praybill.setVdef20(vdef20 == null ? null : vdef20.trim());
        //
        // // pk_defdoc1 :
        String pk_defdoc1 = rs.getString(33);
        praybill.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1
            .trim());
        // // pk_defdoc2 :
        String pk_defdoc2 = rs.getString(34);
        praybill.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2
            .trim());
        // // pk_defdoc3 :
        String pk_defdoc3 = rs.getString(35);
        praybill.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3
            .trim());
        // // pk_defdoc4 :
        String pk_defdoc4 = rs.getString(36);
        praybill.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4
            .trim());
        // // pk_defdoc5 :
        String pk_defdoc5 = rs.getString(37);
        praybill.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5
            .trim());
        // // pk_defdoc6 :
        String pk_defdoc6 = rs.getString(38);
        praybill.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6
            .trim());
        // // pk_defdoc7 :
        String pk_defdoc7 = rs.getString(39);
        praybill.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7
            .trim());
        // // pk_defdoc8 :
        String pk_defdoc8 = rs.getString(40);
        praybill.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8
            .trim());
        // // pk_defdoc9 :
        String pk_defdoc9 = rs.getString(41);
        praybill.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9
            .trim());
        // // pk_defdoc10 :
        String pk_defdoc10 = rs.getString(42);
        praybill.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10
            .trim());
        // // pk_defdoc11 :
        String pk_defdoc11 = rs.getString(43);
        praybill.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11
            .trim());
        // // pk_defdoc12 :
        String pk_defdoc12 = rs.getString(44);
        praybill.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12
            .trim());
        // // pk_defdoc13 :
        String pk_defdoc13 = rs.getString(45);
        praybill.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13
            .trim());
        // // pk_defdoc14 :
        String pk_defdoc14 = rs.getString(46);
        praybill.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14
            .trim());
        // // pk_defdoc15 :
        String pk_defdoc15 = rs.getString(47);
        praybill.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15
            .trim());
        // // pk_defdoc16 :
        String pk_defdoc16 = rs.getString(48);
        praybill.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16
            .trim());
        // // pk_defdoc17 :
        String pk_defdoc17 = rs.getString(49);
        praybill.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17
            .trim());
        // // pk_defdoc18 :
        String pk_defdoc18 = rs.getString(50);
        praybill.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18
            .trim());
        // // pk_defdoc19 :
        String pk_defdoc19 = rs.getString(51);
        praybill.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19
            .trim());
        // // pk_defdoc20 :
        String pk_defdoc20 = rs.getString(52);
        praybill.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20
            .trim());

        // // ts :
        String ts = rs.getString(53);
        praybill.setTs(ts == null ? null : ts.trim());
        // // cauditpsn :
        String cauditpsn = rs.getString(54);
        praybill.setCauditpsn(cauditpsn == null ? null : cauditpsn
            .trim());

        // // dauditdate :
        String dauditdate = rs.getString(55);
        praybill.setDauditdate(dauditdate == null ? null : new UFDate(
            dauditdate.trim()));
        String bdirecttransit = rs.getString(56);
        praybill.setDirecttransit(bdirecttransit);

        String nversion = rs.getString(57);
        praybill.setNversion(PuPubVO.getInteger_NullAs(nversion, new Integer(0)));
        
        String sMakeTime = rs.getString(58);
        praybill.setTmaketime(PuPubVO.getString_TrimZeroLenAsNull(sMakeTime) == null ? null : sMakeTime.trim());
        
        String sAuditTime = rs.getString(59);
        praybill.setTaudittime(PuPubVO.getString_TrimZeroLenAsNull(sAuditTime) == null ? null : sAuditTime.trim());
        
        String slastmakeTime = rs.getString(60);
        praybill.setTlastmaketime(PuPubVO.getString_TrimZeroLenAsNull(slastmakeTime) == null ? null : slastmakeTime.trim());
        
        v.addElement(praybill);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    praybills = new PraybillHeaderVO[v.size()];
    if (v.size() > 0) {
      v.copyInto(praybills);
    }

    return praybills;
  }

  /**
   * 获取操作员ID相关的人员档案ID。 创建日期：(2001-9-28 16:36:27)
   * 
   * @return java.lang.String
   * @param userid
   *            java.lang.String
   */
  public String queryPsndocIdByUserId(String userid, String pk_corp)
      throws SQLException {

    String pk_psndoc = null;

    String sql = "select pk_psndoc ";
    sql += "from sm_userandclerk ";
    sql += "where userid = ? ";
    if (pk_corp != null) {
      sql += "and pk_corp = '" + pk_corp + "' ";
    }
    sql += "and dr = 0 ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, userid);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        pk_psndoc = rs.getString(1);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return pk_psndoc;
  }

  /**
   * 根据询价单号获取相应供应商管理档案ID 如果这张询价单未指定任何供应商则返回 NULL ？？？可否作废的单据的供应商继续发出询价？？？
   * ？？？“作废的单据号+供应商”是否也不允许重复？？？ 创建日期：(2001-9-25 17:16:38)
   * 
   * @return java.lang.String[]
   * @param askcode
   *            java.lang.String
   */
  public String[] queryVendorIdByCode(String askcode) throws SQLException {

    String vendorid = null;
    String[] vendorids = null;
    Vector v = new Vector();

    String sql = "select cvendormangid ";
    sql += "from po_askbill ";
    sql += "where vaskbillcode = ? ";
    // sql += "and dr = 0";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, askcode);
      rs = stmt.executeQuery();
      //
      while (rs.next()) {
        vendorid = rs.getString(1);
        if (!(vendorid == null || "".equals(vendorid.trim()))) {
          v.addElement(vendorid);
        }
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    if (v.size() > 0) {
      vendorids = new String[v.size()];
      v.copyInto(vendorids);
    }
    return vendorids;
  }

  /**
   * 判断此单据号是否已经在数据库中存在 创建日期：(2001-9-25 17:16:38)
   * 
   * @return java.lang.String[]
   * @param askcode
   *            java.lang.String
   */
  public boolean isAlreadyHave(String askcode, String cvendormangid)
      throws SQLException {

    boolean bret = false;
    String sql = "select vaskbillcode ";
    sql += "from po_askbill ";
    sql += "where vaskbillcode = ? and cvendormangid = ?  and dr=0 ";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, askcode);
      stmt.setString(2, cvendormangid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        bret = true;
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return bret;
  }

  /**
   * @功能：给请购生成的询价单赋到货地址
   * @作者：周晓 创建日期：(2001-8-15 17:02:33)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @param askbill
   *            nc.vo.pp.ask.AskbillVO
   */
//  public AskbillItemVO_Old[] setAddrArray(AskbillItemVO_Old[] items)
//      throws SQLException {
//
//    String cwarehouseid = null;
//    String sql = null;
//
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    try {
//      con = getConnection();
//      for (int i = 0; i < items.length; i++) {
//        sql = "SELECT storaddr FROM bd_stordoc ";
//        cwarehouseid = items[i].getCwarehouseid();
//        if (cwarehouseid != null && cwarehouseid.trim().length() > 0) {
//          sql += "WHERE pk_stordoc = '";
//          sql += cwarehouseid;
//          sql += "'";
//        } else {
//          // 如果仓库是空则不做处理
//          continue;
//        }
//        stmt = con.prepareStatement(sql);
//        rs = stmt.executeQuery();
//        if (rs.next()) {
//          String addr = rs.getString(1);
//          items[i].setVreveiveaddress(addr);
//        }
//        rs.close();
//        stmt.close();
//      }
//    } finally {
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//
//    }
//    return items;
//  }

  /**
   * @功能：给询价单赋扩展属性值(为给订单表头赋相关值)
   * @作者：周晓 创建日期：(2001-8-22 8:23:33)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since: 发运方式：cmangid -> bd_invmandoc.pk_sendtype 默认仓库：cmangid ->
   *         bd_invmandoc.pk_stordoc2 业务类型：cmangid ->
   *         bd_invmandoc.pk_defbusitype 发票方： cmangid ->
   *         bd_invmandoc.pk_cusmandoc2 开票客商 (如果为空则与供应商相同) 开户银行：cmangid ->
   *         pk_cubasdoc -> bd_custbank.pk_custbank where
   *         upper(bd_custbank.defflag) = "Y" 发货地址：cmangid -> pk_cubasdoc ->
   *         bd_custaddr.pk_custaddr where upper(bd_custaddr.defaddrflag) =
   *         "Y" 采购部门：cmangid -> 待扩充 业务员： cmangid -> 待扩充
   * @return nc.vo.po.OrderHeaderVO
   * @param head
   *            nc.vo.po.OrderHeaderVO
   */
//  public AskbillHeaderVO_Old setAskbillHeaderExtendInfo(
//      AskbillHeaderVO_Old head) throws SQLException {
//    AskbillHeaderVO_Old newHead = head;
//    String pk_cumandoc = null;
//    Connection con = null;
//    PreparedStatement stmt = null;
//    ResultSet rs = null;
//    try {
//      pk_cumandoc = newHead.getCvendormangid();
//      if (pk_cumandoc == null || pk_cumandoc.trim().equals(""))
//        throw new BusinessException(nc.bs.ml.NCLangResOnserver
//            .getInstance().getStrByID("40040701",
//                "UPP40040701-000032")/*
//                             * @res
//                             * "数据错误：供应商管理档案为空！"
//                             */);
//      StringBuffer sql = new StringBuffer(" ");
//      sql.append("select ");
//      sql.append("bd_invmandoc.pk_sendtype,bd_invmandoc.pk_stordoc2, ");
//      sql
//          .append("bd_invmandoc.pk_defbusitype,bd_invmandoc.pk_cusmandoc2, ");
//      sql.append("bd_custbank.pk_custbank,bd_custaddr.pk_custaddr ");
//      sql.append("from bd_cumandoc ");
//      sql
//          .append("left outer join bd_invbasdoc on bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc ");
//      sql
//          .append("left outer join bd_custbank on bd_invbasdoc.pk_invbasdoc = bd_custbank.pk_invbasdoc ");
//      sql
//          .append("left outer join bd_custaddr on bd_invbasdoc.pk_invbasdoc = bd_custaddr.pk_invbasdoc ");
//      sql.append("where bd_invmandoc.pk_cumandoc = ? ");
//      sql.append("and upper(bd_custbank.defflag) = 'Y' ");
//      sql.append("and upper(bd_custaddr.defaddrflag) = 'Y' ");
//      con = getConnection();
//      stmt = con.prepareStatement(sql.toString());
//      stmt.setString(1, pk_cumandoc);
//      rs = stmt.executeQuery();
//      while (rs.next()) {
//        // 发运方式
//        String pk_sendtype = rs.getString(1);
//        newHead
//            .setPk_sendtype(pk_sendtype == null ? null
//                : pk_sendtype);
//        // 默认仓库
//        String pk_stordoc2 = rs.getString(2);
//        newHead.setPk_stordoc(pk_stordoc2 == null ? null : pk_stordoc2);
//      }
//    } catch (SQLException e) {
//      throw e;
//    } catch (Exception e) {
//      throw new SQLException(e.getMessage());
//    } finally {
//      try {
//        if (rs != null)
//          rs.close();
//      } catch (Exception e) {
//
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//    return newHead;
//  }

  /**
   * @功能：给用来生成采购订单的询价单表体赋相关信息:税率
   * @作者：周晓 创建日期：(2001-8-22 12:57:02)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param items
   *            nc.vo.pp.ask.AskbillItemVO[]
   */
//  public AskbillItemVO_Old[] setAskbillItemsForGenOrder(
//      AskbillItemVO_Old[] items) throws SQLException {
//    AskbillItemVO_Old[] newItems = items;
//    String sql = "";
//    AskbillItemVO_Old item = new AskbillItemVO_Old();
//    Connection con = null;
//    PreparedStatement stmt = null;
//    try {
//      con = getConnection();
//      ResultSet rs = null;
//      String taxid = null;
//      String taxname = null;
//      Object taxratio = null;
//      for (int i = 0; i < newItems.length; i++) {
//        item = newItems[i];
//        sql = "SELECT bd_invbasdoc.pk_taxitems, bd_taxitems.taxname, bd_taxitems.taxratio ";
//        sql += "FROM bd_invbasdoc, bd_taxitems ";
//        sql += "WHERE bd_invbasdoc.pk_taxitems = bd_taxitems.pk_taxitems AND ";
//        sql += "bd_invbasdoc.pk_invbasdoc = ? ";
//        stmt = con.prepareStatement(sql);
//        stmt.setString(1, item.getCbaseid());
//        rs = stmt.executeQuery();
//        while (rs.next()) {
//          taxid = rs.getString(1);
//          newItems[i].setTaxId(taxid == null ? null : taxid);
//          taxname = rs.getString(2);
//          newItems[i].setTaxname(taxname == null ? null : taxname);
//          taxratio = rs.getObject(3);
//          newItems[i].setTaxratio((taxratio == null || taxratio
//              .toString().trim().equals("")) ? new UFDouble(0)
//              : new UFDouble(taxratio.toString().trim()));
//        }
//        rs.close();
//        stmt.close();
//      }
//    } finally {
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//    return newItems;
//  }

  /**
   * @功能：给用来生成采购订单的询价单表体赋相关信息:税率
   * @作者：周晓 创建日期：(2001-8-22 12:57:02)
   * @param:<|>
   * @return:
   * @exception:
   * @see;
   * @since:
   * 
   * @return nc.vo.pp.ask.AskbillItemVO[]
   * @param items
   *            nc.vo.pp.ask.AskbillItemVO[]
   */
  public UFDouble[] queryTaxratioByInvbasdoc(String[] invbasdoc)
      throws SQLException {

    Vector temptax = new Vector();
    UFDouble[] taxratios = null;
    String sql = "";
    // AskbillItemVO item = new AskbillItemVO();
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      
      Object taxratio = null;
      for (int i = 0; i < invbasdoc.length; i++) {

        sql = "SELECT bd_invbasdoc.pk_taxitems, bd_taxitems.taxname, bd_taxitems.taxratio ";
        sql += "FROM bd_invbasdoc, bd_taxitems ";
        sql += "WHERE bd_invbasdoc.pk_taxitems = bd_taxitems.pk_taxitems AND ";
        sql += "bd_invbasdoc.pk_invbasdoc = ? ";
        stmt = con.prepareStatement(sql);
        stmt.setString(1, invbasdoc[i]);
        rs = stmt.executeQuery();
        while (rs.next()) {
          // taxid = rs.getString(1);
          // newItems[i].setTaxId(taxid == null ? null : taxid);
          // taxname = rs.getString(2);
          // newItems[i].setTaxname(taxname == null ? null : taxname);
          taxratio = rs.getObject(3);
          temptax.add((taxratio == null || ""
              .equals(taxratio.toString().trim())) ? new UFDouble(0) : new UFDouble(
              taxratio.toString().trim()));
        }
        if (temptax != null && temptax.size() > 0) {
          taxratios = new UFDouble[temptax.size()];
          temptax.copyInto(taxratios);
        }

        rs.close();
        stmt.close();
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
    }
    return taxratios;
  }

  /**
   * @功能：把比价结果写入询价单(批量)
   * 
   * 创建日期：(2003-12-17 11:17:15)
   * 
   * 参数：ThanresultItemVO[] thanitems 比价VO数组
   */
  public void updateAskbillItemsByThanResultMyBatch(
      ThanresultItemVO[] thanitems) throws SQLException {
    if (thanitems == null || thanitems.length == 0)
      return;
    /* 以下更改项目与前端 ThanUI.initFieldsEditbale() 相对应 */
    String sql = " update po_askbill_b set nordernum = ?, nordernotaxprice = ?, norderintaxprice = ?, nordernotaxmny = ?, ntaxmny = ?,  npricetaxmny = ? , bisorder = ?, vmemo = ? where caskbill_bid = ? ";
    Connection con = null;
    PreparedStatement stmt = null;
    ThanresultItemVO thanitem = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      int iLen = thanitems.length;
      for (int i = 0; i < iLen; i++) {
        thanitem = thanitems[i];
        if (thanitem == null)
          continue;
        if (thanitem.getNordernum() == null) {
          stmt.setNull(1, Types.INTEGER);
        } else {
          stmt.setBigDecimal(1, thanitem.getNordernum()
              .toBigDecimal());
        }

        if (thanitem.getNordernotaxprice() == null) {
          stmt.setNull(2, Types.INTEGER);
        } else {
          stmt.setBigDecimal(2, thanitem.getNordernotaxprice()
              .toBigDecimal());
        }

        if (thanitem.getNorderintaxprice() == null) {
          stmt.setNull(3, Types.INTEGER);
        } else {
          stmt.setBigDecimal(3, thanitem.getNorderintaxprice()
              .toBigDecimal());
        }

        if (thanitem.getNordernotaxmny() == null) {
          stmt.setNull(4, Types.INTEGER);
        } else {
          stmt.setBigDecimal(4, thanitem.getNordernotaxmny()
              .toBigDecimal());
        }

        if (thanitem.getNtaxmny() == null) {
          stmt.setNull(5, Types.INTEGER);
        } else {
          stmt.setBigDecimal(5, thanitem.getNtaxmny().toBigDecimal());
        }

        if (thanitem.getNpricetaxmny() == null) {
          stmt.setNull(6, Types.INTEGER);
        } else {
          stmt.setBigDecimal(6, thanitem.getNpricetaxmny()
              .toBigDecimal());
        }

        if (thanitem.getBisorder() == null) {
          stmt.setNull(7, Types.INTEGER);
        } else {
          stmt.setInt(7, thanitem.getBisorder().intValue());
        }

        if (thanitem.getVmemo() == null
            || thanitem.getVmemo().trim().length() <= 0) {
          stmt.setString(8, "");
        } else {
          stmt.setString(8, thanitem.getVmemo().trim());
        }
        // 表体主键
        stmt.setString(9, thanitem.getCaskbill_bid());
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }

  /**
   * 报价：手工维护状态 发出->报价 创建日期：(2001-10-25 13:10:40)
   * 
   * @param caskbillid
   *            java.lang.String
   * @param newStatus
   *            int
   */
  public void updateAskbillStatusMy(String caskbillid, int newStatus)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "update po_askbill set ibillstatus = ? where caskbillid = ? ";
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setInt(1, newStatus);
      stmt.setString(2, caskbillid);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
  }

  /**
   * 功能：更新单据状态(批量)
   * 
   * 创建日期：(2003-12-17 11:10:40)
   * 
   * 参数： String[] caskbillids 单据ID数组 int newStatus 待更新状态
   */
  public void updateAskbillStatusMyBatch(String[] caskbillids, int newStatus)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillids, new Integer(newStatus) });
    /** ********************************************************** */
    if (caskbillids == null || caskbillids.length == 0)
      return;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "update po_askbill set ibillstatus = ? where caskbillid = ? ";
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      for (int i = 0; i < caskbillids.length; i++) {
        stmt.setInt(1, newStatus);
        stmt.setString(2, caskbillids[i]);
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillids, new Integer(newStatus) });
    /** ********************************************************** */
  }

  /**
   * 报价：手工维护状态 发出->报价 创建日期：(2001-10-25 13:10:40)
   * 
   * @param caskbillid
   *            java.lang.String
   * @param newStatus
   *            int
   */
  public void updateAskbillStatusQuoteMy(String caskbillid, String cquotepsn,
      String dquotedate, int newStatus) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "update po_askbill set ibillstatus = ?, cquotepsn = ? , dquotedate = ? where caskbillid = ? ";
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setInt(1, newStatus);
      stmt.setString(2, cquotepsn);
      stmt.setString(3, dquotedate);
      stmt.setString(4, caskbillid);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
  }

  /**
   * 报价：手工维护状态 报价->发出 创建日期：(2001-10-25 13:10:40)
   * 
   * @param caskbillid
   *            java.lang.String
   * @param newStatus
   *            int
   */
  public void updateAskbillStatusSendMy(String caskbillid, int newStatus)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "update po_askbill set ibillstatus = ?, cquotepsn = ? , dquotedate = ? where caskbillid = ? ";
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setInt(1, newStatus);
      stmt.setNull(2, Types.CHAR);
      stmt.setNull(3, Types.CHAR);
      stmt.setString(4, caskbillid);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid, new Integer(newStatus) });
    /** ********************************************************** */
  }

  /**
   * 用一个VO对象的属性更新数据库中的值。
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillHeader
   *            nc.vo.pp.ask.AskbillHeaderVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
//  public AskbillHeaderVO_Old updateHeaderMy(AskbillHeaderVO_Old askbillHeader)
//      throws java.sql.SQLException {
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateHeaderMy",
//        new Object[] { askbillHeader });
//    /** ********************************************************** */
//
//    Connection con = null;
//    PreparedStatement stmt = null;
//
//    String sql = "select bd_cubasdoc.pk_cubasdoc from bd_cubasdoc, bd_cumandoc ";
//    sql += "where bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ";
//    sql += "and bd_cumandoc.pk_cumandoc = ? ";
//
//    try {
//      con = getConnection();
//      stmt = con.prepareStatement(sql);
//
//      // 如果管理档案为空则基本档案也应为空
//      if (askbillHeader.getCvendormangid() == null
//          || askbillHeader.getCvendormangid().trim().equals("")) {
//        askbillHeader.setCvendorbaseid(null);
//      } else {
//        stmt.setString(1, askbillHeader.getCvendormangid());
//        ResultSet rs = stmt.executeQuery();
//        while (rs.next()) {
//          String cvendorbaseid = rs.getString(1);
//          askbillHeader.setCvendorbaseid(cvendorbaseid);
//        }
//        rs.close();
//      }
//
//      // sql = "update po_askbill set pk_corp = ?, vaskbillcode = ?,
//      // cvendormangid = ?, cdeptid = ?, cemployeeid = ?, ccurrencytypeid
//      // = ?, dclosedate = ?, caskpsn = ?, daskdate = ?, cquotepsn = ?,
//      // dquotedate = ?, ctermprotocolid = ?, caccountyear = ?,
//      // ibillstatus = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?,
//      // vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 =
//      // ?, cvendorbaseid = ?, pk_purorg = ? where caskbillid = ?";
//      sql = "update po_askbill set pk_corp = ?, vaskbillcode = ?, cvendormangid = ?, cdeptid = ?, cemployeeid = ?, ccurrencytypeid = ?, dclosedate = ?, caskpsn = ?, daskdate = ?, cquotepsn = ?, dquotedate = ?, ctermprotocolid = ?, caccountyear = ?, ibillstatus = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?, cvendorbaseid = ?, pk_purorg = ?, vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ?  where caskbillid = ?";
//
//      stmt = con.prepareStatement(sql);
//      // update non PK fields:
//      if (askbillHeader.getPk_corp() == null) {
//        stmt.setNull(1, Types.CHAR);
//      } else {
//        stmt.setString(1, askbillHeader.getPk_corp());
//      }
//      if (askbillHeader.getVaskbillcode() == null) {
//        stmt.setNull(2, Types.CHAR);
//      } else {
//        stmt.setString(2, askbillHeader.getVaskbillcode());
//      }
//      if (askbillHeader.getCvendormangid() == null) {
//        stmt.setNull(3, Types.CHAR);
//      } else {
//        stmt.setString(3, askbillHeader.getCvendormangid());
//      }
//      if (askbillHeader.getCdeptid() == null) {
//        stmt.setNull(4, Types.CHAR);
//      } else {
//        stmt.setString(4, askbillHeader.getCdeptid());
//      }
//      if (askbillHeader.getCemployeeid() == null) {
//        stmt.setNull(5, Types.CHAR);
//      } else {
//        stmt.setString(5, askbillHeader.getCemployeeid());
//      }
//      if (askbillHeader.getCcurrencytypeid() == null) {
//        stmt.setNull(6, Types.CHAR);
//      } else {
//        stmt.setString(6, askbillHeader.getCcurrencytypeid());
//      }
//      if (askbillHeader.getDclosedate() == null) {
//        stmt.setNull(7, Types.CHAR);
//      } else {
//        stmt.setString(7, askbillHeader.getDclosedate().toString());
//      }
//      if (askbillHeader.getCaskpsn() == null) {
//        stmt.setNull(8, Types.CHAR);
//      } else {
//        stmt.setString(8, askbillHeader.getCaskpsn());
//      }
//      if (askbillHeader.getDaskdate() == null) {
//        stmt.setNull(9, Types.CHAR);
//      } else {
//        stmt.setString(9, askbillHeader.getDaskdate().toString());
//      }
//      if (askbillHeader.getCquotepsn() == null) {
//        stmt.setNull(10, Types.CHAR);
//      } else {
//        stmt.setString(10, askbillHeader.getCquotepsn());
//      }
//      if (askbillHeader.getDquotedate() == null) {
//        stmt.setNull(11, Types.CHAR);
//      } else {
//        stmt.setString(11, askbillHeader.getDquotedate().toString());
//      }
//      if (askbillHeader.getCtermprotocolid() == null) {
//        stmt.setNull(12, Types.CHAR);
//      } else {
//        stmt.setString(12, askbillHeader.getCtermprotocolid());
//      }
//      if (askbillHeader.getCaccountyear() == null) {
//        stmt.setNull(13, Types.CHAR);
//      } else {
//        stmt.setString(13, askbillHeader.getCaccountyear());
//      }
//      if (askbillHeader.getIbillstatus() == null) {
//        stmt.setNull(14, Types.INTEGER);
//      } else {
//        stmt.setInt(14, askbillHeader.getIbillstatus().intValue());
//      }
//      if (askbillHeader.getVdef1() == null) {
//        stmt.setNull(15, Types.CHAR);
//      } else {
//        stmt.setString(15, askbillHeader.getVdef1());
//      }
//      if (askbillHeader.getVdef2() == null) {
//        stmt.setNull(16, Types.CHAR);
//      } else {
//        stmt.setString(16, askbillHeader.getVdef2());
//      }
//      if (askbillHeader.getVdef3() == null) {
//        stmt.setNull(17, Types.CHAR);
//      } else {
//        stmt.setString(17, askbillHeader.getVdef3());
//      }
//      if (askbillHeader.getVdef4() == null) {
//        stmt.setNull(18, Types.CHAR);
//      } else {
//        stmt.setString(18, askbillHeader.getVdef4());
//      }
//      if (askbillHeader.getVdef5() == null) {
//        stmt.setNull(19, Types.CHAR);
//      } else {
//        stmt.setString(19, askbillHeader.getVdef5());
//      }
//      if (askbillHeader.getVdef6() == null) {
//        stmt.setNull(20, Types.CHAR);
//      } else {
//        stmt.setString(20, askbillHeader.getVdef6());
//      }
//      if (askbillHeader.getVdef7() == null) {
//        stmt.setNull(21, Types.CHAR);
//      } else {
//        stmt.setString(21, askbillHeader.getVdef7());
//      }
//      if (askbillHeader.getVdef8() == null) {
//        stmt.setNull(22, Types.CHAR);
//      } else {
//        stmt.setString(22, askbillHeader.getVdef8());
//      }
//      if (askbillHeader.getVdef9() == null) {
//        stmt.setNull(23, Types.CHAR);
//      } else {
//        stmt.setString(23, askbillHeader.getVdef9());
//      }
//      if (askbillHeader.getVdef10() == null) {
//        stmt.setNull(24, Types.CHAR);
//      } else {
//        stmt.setString(24, askbillHeader.getVdef10());
//      }
//      //
//      if (askbillHeader.getCvendorbaseid() == null) {
//        stmt.setNull(25, Types.CHAR);
//      } else {
//        stmt.setString(25, askbillHeader.getCvendorbaseid());
//      }
//      // 采购组织
//      if (askbillHeader.getPk_purorg() == null) {
//        stmt.setNull(26, Types.CHAR);
//      } else {
//        stmt.setString(26, askbillHeader.getPk_purorg());
//      }
//
//      if (askbillHeader.getVdef11() == null) {
//        stmt.setNull(27, Types.CHAR);
//      } else {
//        stmt.setString(27, askbillHeader.getVdef11());
//      }
//      if (askbillHeader.getVdef12() == null) {
//        stmt.setNull(28, Types.CHAR);
//      } else {
//        stmt.setString(28, askbillHeader.getVdef12());
//      }
//      if (askbillHeader.getVdef13() == null) {
//        stmt.setNull(29, Types.CHAR);
//      } else {
//        stmt.setString(29, askbillHeader.getVdef13());
//      }
//      if (askbillHeader.getVdef14() == null) {
//        stmt.setNull(30, Types.CHAR);
//      } else {
//        stmt.setString(30, askbillHeader.getVdef14());
//      }
//      if (askbillHeader.getVdef15() == null) {
//        stmt.setNull(31, Types.CHAR);
//      } else {
//        stmt.setString(31, askbillHeader.getVdef15());
//      }
//      if (askbillHeader.getVdef16() == null) {
//        stmt.setNull(32, Types.CHAR);
//      } else {
//        stmt.setString(32, askbillHeader.getVdef16());
//      }
//      if (askbillHeader.getVdef17() == null) {
//        stmt.setNull(33, Types.CHAR);
//      } else {
//        stmt.setString(33, askbillHeader.getVdef17());
//      }
//      if (askbillHeader.getVdef18() == null) {
//        stmt.setNull(34, Types.CHAR);
//      } else {
//        stmt.setString(34, askbillHeader.getVdef18());
//      }
//      if (askbillHeader.getVdef19() == null) {
//        stmt.setNull(35, Types.CHAR);
//      } else {
//        stmt.setString(35, askbillHeader.getVdef19());
//      }
//      if (askbillHeader.getVdef20() == null) {
//        stmt.setNull(36, Types.CHAR);
//      } else {
//        stmt.setString(36, askbillHeader.getVdef20());
//      }
//      if (askbillHeader.getPKDefDoc1() == null) {
//        stmt.setNull(37, Types.CHAR);
//      } else {
//        stmt.setString(37, askbillHeader.getPKDefDoc1());
//      }
//      if (askbillHeader.getPKDefDoc2() == null) {
//        stmt.setNull(38, Types.CHAR);
//      } else {
//        stmt.setString(38, askbillHeader.getPKDefDoc2());
//      }
//      if (askbillHeader.getPKDefDoc3() == null) {
//        stmt.setNull(39, Types.CHAR);
//      } else {
//        stmt.setString(39, askbillHeader.getPKDefDoc3());
//      }
//      if (askbillHeader.getPKDefDoc4() == null) {
//        stmt.setNull(40, Types.CHAR);
//      } else {
//        stmt.setString(40, askbillHeader.getPKDefDoc4());
//      }
//      if (askbillHeader.getPKDefDoc5() == null) {
//        stmt.setNull(41, Types.CHAR);
//      } else {
//        stmt.setString(41, askbillHeader.getPKDefDoc5());
//      }
//      if (askbillHeader.getPKDefDoc6() == null) {
//        stmt.setNull(42, Types.CHAR);
//      } else {
//        stmt.setString(42, askbillHeader.getPKDefDoc6());
//      }
//      if (askbillHeader.getPKDefDoc7() == null) {
//        stmt.setNull(43, Types.CHAR);
//      } else {
//        stmt.setString(43, askbillHeader.getPKDefDoc7());
//      }
//      if (askbillHeader.getPKDefDoc8() == null) {
//        stmt.setNull(44, Types.CHAR);
//      } else {
//        stmt.setString(44, askbillHeader.getPKDefDoc8());
//      }
//      if (askbillHeader.getPKDefDoc9() == null) {
//        stmt.setNull(45, Types.CHAR);
//      } else {
//        stmt.setString(45, askbillHeader.getPKDefDoc9());
//      }
//      if (askbillHeader.getPKDefDoc10() == null) {
//        stmt.setNull(46, Types.CHAR);
//      } else {
//        stmt.setString(46, askbillHeader.getPKDefDoc10());
//      }
//      if (askbillHeader.getPKDefDoc11() == null) {
//        stmt.setNull(47, Types.CHAR);
//      } else {
//        stmt.setString(47, askbillHeader.getPKDefDoc11());
//      }
//      if (askbillHeader.getPKDefDoc12() == null) {
//        stmt.setNull(48, Types.CHAR);
//      } else {
//        stmt.setString(48, askbillHeader.getPKDefDoc12());
//      }
//      if (askbillHeader.getPKDefDoc13() == null) {
//        stmt.setNull(49, Types.CHAR);
//      } else {
//        stmt.setString(49, askbillHeader.getPKDefDoc13());
//      }
//      if (askbillHeader.getPKDefDoc14() == null) {
//        stmt.setNull(50, Types.CHAR);
//      } else {
//        stmt.setString(50, askbillHeader.getPKDefDoc14());
//      }
//      if (askbillHeader.getPKDefDoc15() == null) {
//        stmt.setNull(51, Types.CHAR);
//      } else {
//        stmt.setString(51, askbillHeader.getPKDefDoc15());
//      }
//      if (askbillHeader.getPKDefDoc16() == null) {
//        stmt.setNull(52, Types.CHAR);
//      } else {
//        stmt.setString(52, askbillHeader.getPKDefDoc16());
//      }
//      if (askbillHeader.getPKDefDoc17() == null) {
//        stmt.setNull(53, Types.CHAR);
//      } else {
//        stmt.setString(53, askbillHeader.getPKDefDoc17());
//      }
//      if (askbillHeader.getPKDefDoc18() == null) {
//        stmt.setNull(54, Types.CHAR);
//      } else {
//        stmt.setString(54, askbillHeader.getPKDefDoc18());
//      }
//      if (askbillHeader.getPKDefDoc19() == null) {
//        stmt.setNull(55, Types.CHAR);
//      } else {
//        stmt.setString(55, askbillHeader.getPKDefDoc19());
//      }
//      if (askbillHeader.getPKDefDoc20() == null) {
//        stmt.setNull(56, Types.CHAR);
//      } else {
//        stmt.setString(56, askbillHeader.getPKDefDoc20());
//      }
//      // find record by PK fields:
//      // stmt.setString(58, askbillHeader.getPrimaryKey());
//      stmt.setString(57, askbillHeader.getPrimaryKey());
//
//      stmt.executeUpdate();
//    } finally {
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {
//      }
//    }
//
//    /** ********************************************************** */
//    // 保留的系统管理接口：
//    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateHeaderMy",
//        new Object[] { askbillHeader });
//    /** ********************************************************** */
//    return askbillHeader;
//  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVO[] updateItemArray(AskbillItemVO[] askbillItems)
      throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length <= 0)
      return askbillItems;
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    // 基本档案处理
    String sql0 = "select bd_invmandoc.pk_invmandoc,bd_invbasdoc.pk_invbasdoc ";
    sql0 += "from bd_invbasdoc, bd_invmandoc ";
    sql0 += "where bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc and bd_invmandoc.pk_invmandoc in ";
    //
    int iLen = askbillItems.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (askbillItems[i].getCmangid() == null)
        continue;
      listDisId.add(askbillItems[i].getCmangid());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return askbillItems;
    }
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || "()".equals(strSetId.trim())) {
        strSetId = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql0 += strSetId;
    // 更新
    // String sql1 =
    // "update po_askbill_b set caskbillid = ?, pk_corp = ?, cmangid = ?,
    // nasknum = ?, vpackmode = ?, dreceivedate = ?, vreveiveaddress = ?,
    // nnotaxprice = ?, nintaxprice = ?, bisorder = ?, nordernum = ?,
    // nordernotaxprice = ?, norderintaxprice = ?, nordernotaxmny = ?,
    // ntaxmny = ?, npricetaxmny = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3
    // = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?, vfree2 = ?, vfree3
    // = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, ntaxrate = ? ,deliverdays =
    // ?, crowno = ?, csourcebilltype = ?, csourcebillid = ?,
    // csourcebillrowid = ?, cupsourcebilltype = ?, cupsourcebillid = ?,
    // cupsourcebillrowid = ? where caskbill_bid = ? ";
    String sql1 = "update po_askbill_b set caskbillid = ?, pk_corp = ?, cmangid = ?, nasknum = ?, vpackmode = ?, dreceivedate = ?, vreveiveaddress = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, crowno = ?, csourcebilltype = ?, csourcebillid = ?, csourcebillrowid = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?, vdef7= ?, vdef8= ?, vdef9= ?, vdef10= ?, vdef11= ?, vdef12= ?, vdef13= ?, vdef14= ?, vdef15= ?, vdef16= ?, vdef17= ?, vdef18= ?, vdef19= ?, vdef20= ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ?,pk_upsrccorp = ?,vsourcebillcode = ?,vupsourcebillcode = ?  where caskbill_bid = ? ";

    AskbillItemVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {

      con = getConnection();

      // cbaseid 哈希表
      stmt = con.prepareStatement(sql0);
      rs = stmt.executeQuery();
      Hashtable hBaseId = new Hashtable();
      String cmangid = null, cbaseid = null;
      while (rs.next()) {
        cmangid = rs.getString(1);
        cbaseid = rs.getString(2);
        if (cmangid != null && cbaseid != null) {
          hBaseId.put(cmangid, cbaseid);
        }
      }
      rs.close();
      stmt.close();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // 存货基本档案主键
        cmangid = askbillItem.getCmangid();
        if (cmangid != null) {
          askbillItem.setCbaseid((String) hBaseId.get(cmangid));
        }
        // update non PK fields:
        if (askbillItem.getCaskbillid() == null) {
          stmt.setNull(1, Types.CHAR);
        } else {
          stmt.setString(1, askbillItem.getCaskbillid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getPk_corp());
        }
        if (askbillItem.getCmangid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getCmangid());
        }
        if (askbillItem.getNasknum() == null) {
          stmt.setNull(4, Types.INTEGER);
        } else {
          stmt.setBigDecimal(4, askbillItem.getNasknum()
              .toBigDecimal());
        }
        if (askbillItem.getVpackmode() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, askbillItem.getVpackmode());
        }
        if (askbillItem.getDreceivedate() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getDreceivedate().toString());
        }
        if (askbillItem.getVreveiveaddress() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getVreveiveaddress());
        }
        if (askbillItem.getVmemo() == null) {
          stmt.setNull(8, Types.CHAR);
        } else {
          stmt.setString(8, askbillItem.getVmemo());
        }
        if (askbillItem.getVdef1() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, askbillItem.getVdef1());
        }
        if (askbillItem.getVdef2() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getVdef2());
        }
        if (askbillItem.getVdef3() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt.setString(11, askbillItem.getVdef3());
        }
        if (askbillItem.getVdef4() == null) {
          stmt.setNull(12, Types.CHAR);
        } else {
          stmt.setString(12, askbillItem.getVdef4());
        }
        if (askbillItem.getVdef5() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, askbillItem.getVdef5());
        }
        if (askbillItem.getVdef6() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt.setString(14, askbillItem.getVdef6());
        }
        if (askbillItem.getVfree1() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVfree1());
        }
        if (askbillItem.getVfree2() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVfree2());
        }
        if (askbillItem.getVfree3() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVfree3());
        }
        if (askbillItem.getVfree4() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getVfree4());
        }
        if (askbillItem.getVfree5() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getVfree5());
        }
        if (askbillItem.getCbaseid() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getCbaseid());
        }
//        // 税率
//        if (askbillItem.getNtaxrate() == null) {
//          stmt.setNull(21, Types.INTEGER);
//        } else {
//          stmt.setBigDecimal(21, askbillItem.getNtaxrate()
//              .toBigDecimal());
//        }
        // crowno
        if (askbillItem.getCrowno() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getCrowno());
        }
        // 来源信息
        if (askbillItem.getCsourcebilltype() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getCsourcebilltype());
        }
        if (askbillItem.getCsourcebillid() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getCsourcebillid());
        }
        if (askbillItem.getCsourcebillrowid() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getCsourcebillrowid());
        }
        if (askbillItem.getCupsourcebilltype() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getCupsourcebilltype());
        }
        if (askbillItem.getCupsourcebillid() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getCupsourcebillid());
        }
        if (askbillItem.getCupsourcebillrowid() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getCupsourcebillrowid());
        }
        if (askbillItem.getVdef7() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getVdef7());
        }
        if (askbillItem.getVdef8() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVdef8());
        }
        if (askbillItem.getVdef9() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVdef9());
        }
        if (askbillItem.getVdef10() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVdef10());
        }
        if (askbillItem.getVdef11() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVdef11());
        }
        if (askbillItem.getVdef12() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVdef12());
        }
        if (askbillItem.getVdef13() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getVdef13());
        }
        if (askbillItem.getVdef14() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getVdef14());
        }
        if (askbillItem.getVdef15() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getVdef15());
        }
        if (askbillItem.getVdef16() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getVdef16());
        }
        if (askbillItem.getVdef17() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getVdef17());
        }
        if (askbillItem.getVdef18() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getVdef18());
        }
        if (askbillItem.getVdef19() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getVdef19());
        }
        if (askbillItem.getVdef20() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getVdef20());
        }
        if (askbillItem.getPk_defdoc1() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getPk_defdoc1());
        }
        if (askbillItem.getPk_defdoc2() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_defdoc2());
        }
        if (askbillItem.getPk_defdoc3() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_defdoc3());
        }
        if (askbillItem.getPk_defdoc4() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_defdoc4());
        }
        if (askbillItem.getPk_defdoc5() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_defdoc5());
        }
        if (askbillItem.getPk_defdoc6() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_defdoc6());
        }
        if (askbillItem.getPk_defdoc7() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_defdoc7());
        }
        if (askbillItem.getPk_defdoc8() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_defdoc8());
        }
        if (askbillItem.getPk_defdoc9() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_defdoc9());
        }
        if (askbillItem.getPk_defdoc10() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_defdoc10());
        }
        if (askbillItem.getPk_defdoc11() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_defdoc11());
        }
        if (askbillItem.getPk_defdoc12() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_defdoc12());
        }
        if (askbillItem.getPk_defdoc13() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, askbillItem.getPk_defdoc13());
        }
        if (askbillItem.getPk_defdoc14() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, askbillItem.getPk_defdoc14());
        }
        if (askbillItem.getPk_defdoc15() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, askbillItem.getPk_defdoc15());
        }
        if (askbillItem.getPk_defdoc16() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, askbillItem.getPk_defdoc16());
        }
        if (askbillItem.getPk_defdoc17() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, askbillItem.getPk_defdoc17());
        }
        if (askbillItem.getPk_defdoc18() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, askbillItem.getPk_defdoc18());
        }
        if (askbillItem.getPk_defdoc19() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, askbillItem.getPk_defdoc19());
        }
        if (askbillItem.getPk_defdoc20() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, askbillItem.getPk_defdoc20());
        }
        if (askbillItem.getUpsrccorp() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, askbillItem.getUpsrccorp());
        }
        if (askbillItem.getVsourcebillcode() == null) {
          stmt.setNull(63, Types.CHAR);
        } else {
          stmt.setString(63, askbillItem.getVsourcebillcode());
        }
        if (askbillItem.getVupsourcebillcode() == null) {
          stmt.setNull(64, Types.CHAR);
        } else {
          stmt.setString(64, askbillItem.getVupsourcebillcode());
        }
        // find record by PK fields:
        stmt.setString(65, askbillItem.getPrimaryKey());
        // stmt.setString(39, askbillItem.getPrimaryKey());
        //
        askbillItems[i] = askbillItem;
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    return askbillItems;
  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBVO[] updateItemArrayForPriceAudit(
      PriceauditBVO[] askbillItems) throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length <= 0)
      return askbillItems;
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    // 基本档案处理
    String sql0 = "select bd_invmandoc.pk_invmandoc,bd_invbasdoc.pk_invbasdoc ";
    sql0 += "from bd_invbasdoc, bd_invmandoc ";
    sql0 += "where bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc and bd_invmandoc.pk_invmandoc in ";
    //
    int iLen = askbillItems.length;
    ArrayList listDisId = new ArrayList();
    for (int i = 0; i < iLen; i++) {
      if (askbillItems[i].getCmangid() == null)
        continue;
      listDisId.add(askbillItems[i].getCmangid());
    }
    if (listDisId.size() <= 0) {
      SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
      return askbillItems;
    }
    String strSetId = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
      strSetId = dmoTmpTbl.insertTempTable(listDisId,
          nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
          nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
      if (strSetId == null || "()".equals(strSetId.trim())) {
        strSetId = " ('ErrorPk') ";
      }
    } catch (Exception e) {
      throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("SCMCOMMON", "UPPSCMCommon-000413")/*
                                   * @res
                                   * "调用临时表处理出现异常:"
                                   */
          + e.getMessage());
    }
    sql0 += strSetId;
    // 更新
    // String sql1 =
    // "update po_askbill_b set caskbillid = ?, pk_corp = ?, cmangid = ?,
    // nasknum = ?, vpackmode = ?, dreceivedate = ?, vreveiveaddress = ?,
    // nnotaxprice = ?, nintaxprice = ?, bisorder = ?, nordernum = ?,
    // nordernotaxprice = ?, norderintaxprice = ?, nordernotaxmny = ?,
    // ntaxmny = ?, npricetaxmny = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3
    // = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?, vfree2 = ?, vfree3
    // = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, ntaxrate = ? ,deliverdays =
    // ?, crowno = ?, csourcebilltype = ?, csourcebillid = ?,
    // csourcebillrowid = ?, cupsourcebilltype = ?, cupsourcebillid = ?,
    // cupsourcebillrowid = ? where caskbill_bid = ? ";
    String sql1 = "update po_priceaudit_b set cpriceauditid = ?, pk_corp = ?, cmangid = ?, nnum = ?,  darrvdate = ?,  vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, crowno = ?, csourcebilltype = ?, csourcebillid = ?, csourcebillrowid = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?, vdef7= ?, vdef8= ?, vdef9= ?, vdef10= ?, vdef11= ?, vdef12= ?, vdef13= ?, vdef14= ?, vdef15= ?, vdef16= ?, vdef17= ?, vdef18= ?, vdef19= ?, vdef20= ?,pk_defdoc1= ?,pk_defdoc2= ?,pk_defdoc3= ?,pk_defdoc4= ?,pk_defdoc5= ?,pk_defdoc6= ?,pk_defdoc7= ?,pk_defdoc8= ?,pk_defdoc9= ?,pk_defdoc10= ?,pk_defdoc11= ?,pk_defdoc12= ?,pk_defdoc13= ?,pk_defdoc14= ?,pk_defdoc15= ?,pk_defdoc16= ?,pk_defdoc17= ?,pk_defdoc18= ?,pk_defdoc19= ?,pk_defdoc20= ?,vsourcebillcode = ?,vupsourcebillcode = ?,pk_upsrccorp = ?  where cpriceaudit_bid = ? ";

    PriceauditBVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {

      con = getConnection();

      // cbaseid 哈希表
      stmt = con.prepareStatement(sql0);
      rs = stmt.executeQuery();
      Hashtable hBaseId = new Hashtable();
      String cmangid = null, cbaseid = null;
      while (rs.next()) {
        cmangid = rs.getString(1);
        cbaseid = rs.getString(2);
        if (cmangid != null && cbaseid != null) {
          hBaseId.put(cmangid, cbaseid);
        }
      }
      rs.close();
      stmt.close();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // 存货基本档案主键
        cmangid = askbillItem.getCmangid();
        if (cmangid != null) {
          askbillItem.setCbaseid((String) hBaseId.get(cmangid));
        }
        // update non PK fields:
        if (askbillItem.getCpriceauditid() == null) {
          stmt.setNull(1, Types.CHAR);
        } else {
          stmt.setString(1, askbillItem.getCpriceauditid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getPk_corp());
        }
        if (askbillItem.getCmangid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getCmangid());
        }
        if (askbillItem.getNnum() == null) {
          stmt.setNull(4, Types.INTEGER);
        } else {
          stmt.setBigDecimal(4, askbillItem.getNnum().toBigDecimal());
        }
        if (askbillItem.getDarrvdate() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, askbillItem.getDarrvdate().toString());
        }
        if (askbillItem.getVmemo() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getVmemo());
        }
        if (askbillItem.getVdef1() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getVdef1());
        }
        if (askbillItem.getVdef2() == null) {
          stmt.setNull(8, Types.CHAR);
        } else {
          stmt.setString(8, askbillItem.getVdef2());
        }
        if (askbillItem.getVdef3() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, askbillItem.getVdef3());
        }
        if (askbillItem.getVdef4() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getVdef4());
        }
        if (askbillItem.getVdef5() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt.setString(11, askbillItem.getVdef5());
        }
        if (askbillItem.getVdef6() == null) {
          stmt.setNull(12, Types.CHAR);
        } else {
          stmt.setString(12, askbillItem.getVdef6());
        }
        if (askbillItem.getVfree1() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, askbillItem.getVfree1());
        }
        if (askbillItem.getVfree2() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt.setString(14, askbillItem.getVfree2());
        }
        if (askbillItem.getVfree3() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVfree3());
        }
        if (askbillItem.getVfree4() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVfree4());
        }
        if (askbillItem.getVfree5() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVfree5());
        }
        if (askbillItem.getCbaseid() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getCbaseid());
        }
//        if (askbillItem.getNtaxrate() == null) {
//          stmt.setNull(19, Types.DOUBLE);
//        } else {
//          stmt.setBigDecimal(19, askbillItem.getNtaxrate()
//              .toBigDecimal());
//        }
        // crowno
        if (askbillItem.getCrowno() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getCrowno());
        }
        // 来源信息
        if (askbillItem.getCsourcebilltype() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getCsourcebilltype());
        }
        if (askbillItem.getCsourcebillid() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getCsourcebillid());
        }
        if (askbillItem.getCsourcebillrowid() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getCsourcebillrowid());
        }
        if (askbillItem.getCupsourcebilltype() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getCupsourcebilltype());
        }
        if (askbillItem.getCupsourcebillid() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getCupsourcebillid());
        }
        if (askbillItem.getCupsourcebillrowid() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getCupsourcebillrowid());
        }
        if (askbillItem.getVdef7() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getVdef7());
        }
        if (askbillItem.getVdef8() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getVdef8());
        }
        if (askbillItem.getVdef9() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getVdef9());
        }
        if (askbillItem.getVdef10() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVdef10());
        }
        if (askbillItem.getVdef11() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVdef11());
        }
        if (askbillItem.getVdef12() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVdef12());
        }
        if (askbillItem.getVdef13() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVdef13());
        }
        if (askbillItem.getVdef14() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVdef14());
        }
        if (askbillItem.getVdef15() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getVdef15());
        }
        if (askbillItem.getVdef16() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getVdef16());
        }
        if (askbillItem.getVdef17() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getVdef17());
        }
        if (askbillItem.getVdef18() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getVdef18());
        }
        if (askbillItem.getVdef19() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getVdef19());
        }
        if (askbillItem.getVdef20() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getVdef20());
        }
        if (askbillItem.getPk_defdoc1() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getPk_defdoc1());
        }
        if (askbillItem.getPk_defdoc2() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getPk_defdoc2());
        }
        if (askbillItem.getPk_defdoc3() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getPk_defdoc3());
        }
        if (askbillItem.getPk_defdoc4() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_defdoc4());
        }
        if (askbillItem.getPk_defdoc5() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_defdoc5());
        }
        if (askbillItem.getPk_defdoc6() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_defdoc6());
        }
        if (askbillItem.getPk_defdoc7() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_defdoc7());
        }
        if (askbillItem.getPk_defdoc8() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_defdoc8());
        }
        if (askbillItem.getPk_defdoc9() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_defdoc9());
        }
        if (askbillItem.getPk_defdoc10() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_defdoc10());
        }
        if (askbillItem.getPk_defdoc11() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_defdoc11());
        }
        if (askbillItem.getPk_defdoc12() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_defdoc12());
        }
        if (askbillItem.getPk_defdoc13() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_defdoc13());
        }
        if (askbillItem.getPk_defdoc14() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_defdoc14());
        }
        if (askbillItem.getPk_defdoc15() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, askbillItem.getPk_defdoc15());
        }
        if (askbillItem.getPk_defdoc16() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, askbillItem.getPk_defdoc16());
        }
        if (askbillItem.getPk_defdoc17() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, askbillItem.getPk_defdoc17());
        }
        if (askbillItem.getPk_defdoc18() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, askbillItem.getPk_defdoc18());
        }
        if (askbillItem.getPk_defdoc19() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, askbillItem.getPk_defdoc19());
        }
        if (askbillItem.getPk_defdoc20() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, askbillItem.getPk_defdoc20());
        }
        if (askbillItem.getVsourcebillcode() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, askbillItem.getVsourcebillcode());
        }
        if (askbillItem.getVupsourcebillcode() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, askbillItem.getVupsourcebillcode());
        }
        if (askbillItem.getPk_upsrccorp() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, askbillItem.getPk_upsrccorp());
        }

        // find record by PK fields:
        stmt.setString(63, askbillItem.getPrimaryKey());
        askbillItems[i] = askbillItem;
        // stmt.setString(39, askbillItem.getPrimaryKey());
        //
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    return askbillItems;
  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemBVO[] updateItemBArray(AskbillItemBVO[] askbillItems)
      throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length <= 0)
      return askbillItems;
    String sql1 = "update po_askbill_bb1 set caskbill_bb1id = ?,caskbill_b1id = ?,caskbill_bid = ?, caskbillid = ?, pk_corp = ?, cvendormangid = ?, cvendorbaseid = ?, nquoteprice = ?, nquotetaxprice = ?, dvaliddate = ?, dinvaliddate = ?, deliverdays = ?  ," +
        " ntaxrate= ?,vbdef1= ?, vbdef2= ?, vbdef3= ?, vbdef4= ?, vbdef5= ?, vbdef6= ?, vbdef7= ?, vbdef8= ?, vbdef9= ?, vbdef10= ?, vbdef11= ?, vbdef12= ?, vbdef13= ?, vbdef14= ?, vbdef15= ?, vbdef16= ?, vbdef17= ?, vbdef18= ?, vbdef19= ?, vbdef20= ?," +
        "pk_bdefdoc1= ?,pk_bdefdoc2= ?,pk_bdefdoc3= ?,pk_bdefdoc4= ?,pk_bdefdoc5= ?,pk_bdefdoc6= ?,pk_bdefdoc7= ?,pk_bdefdoc8= ?,pk_bdefdoc9= ?,pk_bdefdoc10= ?,pk_bdefdoc11= ?,pk_bdefdoc12= ?,pk_bdefdoc13= ?,pk_bdefdoc14= ?,pk_bdefdoc15= ?,pk_bdefdoc16= ?,pk_bdefdoc17= ?,pk_bdefdoc18= ?,pk_bdefdoc19= ?,pk_bdefdoc20= ? ,creceiptareaid=?,csendtypeid=?  where caskbill_bb1id = ? ";

    AskbillItemBVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {

      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        // update non PK fields:
        if (askbillItem.getCaskbill_bb1id() == null) {
          stmt.setNull(1, Types.CHAR);
        } else {
          stmt.setString(1, askbillItem.getCaskbill_bb1id());
        }
        if (askbillItem.getCaskbill_b1id() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillItem.getCaskbill_b1id());
        }
        if (askbillItem.getCaskbill_bid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getCaskbill_bid());
        }
        if (askbillItem.getCaskbillid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getCaskbillid());
        }
        if (askbillItem.getPk_corp() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, askbillItem.getPk_corp());
        }
        if (askbillItem.getCvendmangid() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, askbillItem.getCvendmangid());
        }
        if (askbillItem.getCvendbaseid() == null) {
          stmt.setNull(7, Types.CHAR);
        } else {
          stmt.setString(7, askbillItem.getCvendbaseid());
        }
        if (askbillItem.getNquoteprice() == null) {
          stmt.setNull(8, Types.INTEGER);
        } else {
          stmt.setBigDecimal(8, askbillItem.getNquoteprice()
              .toBigDecimal());
        }
        if (askbillItem.getNquotetaxprice() == null) {
          stmt.setNull(9, Types.INTEGER);
        } else {
          stmt.setBigDecimal(9, askbillItem.getNquotetaxprice()
              .toBigDecimal());
        }
        if (askbillItem.getDvaliddate() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt.setString(10, askbillItem.getDvaliddate().toString());
        }
        if (askbillItem.getDinvaliddate() == null) {
          stmt.setNull(11, Types.CHAR);
        } else {
          stmt
              .setString(11, askbillItem.getDinvaliddate()
                  .toString());
        }
        // 交货期
        if (askbillItem.getDeliverdays() == null) {
          stmt.setNull(12, Types.INTEGER);
        } else {
          stmt.setInt(12, askbillItem.getDeliverdays().intValue());
        }
        
        if (askbillItem.getNtaxrate() == null) {
          stmt.setNull(13, Types.INTEGER);
        } else {
          stmt.setBigDecimal(13, askbillItem.getNtaxrate()
              .toBigDecimal());
        }
        if (askbillItem.getVbdef1() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt.setString(14, askbillItem.getVbdef1());
        }
        if (askbillItem.getVbdef2() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, askbillItem.getVbdef2());
        }
        if (askbillItem.getVbdef3() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, askbillItem.getVbdef3());
        }
        if (askbillItem.getVbdef4() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, askbillItem.getVbdef4());
        }
        if (askbillItem.getVbdef5() == null) {
          stmt.setNull(18, Types.CHAR);
        } else {
          stmt.setString(18, askbillItem.getVbdef5());
        }
        if (askbillItem.getVbdef6() == null) {
          stmt.setNull(19, Types.CHAR);
        } else {
          stmt.setString(19, askbillItem.getVbdef6());
        }
        if (askbillItem.getVbdef7() == null) {
          stmt.setNull(20, Types.CHAR);
        } else {
          stmt.setString(20, askbillItem.getVbdef7());
        }
        if (askbillItem.getVbdef8() == null) {
          stmt.setNull(21, Types.CHAR);
        } else {
          stmt.setString(21, askbillItem.getVbdef8());
        }
        if (askbillItem.getVbdef9() == null) {
          stmt.setNull(22, Types.CHAR);
        } else {
          stmt.setString(22, askbillItem.getVbdef9());
        }
        if (askbillItem.getVbdef10() == null) {
          stmt.setNull(23, Types.CHAR);
        } else {
          stmt.setString(23, askbillItem.getVbdef10());
        }
        if (askbillItem.getVbdef11() == null) {
          stmt.setNull(24, Types.CHAR);
        } else {
          stmt.setString(24, askbillItem.getVbdef11());
        }
        if (askbillItem.getVbdef12() == null) {
          stmt.setNull(25, Types.CHAR);
        } else {
          stmt.setString(25, askbillItem.getVbdef12());
        }
        if (askbillItem.getVbdef13() == null) {
          stmt.setNull(26, Types.CHAR);
        } else {
          stmt.setString(26, askbillItem.getVbdef13());
        }
        if (askbillItem.getVbdef14() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, askbillItem.getVbdef14());
        }
        if (askbillItem.getVbdef15() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, askbillItem.getVbdef15());
        }
        if (askbillItem.getVbdef16() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, askbillItem.getVbdef16());
        }
        if (askbillItem.getVbdef17() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, askbillItem.getVbdef17());
        }
        if (askbillItem.getVbdef18() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, askbillItem.getVbdef18());
        }
        if (askbillItem.getVbdef19() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, askbillItem.getVbdef19());
        }
        if (askbillItem.getVbdef20() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, askbillItem.getVbdef20());
        }
        if (askbillItem.getPk_bdefdoc1() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, askbillItem.getPk_bdefdoc1());
        }
        if (askbillItem.getPk_bdefdoc2() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, askbillItem.getPk_bdefdoc2());
        }
        if (askbillItem.getPk_bdefdoc3() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, askbillItem.getPk_bdefdoc3());
        }
        if (askbillItem.getPk_bdefdoc4() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, askbillItem.getPk_bdefdoc4());
        }
        if (askbillItem.getPk_bdefdoc5() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, askbillItem.getPk_bdefdoc5());
        }
        if (askbillItem.getPk_bdefdoc6() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, askbillItem.getPk_bdefdoc6());
        }
        if (askbillItem.getPk_bdefdoc7() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, askbillItem.getPk_bdefdoc7());
        }
        if (askbillItem.getPk_bdefdoc8() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, askbillItem.getPk_bdefdoc8());
        }
        if (askbillItem.getPk_bdefdoc9() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, askbillItem.getPk_bdefdoc9());
        }
        if (askbillItem.getPk_bdefdoc10() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, askbillItem.getPk_bdefdoc10());
        }
        if (askbillItem.getPk_bdefdoc11() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, askbillItem.getPk_bdefdoc11());
        }
        if (askbillItem.getPk_bdefdoc12() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, askbillItem.getPk_bdefdoc12());
        }
        if (askbillItem.getPk_bdefdoc13() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, askbillItem.getPk_bdefdoc13());
        }
        if (askbillItem.getPk_bdefdoc14() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, askbillItem.getPk_bdefdoc14());
        }
        if (askbillItem.getPk_bdefdoc15() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, askbillItem.getPk_bdefdoc15());
        }
        if (askbillItem.getPk_bdefdoc16() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, askbillItem.getPk_bdefdoc16());
        }
        if (askbillItem.getPk_bdefdoc17() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, askbillItem.getPk_bdefdoc17());
        }
        if (askbillItem.getPk_bdefdoc18() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, askbillItem.getPk_bdefdoc18());
        }
        if (askbillItem.getPk_bdefdoc19() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, askbillItem.getPk_bdefdoc19());
        }
        if (askbillItem.getPk_bdefdoc20() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, askbillItem.getPk_bdefdoc20());
        }
        if (askbillItem.getCreceiptareaid() == null) {
            stmt.setNull(54, Types.CHAR);
          } else {
            stmt.setString(54, askbillItem.getCreceiptareaid());
          }
          if (askbillItem.getCsendtypeid() == null) {
            stmt.setNull(55, Types.CHAR);
          } else {
            stmt.setString(55, askbillItem.getCsendtypeid());
          }
        stmt.setString(56, askbillItem.getCaskbill_bb1id());
        askbillItems[i] = askbillItem;
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    return askbillItems;
  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemBVO[] updateItemBArrayForExcelTOBill(
      AskbillItemBVO[] askbillItems) throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length <= 0)
      return askbillItems;
    String sql1 = "update po_askbill_bb1 set nquoteprice = ?, nquotetaxprice = ?, dvaliddate = ?, dinvaliddate = ?, deliverdays = ?  ,ntaxrate = ? where caskbill_bb1id = ? ";

    AskbillItemBVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {

      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        if (askbillItem.getNquoteprice() == null) {
          stmt.setNull(1, Types.INTEGER);
        } else {
          stmt.setBigDecimal(1, askbillItem.getNquoteprice()
              .toBigDecimal());
        }
        if (askbillItem.getNquotetaxprice() == null) {
          stmt.setNull(2, Types.INTEGER);
        } else {
          stmt.setBigDecimal(2, askbillItem.getNquotetaxprice()
              .toBigDecimal());
        }
        if (askbillItem.getDvaliddate() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillItem.getDvaliddate().toString());
        }
        if (askbillItem.getDinvaliddate() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillItem.getDinvaliddate().toString());
        }
        // 交货期
        if (askbillItem.getDeliverdays() == null) {
          stmt.setNull(5, Types.INTEGER);
        } else {
          stmt.setInt(5, askbillItem.getDeliverdays().intValue());
        }
        
        if (askbillItem.getNtaxrate() == null) {
            stmt.setNull(6, Types.INTEGER);
          } else {
            stmt.setBigDecimal(6, askbillItem.getNtaxrate().toBigDecimal());
          }
        
        stmt.setString(7, askbillItem.getPrimaryKey());
        askbillItems[i] = askbillItem;
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    return askbillItems;
  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillItemVO[] updateItemArrayForExcelTOBill(
      AskbillItemVO[] askbillItems) throws java.sql.SQLException {

    if (askbillItems == null || askbillItems.length <= 0)
      return askbillItems;
    String sql1 = "update po_askbill_b set nasknum = ?, dreceivedate = ?  where caskbill_bid = ? ";

    AskbillItemVO askbillItem = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {

      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillItems.length; i++) {
        askbillItem = askbillItems[i];
        if (askbillItem == null)
          continue;
        if (askbillItem.getNasknum() == null) {
          stmt.setNull(1, Types.INTEGER);
        } else {
          stmt.setBigDecimal(1, askbillItem.getNasknum()
              .toBigDecimal());
        }
//        if (askbillItem.getNtaxrate() == null) {
//          stmt.setNull(2, Types.DOUBLE);
//        } else {
//          stmt.setBigDecimal(2, askbillItem.getNtaxrate()
//              .toBigDecimal());
//        }
        if (askbillItem.getDreceivedate() == null) {
          stmt.setNull(2, Types.DATE);
        } else {
          stmt.setString(2, askbillItem.getDreceivedate().toString());
        }

        stmt.setString(3, askbillItem.getPrimaryKey());
        askbillItems[i] = askbillItem;
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { askbillItems });
    /** ********************************************************** */
    return askbillItems;
  }

  /**
   * 更新表体（含处理存货管理档案ID-存货档案ID）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public PriceauditBb1VO[] updateItemBArrayForPriceAudit(
      PriceauditBb1VO[] priceauditBb1s) throws java.sql.SQLException {

    if (priceauditBb1s == null || priceauditBb1s.length <= 0)
      return priceauditBb1s;
    String sql1 = "update po_priceaudit_bb1 set cpriceaudit_bb1id = ?,cpriceaudit_bid = ?, cpriceauditid = ?, pk_corp = ?, cvendormangid = ?, cvendorbaseid = ?, nquoteprice = ?, nquotetaxprice = ?, dvaliddate = ?, dinvaliddate = ?, deliverdays = ?,fpricetype= ?,vquotebillcode= ?,cquotebillid= ?,cquotebill_bid= ?,cquotebill_bb1id= ?,border= ?,iprior= ?,nordernum= ?,norderprice= ?,nordertaxprice= ?,norgmny= ?,norgtaxmny= ?,norgsummny= ?,norderbill= ? ," +
        "ntaxrate= ?,vbdef1= ?, vbdef2= ?, vbdef3= ?, vbdef4= ?, vbdef5= ?, vbdef6= ?, vbdef7= ?, vbdef8= ?, vbdef9= ?, vbdef10= ?, vbdef11= ?, vbdef12= ?, vbdef13= ?, vbdef14= ?, vbdef15= ?, vbdef16= ?, vbdef17= ?, vbdef18= ?, vbdef19= ?, vbdef20= ?," +
        "pk_bdefdoc1= ?,pk_bdefdoc2= ?,pk_bdefdoc3= ?,pk_bdefdoc4= ?,pk_bdefdoc5= ?,pk_bdefdoc6= ?,pk_bdefdoc7= ?,pk_bdefdoc8= ?,pk_bdefdoc9= ?,pk_bdefdoc10= ?,pk_bdefdoc11= ?,pk_bdefdoc12= ?,pk_bdefdoc13= ?,pk_bdefdoc14= ?,pk_bdefdoc15= ?,pk_bdefdoc16= ?,pk_bdefdoc17= ?,pk_bdefdoc18= ?,pk_bdefdoc19= ?,pk_bdefdoc20= ? ,creceiptareaid = ? ,csendtypeid =? , ngenct = ? where cpriceaudit_bb1id = ? ";

    PriceauditBb1VO priceauditBb1 = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {

      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < priceauditBb1s.length; i++) {
        priceauditBb1 = priceauditBb1s[i];
        if (priceauditBb1 == null)
          continue;
        // update non PK fields:
        if (priceauditBb1.getPrimaryKey() == null) {
          stmt.setNull(1, Types.CHAR);
        } else {
          stmt.setString(1, priceauditBb1.getPrimaryKey());
        }
        if (priceauditBb1.getCpriceaudit_bid() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, priceauditBb1.getCpriceaudit_bid());
        }
        if (priceauditBb1.getCpriceauditid() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, priceauditBb1.getCpriceauditid());
        }
        if (priceauditBb1.getPk_corp() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, priceauditBb1.getPk_corp());
        }
        if (priceauditBb1.getCvendormangid() == null) {
          stmt.setNull(5, Types.CHAR);
        } else {
          stmt.setString(5, priceauditBb1.getCvendormangid());
        }
        if (priceauditBb1.getCvendorbaseid() == null) {
          stmt.setNull(6, Types.CHAR);
        } else {
          stmt.setString(6, priceauditBb1.getCvendorbaseid());
        }
        if (priceauditBb1.getNquoteprice() == null) {
          stmt.setNull(7, Types.INTEGER);
        } else {
          stmt.setBigDecimal(7, priceauditBb1.getNquoteprice()
              .toBigDecimal());
        }
        if (priceauditBb1.getNquotetaxprice() == null) {
          stmt.setNull(8, Types.INTEGER);
        } else {
          stmt.setBigDecimal(8, priceauditBb1.getNquotetaxprice()
              .toBigDecimal());
        }
        if (priceauditBb1.getDvaliddate() == null) {
          stmt.setNull(9, Types.CHAR);
        } else {
          stmt.setString(9, priceauditBb1.getDvaliddate().toString());
        }
        if (priceauditBb1.getDinvaliddate() == null) {
          stmt.setNull(10, Types.CHAR);
        } else {
          stmt
              .setString(10, priceauditBb1.getDinvaliddate()
                  .toString());
        }
        if (priceauditBb1.getDeliverdays() == null) {
          stmt.setNull(11, Types.INTEGER);
        } else {
          stmt.setInt(11, priceauditBb1.getDeliverdays().intValue());
        }
        if (priceauditBb1.getFpricetype() == null) {
          stmt.setNull(12, Types.INTEGER);
        } else {
          stmt.setInt(12, new Integer(priceauditBb1.getFpricetype())
              .intValue());
        }
        if (priceauditBb1.getVquotebillcode() == null) {
          stmt.setNull(13, Types.CHAR);
        } else {
          stmt.setString(13, priceauditBb1.getVquotebillcode()
              );
        }
        if (priceauditBb1.getCquotebillid() == null) {
          stmt.setNull(14, Types.CHAR);
        } else {
          stmt
              .setString(14, priceauditBb1.getCquotebillid()
                  );
        }
        if (priceauditBb1.getCquotebill_bid() == null) {
          stmt.setNull(15, Types.CHAR);
        } else {
          stmt.setString(15, priceauditBb1.getCquotebill_bid()
            );
        }
        if (priceauditBb1.getCquotebill_bb1id() == null) {
          stmt.setNull(16, Types.CHAR);
        } else {
          stmt.setString(16, priceauditBb1.getCquotebill_bb1id()
              );
        }
        if (priceauditBb1.getBorder() == null) {
          stmt.setNull(17, Types.CHAR);
        } else {
          stmt.setString(17, priceauditBb1.getBorder().toString());
        }
        if (priceauditBb1.getIprior() == null) {
          stmt.setNull(18, Types.INTEGER);
        } else {
          stmt.setString(18, priceauditBb1.getIprior());
        }
        if (priceauditBb1.getNordernum() == null) {
          stmt.setNull(19, Types.INTEGER);
        } else {
          stmt.setBigDecimal(19, priceauditBb1.getNordernum()
              .toBigDecimal());
        }
        if (priceauditBb1.getNorderprice() == null) {
          stmt.setNull(20, Types.INTEGER);
        } else {
          stmt.setBigDecimal(20, priceauditBb1.getNorderprice()
              .toBigDecimal());
        }
        if (priceauditBb1.getNordertaxprice() == null) {
          stmt.setNull(21, Types.INTEGER);
        } else {
          stmt.setBigDecimal(21, priceauditBb1.getNordertaxprice()
              .toBigDecimal());
        }
        if (priceauditBb1.getNorgmny() == null) {
          stmt.setNull(22, Types.INTEGER);
        } else {
          stmt.setBigDecimal(22, priceauditBb1.getNorgmny()
              .toBigDecimal());
        }
        if (priceauditBb1.getNorgtaxmny() == null) {
          stmt.setNull(23, Types.INTEGER);
        } else {
          stmt.setBigDecimal(23, priceauditBb1.getNorgtaxmny()
              .toBigDecimal());
        }
        if (priceauditBb1.getNorgsummny() == null) {
          stmt.setNull(24, Types.INTEGER);
        } else {
          stmt.setBigDecimal(24, priceauditBb1.getNorgsummny()
              .toBigDecimal());
        }
        if (priceauditBb1.getNorderbill() == null) {
          stmt.setNull(25, Types.INTEGER);
        } else {
          stmt.setInt(25, priceauditBb1.getNorderbill().intValue());
        }
        
        if (priceauditBb1.getNtaxrate() == null) {
          stmt.setNull(26, Types.INTEGER);
        } else {
          stmt.setBigDecimal(26, priceauditBb1.getNtaxrate()
              .toBigDecimal());
        }
        if (priceauditBb1.getVbdef1() == null) {
          stmt.setNull(27, Types.CHAR);
        } else {
          stmt.setString(27, priceauditBb1.getVbdef1());
        }
        if (priceauditBb1.getVbdef2() == null) {
          stmt.setNull(28, Types.CHAR);
        } else {
          stmt.setString(28, priceauditBb1.getVbdef2());
        }
        if (priceauditBb1.getVbdef3() == null) {
          stmt.setNull(29, Types.CHAR);
        } else {
          stmt.setString(29, priceauditBb1.getVbdef3());
        }
        if (priceauditBb1.getVbdef4() == null) {
          stmt.setNull(30, Types.CHAR);
        } else {
          stmt.setString(30, priceauditBb1.getVbdef4());
        }
        if (priceauditBb1.getVbdef5() == null) {
          stmt.setNull(31, Types.CHAR);
        } else {
          stmt.setString(31, priceauditBb1.getVbdef5());
        }
        if (priceauditBb1.getVbdef6() == null) {
          stmt.setNull(32, Types.CHAR);
        } else {
          stmt.setString(32, priceauditBb1.getVbdef6());
        }
        if (priceauditBb1.getVbdef7() == null) {
          stmt.setNull(33, Types.CHAR);
        } else {
          stmt.setString(33, priceauditBb1.getVbdef7());
        }
        if (priceauditBb1.getVbdef8() == null) {
          stmt.setNull(34, Types.CHAR);
        } else {
          stmt.setString(34, priceauditBb1.getVbdef8());
        }
        if (priceauditBb1.getVbdef9() == null) {
          stmt.setNull(35, Types.CHAR);
        } else {
          stmt.setString(35, priceauditBb1.getVbdef9());
        }
        if (priceauditBb1.getVbdef10() == null) {
          stmt.setNull(36, Types.CHAR);
        } else {
          stmt.setString(36, priceauditBb1.getVbdef10());
        }
        if (priceauditBb1.getVbdef11() == null) {
          stmt.setNull(37, Types.CHAR);
        } else {
          stmt.setString(37, priceauditBb1.getVbdef11());
        }
        if (priceauditBb1.getVbdef12() == null) {
          stmt.setNull(38, Types.CHAR);
        } else {
          stmt.setString(38, priceauditBb1.getVbdef12());
        }
        if (priceauditBb1.getVbdef13() == null) {
          stmt.setNull(39, Types.CHAR);
        } else {
          stmt.setString(39, priceauditBb1.getVbdef13());
        }
        if (priceauditBb1.getVbdef14() == null) {
          stmt.setNull(40, Types.CHAR);
        } else {
          stmt.setString(40, priceauditBb1.getVbdef14());
        }
        if (priceauditBb1.getVbdef15() == null) {
          stmt.setNull(41, Types.CHAR);
        } else {
          stmt.setString(41, priceauditBb1.getVbdef15());
        }
        if (priceauditBb1.getVbdef16() == null) {
          stmt.setNull(42, Types.CHAR);
        } else {
          stmt.setString(42, priceauditBb1.getVbdef16());
        }
        if (priceauditBb1.getVbdef17() == null) {
          stmt.setNull(43, Types.CHAR);
        } else {
          stmt.setString(43, priceauditBb1.getVbdef17());
        }
        if (priceauditBb1.getVbdef18() == null) {
          stmt.setNull(44, Types.CHAR);
        } else {
          stmt.setString(44, priceauditBb1.getVbdef18());
        }
        if (priceauditBb1.getVbdef19() == null) {
          stmt.setNull(45, Types.CHAR);
        } else {
          stmt.setString(45, priceauditBb1.getVbdef19());
        }
        if (priceauditBb1.getVbdef20() == null) {
          stmt.setNull(46, Types.CHAR);
        } else {
          stmt.setString(46, priceauditBb1.getVbdef20());
        }
        if (priceauditBb1.getPk_bdefdoc1() == null) {
          stmt.setNull(47, Types.CHAR);
        } else {
          stmt.setString(47, priceauditBb1.getPk_bdefdoc1());
        }
        if (priceauditBb1.getPk_bdefdoc2() == null) {
          stmt.setNull(48, Types.CHAR);
        } else {
          stmt.setString(48, priceauditBb1.getPk_bdefdoc2());
        }
        if (priceauditBb1.getPk_bdefdoc3() == null) {
          stmt.setNull(49, Types.CHAR);
        } else {
          stmt.setString(49, priceauditBb1.getPk_bdefdoc3());
        }
        if (priceauditBb1.getPk_bdefdoc4() == null) {
          stmt.setNull(50, Types.CHAR);
        } else {
          stmt.setString(50, priceauditBb1.getPk_bdefdoc4());
        }
        if (priceauditBb1.getPk_bdefdoc5() == null) {
          stmt.setNull(51, Types.CHAR);
        } else {
          stmt.setString(51, priceauditBb1.getPk_bdefdoc5());
        }
        if (priceauditBb1.getPk_bdefdoc6() == null) {
          stmt.setNull(52, Types.CHAR);
        } else {
          stmt.setString(52, priceauditBb1.getPk_bdefdoc6());
        }
        if (priceauditBb1.getPk_bdefdoc7() == null) {
          stmt.setNull(53, Types.CHAR);
        } else {
          stmt.setString(53, priceauditBb1.getPk_bdefdoc7());
        }
        if (priceauditBb1.getPk_bdefdoc8() == null) {
          stmt.setNull(54, Types.CHAR);
        } else {
          stmt.setString(54, priceauditBb1.getPk_bdefdoc8());
        }
        if (priceauditBb1.getPk_bdefdoc9() == null) {
          stmt.setNull(55, Types.CHAR);
        } else {
          stmt.setString(55, priceauditBb1.getPk_bdefdoc9());
        }
        if (priceauditBb1.getPk_bdefdoc10() == null) {
          stmt.setNull(56, Types.CHAR);
        } else {
          stmt.setString(56, priceauditBb1.getPk_bdefdoc10());
        }
        if (priceauditBb1.getPk_bdefdoc11() == null) {
          stmt.setNull(57, Types.CHAR);
        } else {
          stmt.setString(57, priceauditBb1.getPk_bdefdoc11());
        }
        if (priceauditBb1.getPk_bdefdoc12() == null) {
          stmt.setNull(58, Types.CHAR);
        } else {
          stmt.setString(58, priceauditBb1.getPk_bdefdoc12());
        }
        if (priceauditBb1.getPk_bdefdoc13() == null) {
          stmt.setNull(59, Types.CHAR);
        } else {
          stmt.setString(59, priceauditBb1.getPk_bdefdoc13());
        }
        if (priceauditBb1.getPk_bdefdoc14() == null) {
          stmt.setNull(60, Types.CHAR);
        } else {
          stmt.setString(60, priceauditBb1.getPk_bdefdoc14());
        }
        if (priceauditBb1.getPk_bdefdoc15() == null) {
          stmt.setNull(61, Types.CHAR);
        } else {
          stmt.setString(61, priceauditBb1.getPk_bdefdoc15());
        }
        if (priceauditBb1.getPk_bdefdoc16() == null) {
          stmt.setNull(62, Types.CHAR);
        } else {
          stmt.setString(62, priceauditBb1.getPk_bdefdoc16());
        }
        if (priceauditBb1.getPk_bdefdoc17() == null) {
          stmt.setNull(63, Types.CHAR);
        } else {
          stmt.setString(63, priceauditBb1.getPk_bdefdoc17());
        }
        if (priceauditBb1.getPk_bdefdoc18() == null) {
          stmt.setNull(64, Types.CHAR);
        } else {
          stmt.setString(64, priceauditBb1.getPk_bdefdoc18());
        }
        if (priceauditBb1.getPk_bdefdoc19() == null) {
          stmt.setNull(65, Types.CHAR);
        } else {
          stmt.setString(65, priceauditBb1.getPk_bdefdoc19());
        }
        if (priceauditBb1.getPk_bdefdoc20() == null) {
          stmt.setNull(66, Types.CHAR);
        } else {
          stmt.setString(66, priceauditBb1.getPk_bdefdoc20());
        }
        if (priceauditBb1.getCreceiptareaid() == null) {
            stmt.setNull(67, Types.CHAR);
          } else {
            stmt.setString(67, priceauditBb1.getCreceiptareaid());
          }
        if (priceauditBb1.getCsendtypeid() == null) {
          stmt.setNull(68, Types.CHAR);
        } else {
          stmt.setString(68, priceauditBb1.getCsendtypeid());
        }
        if (priceauditBb1.getNgenct() == null){
        	stmt.setNull(69, Types.INTEGER);
        } else {
        	stmt.setInt(69, priceauditBb1.getNgenct().intValue());
        }
        
        stmt.setString(70, priceauditBb1.getPrimaryKey());
        priceauditBb1s[i] = priceauditBb1;
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateItemArray",
        new Object[] { priceauditBb1s });
    /** ********************************************************** */
    return priceauditBb1s;
  }

  /**
   * <p>
   * 更新价格审批单
   * <p>
   * 注意：此处没有不做被删除的表体处理(在BO中完成)
   * <p>
   * 注意：表头的cvendorbaseid不在此处理(在BO中完成) 创建日期：(2001-09-24-15)
   * 
     * @return Vector  0---AskbillHeaderVO
   *                  1---AskbillItemVO[]
   *                  2---AskbillItemBVO[]
   *                  3---AskbillItemVendorVO[]
   *                  4---Vector vFroRwForNew--回写请购单生成价格审批单次数字段(新增或更新)
   *                  5---Vector vFroRwForDel--回写请购单生成价格审批单次数字段(删除)
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public Vector updateForAskBill(Vector resultV) throws SQLException {
    AskbillHeaderVO headerVO = (AskbillHeaderVO) resultV.get(0);
    String key = headerVO.getPrimaryKey();
    AskbillItemVO[] itemVOs = (AskbillItemVO[]) resultV.get(1);
    AskbillItemBVO[] itemBVOs = (AskbillItemBVO[]) resultV.get(2);
    AskbillItemVendorVO[] itemVendorVOs = (AskbillItemVendorVO[]) resultV.get(3);
    ArrayList bIDs = new ArrayList();
    ArrayList vendorIDs = new ArrayList();
    Vector vIns = new Vector();
    Vector vUpd = new Vector();
    Vector vDel = new Vector();
    Vector vDelFroBB = new Vector();
    Vector vDelFroB = new Vector();
    Vector vFroRwForNew = new Vector();
    Vector vFroRwForDel = new Vector();
    Hashtable itemVendorH = new Hashtable();

    // 返回供应商子表对应的表体行：未变化＋新增＋修改
    Vector vNewItem = new Vector();
    if (itemVendorVOs != null) {
      for (int i = 0; i < itemVendorVOs.length; i++) {
        if (itemVendorVOs[i].getCaskbill_b1id() != null
            && itemVendorVOs[i].getCaskbill_b1id()
                .trim().length() > 0) {
          bIDs.add(itemVendorVOs[i].getCaskbill_b1id());
        }
        switch (itemVendorVOs[i].getStatus()) {
        case VOStatus.NEW:
          vIns.addElement(itemVendorVOs[i]);
          break;
        case VOStatus.UPDATED:
          vUpd.addElement(itemVendorVOs[i]);
          break;
        case VOStatus.DELETED:
          vDel.addElement(itemVendorVOs[i]);
          break;
        case VOStatus.UNCHANGED:
          vNewItem.addElement(itemVendorVOs[i]);
          break;
        }
      }
    }
    AskbillItemVendorVO[] bvvos = null;
    String vmangid = null;
    String caskbill_b1id = null;
    Hashtable vendorH = new Hashtable();
    // 删除
    if (bIDs.size() > 0) {
      deleBodyVendorByItems(bIDs,key);
    } else {
      deleBodyVendorByItemsForAll(headerVO.getCaskbillid());
    }
    // 新增
    if (vIns.size() > 0) {
      bvvos = new AskbillItemVendorVO[vIns.size()];
      vIns.copyInto(bvvos);
      bvvos = insertItemVendorMyArray(bvvos);
      for (int i = 0; i < bvvos.length; i++) {// 保存新增的供应商ID,为子子表赋值使用
        caskbill_b1id = bvvos[i].getCaskbill_b1id();
        vmangid = bvvos[i].getCvendormangid();
        if (vmangid != null && vmangid.trim().length() > 0
            && !vendorH.containsKey(vmangid)) {
          vendorH.put(vmangid, caskbill_b1id);
        }
        vNewItem.addElement(bvvos[i]);
      }
    }
    // 删除
    if (vDel.size() > 0) {
      bvvos = new AskbillItemVendorVO[vDel.size()];
      vDel.copyInto(bvvos);
      deleBodyVendorByItems(bvvos);
    }

    // 处理返回
    if (vNewItem.size() > 0) {
      itemVendorVOs = new AskbillItemVendorVO[vNewItem.size()];
      vNewItem.copyInto(itemVendorVOs);
            //保证子表和子子表对应的正确性
      for (int i = 0; i < itemVendorVOs.length; i++) {
        String cvendormangid = itemVendorVOs[i].getCvendormangid();
        if (cvendormangid != null && cvendormangid.trim() != null
            && !itemVendorH.containsKey(cvendormangid)) {
          caskbill_b1id = itemVendorVOs[i].getCaskbill_b1id();
          itemVendorH.put(cvendormangid, caskbill_b1id);
        }
      }
    }

    

    vIns = new Vector();
    vUpd = new Vector();
    vDel = new Vector();

    // 返回子表对应的表体行：未变化＋新增＋修改
    vNewItem = new Vector();
    if (itemVOs != null) {
      for (int i = 0; i < itemVOs.length; i++) {
        switch (itemVOs[i].getStatus()) {
        case VOStatus.NEW:
          vIns.addElement(itemVOs[i]);
          if (itemVOs[i].getCupsourcebilltype() != null
              && itemVOs[i].getCupsourcebilltype().equals(IBillType.PRAYBILL)) {
            vFroRwForNew.addElement(itemVOs[i].getCupsourcebillrowid());
          }
          break;
        case VOStatus.UPDATED:
          vUpd.addElement(itemVOs[i]);
          vDelFroB.add(itemVOs[i].getPrimaryKey());
          break;
        case VOStatus.DELETED:
          vDel.addElement(itemVOs[i]);
          if (itemVOs[i].getCupsourcebilltype() != null
              && itemVOs[i].getCupsourcebilltype().equals(IBillType.PRAYBILL)) {
            vFroRwForDel.addElement(itemVOs[i].getCupsourcebillrowid());
          }
          break;
        case VOStatus.UNCHANGED:
          vNewItem.addElement(itemVOs[i]);
          vDelFroB.add(itemVOs[i].getPrimaryKey());
          break;
        }
      }
    }
    AskbillItemVO[] vos = null;
    // 新增
    if (vIns.size() > 0) {
      vos = new AskbillItemVO[vIns.size()];
      vIns.copyInto(vos);
      for (int i = 0; i < vos.length; i++) {
        vos[i].setCaskbillid(headerVO.getCaskbillid());
      }
      vos = insertItemMyArray(vos);
      for (int i = 0; i < vos.length; i++) {
        vNewItem.addElement(vos[i]);
        vDelFroB.add(vos[i].getPrimaryKey());
      }
    }
    // 修改
    if (vUpd.size() > 0) {
      vos = new AskbillItemVO[vUpd.size()];
      vUpd.copyInto(vos);
      vos = updateItemArray(vos);
      for (int i = 0; i < vos.length; i++) {
        vNewItem.addElement(vos[i]);
      }
    }
    // 删除
    if (vDel.size() > 0) {
      vos = new AskbillItemVO[vDel.size()];
      vDel.copyInto(vos);
      deleBodyByItems(vos);
    }
    // 根据子表主健删除
    if (vDelFroB.size() > 0) {
      deleBodyBByBodyItemsForAskBill(key, vDelFroB);
      deleBodyByBodyItemsForAskBill(key, vDelFroB);
    }
    // 处理返回
    Hashtable itemHForBody = new Hashtable();
    if (vNewItem.size() > 0) {
      itemVOs = new AskbillItemVO[vNewItem.size()];
      vNewItem.copyInto(itemVOs);
      for(int i = 0 ; i < itemVOs.length ; i ++){
        if(itemVOs[i].getSpecialNum() != null && itemVOs[i].getSpecialNum().trim().length() > 0
            && itemVOs[i].getCaskbill_bid() != null && itemVOs[i].getCaskbill_bid().trim().length() > 0){
          if(!itemHForBody.containsKey(itemVOs[i].getSpecialNum())){
            itemHForBody.put(itemVOs[i].getSpecialNum(), itemVOs[i].getCaskbill_bid());
          }
        }
      }
    }
    
    vIns = new Vector();
    vUpd = new Vector();
    vDel = new Vector();

    // 返回子子表对应的表体行：未变化＋新增＋修改
    vNewItem = new Vector();
    if (itemBVOs != null) {
      for (int i = 0; i < itemBVOs.length; i++) {
        if (itemBVOs[i].getCaskbill_bb1id() != null
            && itemBVOs[i].getCaskbill_bb1id().trim()
                .length() > 0) {
          vendorIDs.add(itemBVOs[i].getCaskbill_bb1id());
        }
        switch (itemBVOs[i].getStatus()) {
        case VOStatus.NEW:
          itemBVOs[i].setCaskbillid(key);
          itemBVOs[i].setCaskbill_bid((String)itemHForBody.get(itemBVOs[i].getSpecialNum()));
          vIns.addElement(itemBVOs[i]);
          break;
        case VOStatus.UPDATED:
          vUpd.addElement(itemBVOs[i]);
          vDelFroBB.add(itemBVOs[i].getPrimaryKey());
          break;
        case VOStatus.DELETED:
          vDel.addElement(itemBVOs[i]);
          break;
        case VOStatus.UNCHANGED:
          vNewItem.addElement(itemBVOs[i]);
          vDelFroBB.add(itemBVOs[i].getPrimaryKey());
          break;
        }
      }
    }
    AskbillItemBVO[] bvos = null;
    // 删除
    if (vendorIDs.size() > 0) {
      deleBodyBByItems(vendorIDs,key);
    } else {
      deleBodyBByItemsForAll(headerVO.getCaskbillid());
    }
    // 新增
    if (vIns.size() > 0) {
      bvos = new AskbillItemBVO[vIns.size()];
      vIns.copyInto(bvos);
      bvos = insertItemBMyArray(bvos);
      for (int i = 0; i < bvos.length; i++) {
        vmangid = bvos[i].getCvendmangid();
        if (vmangid != null && vmangid.trim().length() > 0) {// 插入新增的供应商子表对应的ID
          bvos[i].setCaskbill_b1id((String) vendorH.get(vmangid));
        }
        vDelFroBB.add(bvos[i].getPrimaryKey());
        if (vmangid != null
            && vmangid.trim().length() > 0 && itemVendorH.get(vmangid) != null && itemVendorH.get(vmangid).toString().trim().length() > 0) {
          caskbill_b1id = (String) itemVendorH.get(vmangid);
        }
        bvos[i].setCaskbill_b1id(caskbill_b1id);
        vNewItem.addElement(bvos[i]);
      }
    }
    // 修改
    if (vUpd.size() > 0) {
      bvos = new AskbillItemBVO[vUpd.size()];
      vUpd.copyInto(bvos);
      bvos = updateItemBArray(bvos);
      for (int i = 0; i < bvos.length; i++) {
        vNewItem.addElement(bvos[i]);
      }
    }
    // 删除
    if (vDel.size() > 0) {
      bvos = new AskbillItemBVO[vDel.size()];
      vDel.copyInto(bvos);
      deleBodyBByItems(bvos);
    }
        //根据子表主健删除
    if (vDelFroBB.size() > 0) {
      deleBodyBByBodyItemsForAskBillLinesDel(key, vDelFroBB);
    }
    // 处理返回
    if (vNewItem.size() > 0) {
      itemBVOs = new AskbillItemBVO[vNewItem.size()];
      vNewItem.copyInto(itemBVOs);
    }
    
        //回写请购单生成价格审批单次数字段
    // 新增或更新
//    ParaRewriteVO paraVo = new ParaRewriteVO();
//    PraybillImpl prayBO = new PraybillImpl();
//    String[] rowIds = null;
//    if (vFroRwForNew.size() > 0 ) {
//      rowIds = new String[vFroRwForNew.size()];
//      vFroRwForNew.copyInto(rowIds);
//      paraVo.setCBodyIdArray(rowIds);
//      try {
//        prayBO.updateNaccAskNum(paraVo, new Integer(IOperation.ADD).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
//    // 删除
//    if (vFroRwForDel.size() > 0 ) {
//      rowIds = new String[vFroRwForDel.size()];
//      vFroRwForDel.copyInto(rowIds);
//      paraVo.setCBodyIdArray(rowIds);
//      try {
//        prayBO.updateNaccAskNum(paraVo, new Integer(IOperation.DELETE).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
    // 供应商档案ID已经在BO中处理
    updateHeader(headerVO);
    Hashtable result = new Hashtable();
    // 主表
    result = queryTs(headerVO.getCaskbillid(), new Integer(IPosition.HEAD).toString());
    if (result != null && result.size() > 0) {
      headerVO.setTs((String)result.get(headerVO.getCaskbillid()));
    }
    //子表
    if (itemVOs != null && itemVOs.length > 0) {
      result = queryTs(headerVO.getCaskbillid(), new Integer(IPosition.BODY).toString());
      if (result != null && result.size() > 0 && itemVOs != null
          && itemVOs.length > 0) {
        for (int i = 0; i < itemVOs.length; i++) {
          itemVOs[i].setTs((String)result.get(itemVOs[i].getPrimaryKey()));
        }
      }
    }
        //子子表
    if (itemBVOs != null && itemBVOs.length > 0) {
      result = queryTs(headerVO.getCaskbillid(), new Integer(IPosition.BBODY).toString());
      if (result != null && result.size() > 0 && itemBVOs != null
          && itemBVOs.length > 0) {
        for (int i = 0; i < itemBVOs.length; i++) {
          itemBVOs[i].setTs((String)result.get(itemBVOs[i].getPrimaryKey()));
        }
      }
    }
    // 供应商子表
    if (itemVendorVOs != null && itemVendorVOs.length > 0) {
      result = queryTs(headerVO.getCaskbillid(), new Integer(IPosition.VBODY).toString());
      if (result != null && result.size() > 0 && itemVendorVOs != null
          && itemVendorVOs.length > 0) {
        for (int i = 0; i < itemVendorVOs.length; i++) {
          itemVendorVOs[i].setTs((String)result.get(itemVendorVOs[i].getPrimaryKey()));
        }
      }
    }
    if(itemBVOs != null && itemBVOs.length > 0){
      for(int i = 0; i < itemBVOs.length ; i ++){
        itemBVOs[i].setCaskbillid(headerVO.getCaskbillid());
        itemBVOs[i].setCaskbill_bid((String)itemHForBody.get(itemBVOs[i].getSpecialNum()));
      }
    }
    // 组织数据
    resultV = new Vector();
    resultV.add(headerVO);
    resultV.add(itemVOs);
    resultV.add(itemBVOs);
    resultV.add(itemVendorVOs);
    resultV.add(vFroRwForNew);
    resultV.add(vFroRwForDel);
    return resultV;
  }

  /**
   * <p>
   * 询报价单导入更新
   * <p>
   * 注意：此处没有不做被删除的表体处理(在BO中完成)
   * <p>
   * 注意：表头的cvendorbaseid不在此处理(在BO中完成) 创建日期：(2001-09-24-15)
   * 
   * @param vo
   *            nc.vo.pp.ask.AskbillVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public void updateMyForExcelToBill(Vector v) throws SQLException {
    Vector itemV = (Vector) v.get(0);
    Vector itemBV = (Vector) v.get(1);
    Vector headerV = (Vector) v.get(2);
    AskbillHeaderVO[] headerVOs = null;
    AskbillItemVO[] itemVOs = null;
    AskbillItemBVO[] itemBVOs = null;
//    boolean isCHGStatus = false;
    if (itemV != null && itemV.size() > 0) {
      itemVOs = new AskbillItemVO[itemV.size()];
      itemV.copyInto(itemVOs);
    }
    if (itemBV != null && itemBV.size() > 0) {
      itemBVOs = new AskbillItemBVO[itemBV.size()];
      itemBV.copyInto(itemBVOs);
//      for(int i = 0 ; i < itemBVOs.length ; i ++){
//        if((itemBVOs[i].getNquoteprice() != null && itemBVOs[i].getNquoteprice().toString().trim().length() > 0)
//          ||(itemBVOs[i].getNquotetaxprice() != null && itemBVOs[i].getNquotetaxprice().toString().trim().length() > 0) 
//          ){
//          isCHGStatus = true;
//          break;
//        }
//      }
    }
    if(headerV != null && headerV.size() > 0){
      headerVOs = new AskbillHeaderVO[headerV.size()];
      headerV.copyInto(headerVOs);
      updateAskbillHeaderForExcelTOBill(headerVOs);
    }
//        if(isCHGStatus){
//          updateAskbillStatusForExcelTOBill(itemVOs[0].getCaskbillid());
//        }
    updateItemArrayForExcelTOBill(itemVOs);
    updateItemBArrayForExcelTOBill(itemBVOs);
  }
  /**
   * 更新表头（询报价单导入表头更新）
   * 
   * 创建日期：(2001-6-7)
   * 
   * @param askbillItem
   *            nc.vo.pp.ask.AskbillItemVO
   * @exception java.sql.SQLException
   *                异常说明。
   */
  public AskbillHeaderVO[] updateAskbillHeaderForExcelTOBill(AskbillHeaderVO[] askbillHeaders)
      throws java.sql.SQLException {

    if (askbillHeaders == null || askbillHeaders.length <= 0)
      return askbillHeaders;
    String sql1 = "update po_askbill set ibillstatus = ?,dquotedate = ?,cquotepsn = ? where  caskbillid = ? ";

    AskbillHeaderVO askbillHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {

      con = getConnection();
      // 更新
      stmt = prepareStatement(con, sql1);
      //
      for (int i = 0; i < askbillHeaders.length; i++) {
        askbillHeader = askbillHeaders[i];
        if (askbillHeader == null)
          continue;
        // update non PK fields:
        if (askbillHeader.getIbillstatus() == null) {
          stmt.setNull(1, Types.CHAR);
        } else {
          stmt.setString(1, askbillHeader.getIbillstatus());
        }
        if (askbillHeader.getDquotedate() == null) {
          stmt.setNull(2, Types.CHAR);
        } else {
          stmt.setString(2, askbillHeader.getDquotedate().toString());
        }
        if (askbillHeader.getCquotepsn() == null) {
          stmt.setNull(3, Types.CHAR);
        } else {
          stmt.setString(3, askbillHeader.getCquotepsn());
        }
        if (askbillHeader.getCaskbillid() == null) {
          stmt.setNull(4, Types.CHAR);
        } else {
          stmt.setString(4, askbillHeader.getCaskbillid());
        }
        
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    return askbillHeaders;
  }
  /**
   * 报价：手工维护状态 发出->报价 创建日期：(2001-10-25 13:10:40)
   * 
   * @param caskbillid
   *            java.lang.String
   * @param newStatus
   *            int
   */
  public void updateAskbillStatusForExcelTOBill(String caskbillid)
      throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid });
    /** ********************************************************** */
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "update po_askbill set ibillstatus = 3 where caskbillid = ? ";
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, caskbillid);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }

    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "updateAskbillStatusMy",
        new Object[] { caskbillid });
    /** ********************************************************** */
  }
  /**
   * <p>
   * 更新母子表并返回(存货档案ID已经同步更新)
   * <p>
   * 注意：此处没有不做被删除的表体处理(在BO中完成)
   * <p>
   * 注意：表头的cvendorbaseid不在此处理(在BO中完成) 创建日期：(2001-09-24-15)
   * 
   * @param vo
   *            nc.vo.pp.ask.AskbillVO
   * @exception java.sql.SQLException
   *                异常说明。
   * @throws BusinessException
   */
  public Vector updateForPriceAuditBill(Vector v) throws SQLException,
      BusinessException {
    PriceauditHeaderVO headerVO = (PriceauditHeaderVO) v.get(0);
    String key = headerVO.getPrimaryKey();
    PriceauditBVO[] itemVOs = (PriceauditBVO[]) v.get(1);
    PriceauditBb1VO[] itemBVOs = (PriceauditBb1VO[]) v.get(2);
    Vector vIns = new Vector();
    Vector vUpd = new Vector();
    Vector vDel = new Vector();
    Vector vDelFroB = new Vector();
    Vector vDelFroBB = new Vector();
    Vector vFroRw = new Vector();
    PriceauditBVO[] itemVOsForRw = null;

    // 返回存货子表对应的表体行：未变化＋新增＋修改
    Vector vNewItem = new Vector();
    String sperialNumDel = null;
    if (itemVOs != null) {
      // 删除子子表用的保存子表ID
      for (int i = 0; i < itemVOs.length; i++) {
        sperialNumDel = itemVOs[i].getSpecialnum();
        // if(sperialNumDel != null && sperialNumDel.equals("DELETED")){
        // vDelFroB.add(itemVOs[i].getPrimaryKey());
        // }
        switch (itemVOs[i].getStatus()) {
        case VOStatus.NEW:
          vIns.addElement(itemVOs[i]);
          if (itemVOs[i].getCupsourcebilltype() != null
              && (itemVOs[i].getCupsourcebilltype().equals(IBillType.PRAYBILL) || itemVOs[i]
                  .getCupsourcebilltype().equals(IBillType.ASKBILL))) {
            vFroRw.addElement(itemVOs[i]);
          }
          break;
        case VOStatus.UPDATED:
          vUpd.addElement(itemVOs[i]);
          vDelFroB.add(itemVOs[i].getPrimaryKey());
          if (itemVOs[i].getCupsourcebilltype() != null
              && (itemVOs[i].getCupsourcebilltype().equals(IBillType.PRAYBILL) || itemVOs[i]
                  .getCupsourcebilltype().equals(IBillType.ASKBILL))) {
            vFroRw.addElement(itemVOs[i]);

          }
          break;
        case VOStatus.DELETED:
          if (sperialNumDel != null
              && !("DELETED".equals(sperialNumDel))) {
            vDel.addElement(itemVOs[i]);
            if (itemVOs[i].getCupsourcebilltype() != null
                && (itemVOs[i].getCupsourcebilltype().equals(
                    IBillType.PRAYBILL) || itemVOs[i]
                    .getCupsourcebilltype().equals(IBillType.ASKBILL))) {
              vFroRw.addElement(itemVOs[i]);
            }
          }
          break;
        case VOStatus.UNCHANGED:
          vNewItem.addElement(itemVOs[i]);
          vDelFroB.add(itemVOs[i].getPrimaryKey());
          break;
        }
      }
    }
    if (vFroRw.size() > 0) {
      itemVOsForRw = new PriceauditBVO[vFroRw.size()];
      vFroRw.copyInto(itemVOsForRw);
    }
    PriceauditBVO[] bvvos = null;
    String specialNum = null;
    String caskbill_b1id = null;
    Hashtable vendorH = new Hashtable();
    // 新增
    if (vIns.size() > 0) {
      bvvos = new PriceauditBVO[vIns.size()];
      vIns.copyInto(bvvos);
      for (int i = 0; i < bvvos.length; i++) {
        bvvos[i].setCpriceauditid(key);
      }
      bvvos = insertItemMyArrayForPriceAudit(bvvos);
      for (int i = 0; i < bvvos.length; i++) {// 保存新增的存货子表ID,为子子表赋值使用
        caskbill_b1id = bvvos[i].getPrimaryKey();
        specialNum = bvvos[i].getSpecialnum();
        if (specialNum != null && specialNum.trim().length() > 0
            && !vendorH.containsKey(specialNum)) {
          vendorH.put(specialNum, caskbill_b1id);
        }
        vDelFroB.add(bvvos[i].getPrimaryKey());
        vNewItem.addElement(bvvos[i]);
      }
    }
    // 修改
    if (vUpd.size() > 0) {
      bvvos = new PriceauditBVO[vUpd.size()];
      vUpd.copyInto(bvvos);
      bvvos = updateItemArrayForPriceAudit(bvvos);
      for (int i = 0; i < bvvos.length; i++) {
        vNewItem.addElement(bvvos[i]);
      }
    }
    // 删除
    if (vDel.size() > 0) {
      bvvos = new PriceauditBVO[vDel.size()];
      vDel.copyInto(bvvos);
      deleBodyByItemsForPriceAudit(bvvos);
    }
    // 根据子表主健删除
    if (vDelFroB.size() > 0) {
      deleBodyBByBodyItemsForPriceAudit(key, vDelFroB);
      deleBodyByBodyItemsForPriceAudit(key, vDelFroB);
    }
    // 处理返回
    if (vNewItem.size() > 0) {
      itemVOs = new PriceauditBVO[vNewItem.size()];
      vNewItem.copyInto(itemVOs);
      Vector vCmangid  =new Vector();
      for (int i = 0; i < itemVOs.length; i++) {
        if(itemVOs[i].getCmangid() != null ){
          vCmangid.add(itemVOs[i].getCmangid());
        }
      }
      String sperialNum = null;
      String cmangid = null;
      String caskbill_bid = null;
      Hashtable hTmp2 = new Hashtable();
      Hashtable hTmp1 = new Hashtable();
      //2009/12/7 tianft (zhounl) 注释原因：采购最新价编辑存货后已经处理，没必要再次查询
//      for (int i = 0; i < itemVOs.length; i++) {
//          // 查询采购最新价
//        cmangid = itemVOs[i].getCmangid();
//        
//        hTmp1 = getPriceLastForThanVOHash(vCmangid, itemVOs[i]
//            .getPk_corp());
//        if (!hTmp2.containsKey(cmangid)) {
//          if (hTmp1 != null && hTmp1.size() > 0) {
//            if (hTmp1.get(cmangid) != null
//                && hTmp1.get(cmangid).toString().trim()
//                    .length() > 0) {
//              itemVOs[i].setLastprice((UFDouble) hTmp1
//                  .get(cmangid));
//              hTmp2.put(cmangid, (UFDouble) hTmp1
//                  .get(cmangid));
//            }
//          }
//        } else {
//          itemVOs[i].setLastprice((UFDouble) hTmp2
//              .get(cmangid));
//        }
//    }
    }
    Hashtable itemH = new Hashtable();
    Hashtable itemHForBody = new Hashtable();
    Hashtable itemHForUpSource = new Hashtable();
    String sperialNum = null;
    String caskbill_bid = null;
    String cupsourcebilltype = null;

    for (int i = 0; i < itemVOs.length; i++) {
      sperialNum = itemVOs[i].getSpecialnum();
      caskbill_bid = itemVOs[i].getPrimaryKey();
      cupsourcebilltype = itemVOs[i].getCupsourcebilltype();
      if (sperialNum != null && sperialNum.trim().length() > 0
          && caskbill_bid != null && caskbill_bid.trim().length() > 0
          && !itemH.containsKey(sperialNum)) {
        itemH.put(sperialNum, caskbill_bid);
      }
      if (sperialNum != null && sperialNum.trim().length() > 0
          && caskbill_bid != null && caskbill_bid.trim().length() > 0
          && !itemHForBody.containsKey(caskbill_bid)) {
        itemHForBody.put(caskbill_bid, sperialNum);
      }
      if (cupsourcebilltype != null
          && cupsourcebilltype.trim().length() > 0
          && sperialNum != null && sperialNum.trim().length() > 0
          && !itemHForUpSource.containsKey(sperialNum)) {
        itemHForUpSource.put(sperialNum, cupsourcebilltype);
      }

    }

    vIns = new Vector();
    vUpd = new Vector();
    vDel = new Vector();
    // 返回子子表对应的表体行：未变化＋新增＋修改
    vNewItem = new Vector();
    if (itemBVOs != null) {
      for (int i = 0; i < itemBVOs.length; i++) {
        switch (itemBVOs[i].getStatus()) {
        case VOStatus.NEW:
          vIns.addElement(itemBVOs[i]);
          break;
        case VOStatus.UPDATED:
          vUpd.addElement(itemBVOs[i]);
          vDelFroBB.add(itemBVOs[i].getPrimaryKey());
          break;
        case VOStatus.DELETED:
          vDel.addElement(itemBVOs[i]);
          break;
        case VOStatus.UNCHANGED:
          vNewItem.addElement(itemBVOs[i]);
          vDelFroBB.add(itemBVOs[i].getPrimaryKey());
          break;
        }
      }
    }
    PriceauditBb1VO[] bvos = null;
    // 新增
    if (vIns.size() > 0) {
      bvos = new PriceauditBb1VO[vIns.size()];
      vIns.copyInto(bvos);
      String pk = null;
      String cquotebillid = null;
      // 处理所有外键
      for (int i = 0; i < bvos.length; i++) {
        bvos[i].setCpriceauditid(key);
        sperialNum = bvos[i].getSpecialnum();
        caskbill_bid = (String) itemH.get(sperialNum);
        bvos[i].setCpriceaudit_bid(caskbill_bid);
        pk = bvos[i].getPrimaryKey();
        cquotebillid = bvos[i].getCquotebillid();

        if (PuPubVO.getString_TrimZeroLenAsNull(pk)==null
            && sperialNum != null
            && sperialNum.trim().length() > 0) {// 报价来源处理
          if (cquotebillid == null
              || (cquotebillid != null && cquotebillid
                  .trim().length() == 0)) {
            bvos[i].setCquotebillid(key);
            bvos[i].setCquotebill_bid(caskbill_bid);
            bvos[i].setCquotebill_bb1id("self");
            bvos[i]
                .setVquotebillcode(headerVO
                    .getVpriceauditcode());
          }
        }
      }
      bvos = insertItemBMyArrayForPriceAudit(bvos);

      // 处理所有外键
      for (int i = 0; i < bvos.length; i++) {
        vDelFroBB.add(bvos[i].getPrimaryKey());
        vNewItem.addElement(bvos[i]);
      }
    }
    // 修改
    if (vUpd.size() > 0) {
      bvos = new PriceauditBb1VO[vUpd.size()];
      vUpd.copyInto(bvos);
      bvos = updateItemBArrayForPriceAudit(bvos);
      for (int i = 0; i < bvos.length; i++) {
        vNewItem.addElement(bvos[i]);
      }
    }
    // 删除
    if (vDel.size() > 0) {
      bvos = new PriceauditBb1VO[vDel.size()];
      vDel.copyInto(bvos);
      deleBodyBByItemsForPriceAudit(bvos);
    }
    // 根据子子表主健删除--删行的处理需要
    if (vDelFroBB.size() > 0) {
      deleBodyBByBodyItemsForPriceAuditLinesDel(key, vDelFroBB);
    }
    // 处理返回
    if (vNewItem.size() > 0) {
      itemBVOs = new PriceauditBb1VO[vNewItem.size()];
      vNewItem.copyInto(itemBVOs);
    }
    // 排序：无订货信息的按照价格排序，有订货价格的按照订货标志的表体行，按照采购优先级顺序显示
    itemBVOs = queryItemBForPriceAuditByHid(new String[] { key });
    // 赋特殊号的值
    if (itemBVOs != null && itemBVOs.length > 0) {
      for (int i = 0; i < itemBVOs.length; i++) {
        itemBVOs[i].setSpecialnum((String) itemHForBody.get(itemBVOs[i]
            .getCpriceaudit_bid()));
      }
    }
    // 供应商档案ID已经在BO中处理
    updateHeaderForPriceAudit(headerVO);
    Hashtable resultH = new Hashtable();
    // 主表
    resultH = queryTsForPriceAudit(key, new Integer(IPosition.HEAD).toString());
//    if (hts != null && hts.length > 0) {
      headerVO.setTs((String)resultH.get(key));
//    }
    // 子表
      resultH = queryTsForPriceAudit(key, new Integer(IPosition.BODY).toString());
//    if (bts != null && bts.length > 0 && itemVOs != null
//        && itemVOs.length > 0) {
      for (int i = 0; i < itemVOs.length; i++) {
        itemVOs[i].setTs((String)resultH.get(itemVOs[i].getPrimaryKey()));
      }
//    }
//    if (itemBVOs != null && itemBVOs.length > 0) {
      // 子子表
      resultH = queryTsForPriceAudit(key, new Integer(IPosition.BBODY).toString());
//      if (bb1ts != null && bb1ts.length > 0 && itemBVOs != null
//          && itemBVOs.length > 0) {
        for (int i = 0; i < itemBVOs.length; i++) {
          itemBVOs[i].setTs((String)resultH.get(itemBVOs[i].getPrimaryKey()));
        }
//      }
//    }

    // 回写生成价格审批单次数
//    ParaRewriteVO paraVo = new ParaRewriteVO();
//    Vector rowIdsTempForInsOrUpd = new Vector();
//    Vector headIdsTempForInsOrUpd = new Vector();
//    Vector numTempForInsOrUpd = new Vector();
//    Vector rowIdsTempForDel = new Vector();
//    Vector headIdsTempForDel = new Vector();
//    Vector numTempForDel = new Vector();
//    String[] rowIds = null;
//    String[] headIds = null;
//    UFDouble[] num = null;
//    Vector upPk = new Vector();
//    Hashtable itemTempHForInsOrUpd = new Hashtable();
//    Hashtable itemTempHForDel = new Hashtable();
//    if (itemVOsForRw != null && itemVOsForRw.length > 0) {
//      for (int j = 0; j < itemVOsForRw.length; j++) {
//        if (itemVOsForRw[j].getCupsourcebilltype() != null
//            && itemVOsForRw[j].getCupsourcebilltype().equals(IBillType.PRAYBILL)) {// 请购转价格审批单
//          if (itemVOsForRw[j].getStatus() == VOStatus.NEW
//              || itemVOsForRw[j].getStatus() == VOStatus.UPDATED) {
//            rowIdsTempForInsOrUpd.add(itemVOsForRw[j]
//                .getCupsourcebillrowid());
//            headIdsTempForInsOrUpd.add(itemVOsForRw[j]
//                .getCupsourcebillid());
//            numTempForInsOrUpd.add(itemVOsForRw[j].getNnum());
//          } else if (itemVOsForRw[j].getStatus() == VOStatus.DELETED) {
//            rowIdsTempForDel.add(itemVOsForRw[j]
//                .getCupsourcebillrowid());
//            headIdsTempForDel.add(itemVOsForRw[j]
//                .getCupsourcebillid());
//            numTempForDel.add(itemVOsForRw[j].getNnum());
//          }
//        } else if (itemVOsForRw[j].getCupsourcebilltype() != null
//            && itemVOsForRw[j].getCupsourcebilltype().equals(IBillType.ASKBILL)) {// 询报价转价格审批单
//          upPk.add(itemVOsForRw[j].getCupsourcebillrowid());
//          if (itemVOsForRw[j].getStatus() == VOStatus.NEW
//              || itemVOsForRw[j].getStatus() == VOStatus.UPDATED) {
//            itemTempHForInsOrUpd.put(itemVOsForRw[j]
//                .getCupsourcebillrowid(), itemVOsForRw[j]
//                .getNnum());
//          } else if (itemVOsForRw[j].getStatus() == VOStatus.DELETED) {
//            itemTempHForDel.put(itemVOsForRw[j]
//                .getCupsourcebillrowid(), itemVOsForRw[j]
//                .getNnum());
//          }
//        }
//      }
//    }
//    // 询报价转价格审批单对来源于请购单的行也需要回写
//    if (upPk.size() > 0) {
//      Hashtable result = null;
//      StringBuffer sqlCondition = new StringBuffer();
//      AskbillItemVO itemT = null;
//      for (int i = 0; i < upPk.size(); i++) {
//        if (i < upPk.size() - 1) {
//          sqlCondition.append("'" + upPk.get(i) + "',");
//        } else {
//          sqlCondition.append("'" + upPk.get(i) + "'");
//        }
//      }
//
//      AskbillDMO dmo;
//      try {
//        dmo = new AskbillDMO();
//        // 查询询报价单来源于请购单的行
//        result = dmo.querySourceInfoForRwPray(sqlCondition.toString());
//      } catch (SystemException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      } catch (NamingException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//      if (result.size() > 0) {
//        for (int i = 0; i < upPk.size(); i++) {
//          itemT = (AskbillItemVO) result.get(upPk.get(i));
//          rowIdsTempForInsOrUpd.add(itemT.getCupsourcebillrowid());
//          headIdsTempForInsOrUpd.add(itemT.getCupsourcebillid());
//          if (itemTempHForInsOrUpd.get(upPk.get(i)) != null) {
//            numTempForInsOrUpd.add(itemTempHForInsOrUpd.get(upPk
//                .get(i)));
//          } else {
//            numTempForDel.add(itemTempHForDel.get(upPk.get(i)));
//          }
//        }
//      }
//    }
//    // 回写请购单生成价格审批单次数字段
//    // 新增或更新
//    PraybillImpl prayBO = new PraybillImpl();
//    if (rowIdsTempForInsOrUpd.size() > 0 && numTempForInsOrUpd.size() > 0
//        && rowIdsTempForInsOrUpd.size() == numTempForInsOrUpd.size()) {
//      rowIds = new String[rowIdsTempForInsOrUpd.size()];
//      rowIdsTempForInsOrUpd.copyInto(rowIds);
//      headIds = new String[headIdsTempForInsOrUpd.size()];
//      headIdsTempForInsOrUpd.copyInto(headIds);
//      num = new UFDouble[numTempForInsOrUpd.size()];
//      numTempForInsOrUpd.copyInto(num);
//      paraVo.setCBodyIdArray(rowIds);
//      paraVo.setCHeadIdArray(headIds);
//      paraVo.setDNumArray(num);
//      try {
//        prayBO.updateNaccPriceAuditNum(paraVo, new Integer(IOperation.ADD).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
//    // 删除
//    if (rowIdsTempForDel.size() > 0 && numTempForDel.size() > 0
//        && rowIdsTempForDel.size() == numTempForDel.size()) {
//      rowIds = new String[rowIdsTempForDel.size()];
//      rowIdsTempForDel.copyInto(rowIds);
//      headIds = new String[headIdsTempForDel.size()];
//      headIdsTempForDel.copyInto(headIds);
//      num = new UFDouble[numTempForDel.size()];
//      numTempForDel.copyInto(num);
//      paraVo.setCBodyIdArray(rowIds);
//      paraVo.setCHeadIdArray(headIds);
//      paraVo.setDNumArray(num);
//      try {
//        prayBO.updateNaccPriceAuditNum(paraVo, new Integer(IOperation.DELETE).toString());
//      } catch (BusinessException e) {
//        // TODO 自动生成 catch 块
//        SCMEnv.out(e.getMessage());
//      }
//    }
    // 组织数据
    v = new Vector();
    v.add(headerVO);
    v.add(itemVOs);
    v.add(itemBVOs);
    v.add(itemVOsForRw);
    return v;
  }

  /**
   * @功能：返回询价单最新报价 返回最新报价 符合条件记录中 ts 时间截最大对应报价
   * @作者：周晓 创建日期：(2001-11-17 17:32:46)
   * @param pk_invmandoc
   *            java.lang.String
   * @param pk_curtype
   *            java.lang.String
   * @param isIntax
   *            boolean
   * @param strSQL
   *            java.lang.String
   * @return newprice UFDouble
   */
  public UFDouble getPriceLastQuoted(String pk_invmandoc, String pk_curtype,
      UFBoolean isIntax, String strSQL) throws SQLException {
    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastQuoted",
        new Object[] { pk_invmandoc, pk_curtype, isIntax, strSQL });
    /** ********************************************************** */
    UFDouble newprice = null;

    String priceColName = "po_askbill_bb1.nquoteprice";
    if (isIntax.booleanValue())
      priceColName = "po_askbill_bb1.nquotetaxprice";

    String allStrSQL = strSQL;
    allStrSQL += "and po_askbill_b.cmangid = '" + pk_invmandoc + "' ";
    allStrSQL += "and po_askbill.ccurrencytypeid = '" + pk_curtype + "' ";

    StringBuffer sql = new StringBuffer(" ");
    sql.append("select top 1 ");
    sql.append(priceColName + " ");
    sql.append(allStrSQL + " ");
    sql.append("and po_askbill_b.ts = ");
    sql.append("(select max(po_askbill_b.ts) ");
    sql.append(allStrSQL);
    sql.append(")");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      rs = stmt.executeQuery();
      if (rs.next()) {
        BigDecimal bprice = rs.getBigDecimal(1);
        if (bprice == null)
          return null;
        newprice = new UFDouble(bprice);
      }
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {

      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.pp.ask.AskbillDMO", "getPriceLastQuoted",
        new Object[] { pk_invmandoc, pk_curtype, isIntax, strSQL });
    /** ********************************************************** */
    return newprice;
  }

  /**
   * 作者：汪维敏 功能： 参数： 返回： 例外： 日期：(2004-5-13 13:25:19) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.util.ArrayList
   */
  public ArrayList queryForAudit(String key) throws SQLException {
    ArrayList arr = new ArrayList();
    String sql = "SELECT dauditdate,cauditpsnid,ibillstatus,ts,taudittime FROM po_priceaudit WHERE cpriceauditid ='";
    sql += key + "'";

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();

      while (rs.next()) {
        String sDate = rs.getString("dauditdate");
        UFDate dDate = sDate == null ? null : new UFDate(sDate);
        String sAuditPsn = rs.getString("cauditpsnid");
        Integer iBillStatus = new Integer(rs.getInt("ibillstatus"));
        String ts = rs.getString("ts");
        String taudittime = rs.getString("taudittime");

        arr.add(dDate);
        arr.add(sAuditPsn);
        arr.add(iBillStatus);
        arr.add(ts);
        arr.add(taudittime);
      }

      // 关闭结果集,即时释放资源
      rs.close();
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }
    }
    return arr;
  }

  /**
   * 此处插入方法说明。 功能描述:取消审核 输入参数:VO 返回值:无 异常处理:无
   */
  public void setAuditTime(PriceauditMergeVO[] vos)
      throws java.sql.SQLException, BusinessException {
    String serverTime = new UFDateTime(new Date()).toString();
    String pk = ((PriceauditHeaderVO) vos[0].getParentVO()).getPrimaryKey();
    String strSql = "update po_priceaudit set  taudittime = ? where cpriceauditid ='"
        + pk + "'";
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      for (int i = 0; i < vos.length; i++) {
        stmt.setString(1, serverTime);
        executeUpdate(stmt);
      }
      executeBatch(stmt);

    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }
  }
  /**
   * 
   * 送审之后，设置状态为审批中状态
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param vos
   * @throws java.sql.SQLException
   * @throws BusinessException
   * <p>
   * @author donggq
   * @time 2008-8-20 下午04:03:23
   */
  public Hashtable setCheckGoing(PriceauditMergeVO[] vos)
  	throws java.sql.SQLException, BusinessException {
	  String[] pks = new String[vos.length];
	  int i = 0;
	  for (PriceauditMergeVO vo : vos) {
		pks[i] = vo.getParentVO().getPrimaryKey().toString();
		((PriceauditHeaderVO)vo.getParentVO()).setIbillstatus(new Integer(2));
	  }
	  String pk = ((PriceauditHeaderVO) vos[0].getParentVO()).getPrimaryKey();
	  String strSql = "update po_priceaudit set  ibillstatus = 2 where dr = 0 "+ SqlMethod.formInSQL("cpriceauditid", pks);
	  Connection con = null;
	  PreparedStatement stmt = null;
	  try {
		  con = getConnection();
		  stmt = prepareStatement(con, strSql);
		  executeUpdate(stmt);
		  executeBatch(stmt);
	  } finally {
		  try {
			  if (stmt != null) {
				  stmt.close();
			  }
		  } catch (Exception e) {//
		  }
		  try {
			  if (con != null) {
				  con.close();
			  }
		  } catch (Exception e) {//
		  }
	  }
	  Hashtable htIDTS = queryTsForPriceAudit(pk, "1");
	  return htIDTS;
  }

//  /**
//   * 此处插入方法说明。 功能描述:取消审核 输入参数:VO 返回值:无 异常处理:无
//   */
//  public void antiCheck(PriceauditMergeVO[] vos)
//      throws java.sql.SQLException, BusinessException {
//    if ((vos != null && vos.length == 0) || vos == null) {
//      return;
//    }
//    PriceauditHeaderVO headVOT = (PriceauditHeaderVO) vos[0].getParentVO();
//    CheckIsGenOrder("'" + headVOT.getPrimaryKey() + "'");
//    if (checkIsPriceSorce(headVOT.getPrimaryKey())) {
//      PubDMO
//          .throwBusinessException(
//              "nc.bs.piInvocieImpl.delete(InvoiceVO)",
//              new BusinessException(nc.bs.ml.NCLangResOnserver
//                  .getInstance().getStrByID("4004070105",
//                      "UPP4004070105-000072") /*
//                                   * @res
//                                   * "此单据已经作为其它价格审批单的报价来源，无法弃审!"
//                                   */));
//    }
//    String strSql = "update po_priceaudit set ibillstatus = 0, cauditpsnid = ?, dauditdate = ?, taudittime = ? where cpriceauditid in(";
//
//    Connection con = null;
//    PreparedStatement stmt = null;
//
//    // boolean bLock = false;
//    // String sKeys[] = null;
//
//    try {
//      con = getConnection();
//      PriceauditHeaderVO headVO = new PriceauditHeaderVO();
//      StringBuffer condition = new StringBuffer();
//      for (int i = 0; i < vos.length; i++) {
//        headVO = (PriceauditHeaderVO) vos[i].getParentVO();
//        if (i < vos.length - 1) {
//          condition.append("'" + headVO.getPrimaryKey() + "',");
//        } else {
//          condition.append("'" + headVO.getPrimaryKey() + "'");
//        }
//      }
//      strSql += condition.toString() + ")";
//
//      stmt = prepareStatement(con, strSql);
//      // praybillids = new String[v.size()];
//      // v.copyInto(praybillids);
//      // Vector vTemp = queryBillStatus(praybillids);
//
//      // UFDouble nAccumulateNum = (UFDouble) vTemp.elementAt(2);
//      // UFBoolean isGenAskBill = (UFBoolean) vTemp.elementAt(3);
//      // if ((nAccumulateNum != null && nAccumulateNum.doubleValue() >
//      // 0.0)
//      // || (isGenAskBill != null && isGenAskBill.booleanValue() == true))
//      // throw new BusinessException(nc.bs.ml.NCLangResOnserver
//      // .getInstance().getStrByID("40040101",
//      // "UPP40040101-000016")/* @res "请购单已经被引用，不能弃审！" */);
//      for (int i = 0; i < vos.length; i++) {
//        headVO = (PriceauditHeaderVO) vos[i].getParentVO();
//        stmt.setString(1, null);
//        stmt.setString(2, null);
//        stmt.setString(3, null);
//        executeUpdate(stmt);
//      }
//      executeBatch(stmt);
//
//    } finally {
//      try {
//        if (stmt != null) {
//          stmt.close();
//        }
//      } catch (Exception e) {//
//      }
//      try {
//        if (con != null) {
//          con.close();
//        }
//      } catch (Exception e) {//
//      }
//
//    }
//
//  }

  /**
   * 功能描述: 查询表头\体的所有ts
   */
  public void ReWriteAskBillStatus(Vector v, int operateType)
      throws SQLException {
    if (v == null || (v != null && v.size() == 0)) {
      return;
    }
    StringBuffer condition = new StringBuffer();
    String strSql = null;
    Connection con = null;
    PreparedStatement stmt = null;
    for (int i = 0; i < v.size(); i++) {
      if (i < v.size() - 1) {
        condition.append("'" + v.get(i) + "',");
      } else {
        condition.append("'" + v.get(i) + "'");
      }
    }
    if (operateType == 0) {// 价格审批单生成
      strSql = "update po_askbill set ibillstatus = 4 where caskbillid in("
          + condition.toString() + ")";
    } else if (operateType == 1) {// 价格审批单删除
      strSql = "update po_askbill set ibillstatus = 3 where caskbillid in("
          + condition.toString() + ")";
    }
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      stmt.executeUpdate();
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }

  }

  /**
   * 功能描述: 价格审批单是否已作为其他价格审批单的价格来源
   */
  public boolean checkIsPriceSorce(String cpriceauditid) throws SQLException {
    Connection con = null;
    PreparedStatement stmt = null;
    String strSql = "select 1 from po_priceaudit_bb1  where  cquotebillid = '"
        + cpriceauditid
        + "' and cpriceauditid <> '"
        + cpriceauditid
        + "' and po_priceaudit_bb1.dr = 0 ";
    boolean isPriceSorce = false;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      rs = stmt.executeQuery();
      if (rs.next()) {
        isPriceSorce = true;
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }
    return isPriceSorce;
  }

  /**
   * 功能描述: 价格审批单是否已作为其他价格审批单的价格来源
   * @throws NamingException 
   * @throws SystemException 
   * @throws SQLException 
   * 
   * @throws Exception
   */
  public Hashtable checkIsEffectPrice(String[] cbaseids, String[] pk_corps,
      String data) throws BusinessException, SystemException, NamingException, SQLException {
    Connection con = null;
    PreparedStatement stmt = null;
    String strSql = "select distinct po_priceaudit_b.cbaseid,po_priceaudit_bb1.norderprice from po_priceaudit inner join po_priceaudit_b on po_priceaudit.cpriceauditid = po_priceaudit_b.cpriceauditid  left outer join po_priceaudit_bb1 on   po_priceaudit_b.cpriceauditid = po_priceaudit_bb1.cpriceauditid and po_priceaudit_b.cpriceaudit_bid = po_priceaudit_bb1.cpriceaudit_bid ";
    String cbaseid = null;
    Hashtable result = new Hashtable();
    String condition = " where  (po_priceaudit_bb1.dvaliddate <='"
        + data
        + "' or po_priceaudit_bb1.dvaliddate is null) and (po_priceaudit_bb1.dinvaliddate >='"
        + data + "' or po_priceaudit_bb1.dinvaliddate is null )";
    ResultSet rs = null;
    try {
    // 设定条件--inv
    if (cbaseids.length > 0) {
      ArrayList listDisId = new ArrayList();
      for (int i = 0; i < cbaseids.length; i++) {
        if (cbaseids[i] == null)
          continue;
        listDisId.add(cbaseids[i]);
      }
      if (listDisId.size() > 0) {
        String strIdSet = null;
        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU95,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);

        condition += " and po_priceaudit.dr =0 and po_priceaudit_b.dr =0 and po_priceaudit_bb1.dr =0 and  po_priceaudit_bb1.border = 'Y' and po_priceaudit.ibillstatus = 3 and po_priceaudit_bb1.nquoteprice is not null and  po_priceaudit_bb1.nquotetaxprice is not null and po_priceaudit_b.cbaseid in "
            + strIdSet;
      }
    }
    // 设定条件--vendor
    if (pk_corps.length > 0) {
      ArrayList listDisId = new ArrayList();
      for (int i = 0; i < pk_corps.length; i++) {
        if (pk_corps[i] == null)
          continue;
        listDisId.add(pk_corps[i]);
      }
      if (listDisId.size() > 0) {
        String strIdSet = null;
        nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
        strIdSet = dmoTmpTbl.insertTempTable(listDisId,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU96,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);

        condition += " and po_priceaudit_bb1.pk_corp in " + strIdSet;
      }
    }
    strSql += condition;
    
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      rs = stmt.executeQuery();
      while (rs.next()) {
        cbaseid = rs.getString(1);
        if (!result.containsKey(cbaseid)) {
          if (rs.getString(2) != null
              && rs.getString(2).trim().length() > 0) {
            result.put(cbaseid, new UFBoolean(true));
          } else {
            result.put(cbaseid, new UFBoolean(false));
          }
        }
      }
    }
    catch (Exception e) {//
      PubDMO.throwBusinessException(
          "nc.bs.piInvocieImpl.delete(InvoiceVO)", e);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }
    return result;
  }

  /**
   * 功能描述: 询报价单是否作为价格审批单的价格来源
   */
  public boolean checkIsCanEffectPrice(String condition) throws SQLException {
    Connection con = null;
    PreparedStatement stmt = null;
    String strSql = "select 1 from po_priceaudit_bb1 where po_priceaudit_bb1. cquotebillid in "
        + condition + " and po_priceaudit_bb1.dr = 0 ";
    boolean isEffectPrice = false;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      rs = stmt.executeQuery();
      if (rs.next()) {
        isEffectPrice = true;
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }
    return isEffectPrice;
  }

  /**
   * 功能描述: 价格审批单删除时需要判断询报价单是否作为价格审批单的价格来源,如果未作为，则可以回写询报价单
   */
  public Vector checkIsCanEffectPriceForRWAskBill(String condition)
      throws SQLException {
    Connection con = null;
    PreparedStatement stmt = null;
    Vector result = new Vector();
    String strSql = "select distinct cquotebillid from po_priceaudit_bb1 where cquotebillid in("
        + condition + ") and dr = 0 ";
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      rs = stmt.executeQuery();
      String cquotebillid = null;
      while (rs.next()) {
        cquotebillid = rs.getString("cquotebillid");
        if (cquotebillid != null && cquotebillid.trim().length() > 0) {
          result.add(cquotebillid);
        }
      }
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
      }

    }
    return result;
  }

  /**
   * 功能描述:回写生成订单次数
   * 
   * @throws BusinessException
   */
  public void reWriteGenOrderNums(String condition, int operateType)
      throws SQLException, BusinessException {
    Connection con = null;
    PreparedStatement stmt = null;
    String strSql = null;
    if (operateType == 0) {// 生成订单
      strSql = "update po_priceaudit_bb1 set norderbill = ISNULL(norderbill,0)+1 where cpriceaudit_bb1id in ("
          + condition + ")";
    } else if (operateType == 1) {// 删除订单
      strSql = "update po_priceaudit_bb1 set norderbill = ISNULL(norderbill,0)-1 where cpriceaudit_bb1id in ("
          + condition + ")";
    }
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSql);
      stmt.executeUpdate();
    } catch (Exception e) {//
      PubDMO.throwBusinessException(e);
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }

    }
  }

  /**
   * 功能描述:回写生成订单次数前并发控制
   * 
   * @throws BusinessException
   */
  public void reWriteGenOrderNumsCheck(String condition, int operateType)
      throws SQLException, BusinessException {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String strSqlForIbillStatus = null;
    if (operateType == 0) {// 生成订单
      // strSql = "select ISNULL(norderbill,0) as norderbill from
      // po_priceaudit_bb1 inner join po_priceaudit on
      // po_priceaudit_bb1.cpriceauditid = po_priceaudit.cpriceauditid
      // where po_priceaudit_bb1.cpriceaudit_bb1id in ("+condition+") and
      // po_priceaudit.norderbill > 0 ";
      strSqlForIbillStatus = "select ISNULL(po_priceaudit_bb1.norderbill,0) as norderbill from po_priceaudit_bb1 inner join  po_priceaudit on po_priceaudit_bb1.cpriceauditid =  po_priceaudit.cpriceauditid where po_priceaudit_bb1.cpriceaudit_bb1id in ("
          + condition + ") and po_priceaudit.ibillstatus <> 3 ";
    }
    // else if(operateType == 1){//删除订单
    // strSql = "select ISNULL(norderbill,0) as norderbill from
    // po_priceaudit_bb1 inner join po_priceaudit on
    // po_priceaudit_bb1.cpriceauditid = po_priceaudit.cpriceauditid where
    // cpriceaudit_bb1id in ("+condition+") and po_priceaudit.norderbill >
    // 1";
    // }
    try {
      con = getConnection();
      stmt = prepareStatement(con, strSqlForIbillStatus);
      if (operateType == 0) {
        rs = stmt.executeQuery();
        if (rs.next()) {
          throw new BusinessException(nc.bs.ml.NCLangResOnserver
              .getInstance().getStrByID("4004070105",
                  "UPP4004070105-000054")/*
                               * @res*
                               * "非审批通过状态的价格审批单不能生成订单！"
                               */);
        }
        rs.close();
        // conForIbillStatus = getConnection();
        // stmtForIbillStatus = prepareStatement(conForIbillStatus,
        // strSqlForIbillStatus);
        // if(rs.next()){
        // throw new
        // BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004070105",
        // "UPP4004070105-000055")/* @res* "非审批通过状态的价格审批单不能生成订单！"*/);
        // }
      }
      // else{
      // rs = stmt.executeQuery();
      // if(rs.next()){
      // throw new
      // BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004pub",
      // "UPP4004pub-000064")/* @res* "请购单业务参数未设置,不能生成请购单！"*/);
      // }
      //      
      // }
    } catch (Exception e) {//
      PubDMO.throwBusinessException(e);
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
    }
  }

  /**
   * 功能描述:已生成订单的价格审批单不能弃审
   * 
   * @throws BusinessException
   */
  public void CheckIsGenOrder(String condition) throws SQLException,
      BusinessException {
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String strSqlForIbillStatus = null;

    strSqlForIbillStatus = "select ISNULL(po_priceaudit_bb1.norderbill,0) as norderbill from po_priceaudit_bb1 inner join  po_priceaudit on po_priceaudit_bb1.cpriceauditid =  po_priceaudit.cpriceauditid where po_priceaudit_bb1.cpriceauditid in ("
        + condition
        + ") and po_priceaudit_bb1.norderbill > 0 and po_priceaudit.dr = 0 and po_priceaudit_bb1.dr = 0 ";

    try {
      con = getConnection();
      stmt = prepareStatement(con, strSqlForIbillStatus);
      rs = stmt.executeQuery();
      if (rs.next()) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4004070105",
                "UPP4004070105-000055")/*
                             * @res*
                             * "已生成订单的价格审批单不能弃审！"
                             */);
      }
      rs.close();
    } catch (Exception e) {//
      PubDMO.throwBusinessException(e);
    } finally {
      try {
        if (rs != null) {
          rs.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {//
        PubDMO.throwBusinessException(e);
      }

    }
  }

  /**
   * 作者：周晓 功能：根据一组订单ID、行ID查询、子子表ID，查询订单ID数组、行ID数组、子子表ID数组相对应的时间戮 参数： String
   * sBilltype 单据类型：{20,21,22,23,25,27,29,2A,45,47,4T,61,62,41,49,30,2#}
   * String[] saBillid 单据表头ID数组 String[] saBill_bid 单据子表ID数组 String[]
   * saBill_bbid 单据子子表ID数组 注意： 参数 sBillType 不能为空
   * 三参数间不必限制必是一张单据的ID及行ID、子子表ID，三个参数不可同时为空 返回：Object[] [0] 与 saBillid
   * 一一对应的时间戮，不为空，元素可能为空，元素为空表示该ID不存在 [1] 与 saBill_bid
   * 一一对应的时间戮，不为空，元素可能为空，元素为空表示该ID不存在 [2] 与 saBill_bbid
   * 一一对应的时间戮，不为空，元素可能为空，元素为空表示该ID不存在 例外：BusinessException SQLException
   * 日期：(2002-4-9 9:27:51) 修改日期：2002-04-10 修改日期，修改人，修改原因，注释标志： 2002-04-10 czp
   * 加入子子表ID参数 未加注释 2002-04-10 wyf 完善参数正确性检查，校正原有代码的一些笔误 2002-04-10 czp
   * 加入单据类开2#--根据销售结算表 2002-05-13 czp 应用临时表方案拼接ID条件，进行效率优化
   * 
   */
  public Object[] queryHBTsArrayByHBIDArray(String sBillType,
      String[] saBillid, String[] saBill_bid, String[] saBill_bbid)
      throws BusinessException {

    /** ********************************************************** */
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.pu.pub.PubDMO", "queryHTsArrayByIDArray",
        new Object[] { saBillid, saBill_bid, saBill_bbid });
    /** ********************************************************** */

    nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
    timer.start();

    // 检查参数合理性
    if ((sBillType == null || "".equals(sBillType.trim()))
        || ((saBillid == null || saBillid.length <= 0)
            && (saBill_bid == null || saBill_bid.length <= 0) && (saBill_bbid == null || saBill_bbid.length <= 0))) {
      SCMEnv
          .out("nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])传入参数不正确：表头ID数组、表体ID数组及子子表ID数组同时为空");
      return null;
    }
    // wyf add 2002-04-10 begin
    int iLen = 0;
    // saBillid元素检验
    if (saBillid != null) {
      iLen = saBillid.length;
      for (int i = 0; i < iLen; i++) {
        if (saBillid[i] == null || saBillid[i].trim().length() < 1) {
          SCMEnv
              .out("nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])传入参数不正确！");
          return null;
        }
      }
    }
    // saBill_bid元素检验
    if (saBill_bid != null) {
      iLen = saBill_bid.length;
      for (int i = 0; i < iLen; i++) {
        if (saBill_bid[i] == null || saBill_bid[i].trim().length() < 1) {
          SCMEnv
              .out("nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])传入参数不正确！");
          return null;
        }
      }
    }
    // saBill_bbid元素检验
    if (saBill_bbid != null) {
      iLen = saBill_bbid.length;
      for (int i = 0; i < iLen; i++) {
        if (saBill_bbid[i] == null
            || saBill_bbid[i].trim().length() < 1) {
          SCMEnv
              .out("nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])传入参数不正确！");
          return null;
        }
      }
    }
    // wyf add 2002-04-10 end

    // 根据单据类型构造需查询的字段、表
    String strTableNameHead = null;
    String strTableNameBody = null;
    String strTableNameBBody = null;
    String strFieldNameHeadId = null;
    String strFieldNameBodyId = null;
    String strFieldNameBBodyId = null;
    if (sBillType.equals(IBillType.ASKBILL)) {
      strTableNameHead = "po_askbill";
      strTableNameBody = "po_askbill_b";
      strTableNameBBody = "po_askbill_bb1";
      strFieldNameHeadId = "caskbillid";
      strFieldNameBodyId = "caskbill_bid";
      strFieldNameBBodyId = "caskbill_bb1id";
    } else if (sBillType.equals(IBillType.PRICEAUDITBILL)) {
      strTableNameHead = "po_priceaudit";
      strTableNameBody = "po_priceaudit_b";
      strTableNameBBody = "po_priceaudit_bb1";
      strFieldNameHeadId = "cpriceauditid";
      strFieldNameBodyId = "cpriceaudit_bid";
      strFieldNameBBodyId = "cpriceaudit_bb1id";
    } else if (sBillType.equals(IBillType.PRAYBILL)) {
      strTableNameHead = "po_praybill";
      strTableNameBody = "po_praybill_b";
      strFieldNameHeadId = "cpraybillid";
      strFieldNameBodyId = "cpraybill_bid";
    }

    // ==========构造SQL并执行

    Hashtable hashHTs = new Hashtable();
    Hashtable hashBTs = new Hashtable();
    Hashtable hashBbTs = new Hashtable();
    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    try {
      nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();

      // 查询表头TS

      // 头主键:除去重复
      Vector vTmp = new Vector();
      String[] saBillIdTmp = null;
      if (saBillid != null) {
        for (int i = 0; i < saBillid.length; i++) {
          if (saBillid[i] == null || vTmp.contains(saBillid[i])) {
            continue;
          }
          vTmp.addElement(saBillid[i]);
        }
        if (vTmp.size() > 0) {
          saBillIdTmp = new String[vTmp.size()];
          vTmp.copyInto(saBillIdTmp);
        }
      }
      // 查询SQL语句
      String strIdSet = null;
      StringBuffer sbufSqlh = null;
      if (saBillIdTmp != null && saBillIdTmp.length > 0) {
        sbufSqlh = new StringBuffer(" SELECT ");
        sbufSqlh.append(strFieldNameHeadId);
        sbufSqlh.append(",ts ");
        sbufSqlh.append(" FROM ");
        sbufSqlh.append(strTableNameHead);
        sbufSqlh.append(" WHERE " + strFieldNameHeadId + " in ");
        strIdSet = dmoTempTbl.insertTempTable(saBillIdTmp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU53,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        sbufSqlh.append(strIdSet);
        sbufSqlh.append(" and dr = 0 ");
      }

      // 查询体TS

      // 体主键:除去重复
      String[] saBill_bidTmp = null;
      vTmp = new Vector();
      if (saBill_bid != null) {
        for (int i = 0; i < saBill_bid.length; i++) {
          if (saBill_bid[i] == null || vTmp.contains(saBill_bid[i])) {
            continue;
          }
          vTmp.addElement(saBill_bid[i]);
        }
        if (vTmp.size() > 0) {
          saBill_bidTmp = new String[vTmp.size()];
          vTmp.copyInto(saBill_bidTmp);
        }
      }
      // 查询SQL语句
      StringBuffer sbufSqlb = null;
      if (saBill_bidTmp != null && saBill_bidTmp.length > 0) {
        sbufSqlb = new StringBuffer("SELECT ");
        sbufSqlb.append(strFieldNameBodyId);
        sbufSqlb.append(",ts ");
        sbufSqlb.append(" FROM ");
        sbufSqlb.append(strTableNameBody + " ");
        sbufSqlb.append(" WHERE " + strFieldNameBodyId + " in  ");
        strIdSet = dmoTempTbl.insertTempTable(saBill_bidTmp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU9,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        sbufSqlb.append(strIdSet);
        sbufSqlb.append("and dr = 0 ");
      }
      // 查询子子表TS

      // 体主键:除去重复
      String[] saBill_bbidTmp = null;
      vTmp = new Vector();
      if (saBill_bbid != null) {
        for (int i = 0; i < saBill_bbid.length; i++) {
          if (saBill_bbid[i] == null || vTmp.contains(saBill_bbid[i])) {
            continue;
          }
          vTmp.addElement(saBill_bbid[i]);
        }
        if (vTmp.size() > 0) {
          saBill_bbidTmp = new String[vTmp.size()];
          vTmp.copyInto(saBill_bbidTmp);
        }
      }
      // 查询SQL语句
      StringBuffer sbufSqlbb = null;
      if (saBill_bbidTmp != null && saBill_bbidTmp.length > 0
          && strTableNameBBody != null) {
        sbufSqlbb = new StringBuffer("SELECT ");
        sbufSqlbb.append(strFieldNameBBodyId);
        sbufSqlbb.append(",ts ");
        sbufSqlbb.append(" FROM ");
        sbufSqlbb.append(strTableNameBBody);
        sbufSqlbb.append(" WHERE " + strFieldNameBBodyId + " in  ");
        strIdSet = dmoTempTbl.insertTempTable(saBill_bbidTmp,
            nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU10,
            nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
        sbufSqlbb.append(strIdSet);
        sbufSqlbb.append("and dr = 0 ");
      }
      timer.addExecutePhase("临时表创建时间");

      // 执行查询
      con = getConnection();
      stmt = con.createStatement();

      // 头TS
      if (sbufSqlh != null) {
        rs = stmt.executeQuery(sbufSqlh.toString());
        while (rs.next()) {
          hashHTs.put(rs.getString(1).trim(), rs.getString(2));
        }
        rs.close();
      }

      // 体TS
      if (sbufSqlb != null) {
        rs = stmt.executeQuery(sbufSqlb.toString());
        while (rs.next()) {
          hashBTs.put(rs.getString(1).trim(), rs.getString(2));
        }
        rs.close();
      }

      // 子子表TS
      if (sbufSqlbb != null) {
        rs = stmt.executeQuery(sbufSqlbb.toString());
        while (rs.next()) {
          hashBbTs.put(rs.getString(1).trim(), rs.getString(2));
        }
        rs.close();
      }
    } catch (Exception ee) {
      PubDMO.throwBusinessException(ee);
    } finally {
      // 关闭结果集，即时释放资源
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {
      }
      try {
        if (stmt != null)
          stmt.close();
      } catch (Exception e) {
      }
      try {
        if (con != null)
          con.close();
      } catch (Exception e) {
      }
    }

    timer.addExecutePhase("执行查询时间");

    // 组织返回
    Object[] oRet = new Object[3];
    if (hashHTs.size() > 0) {
      iLen = saBillid.length;
      String[] saHTs = new String[iLen];
      for (int i = 0; i < iLen; i++) {
        saHTs[i] = (String) hashHTs.get(saBillid[i].trim());
      }
      oRet[0] = saHTs;
    }
    if (hashBTs.size() > 0) {
      iLen = saBill_bid.length;
      String[] saBTs = new String[iLen];
      for (int i = 0; i < iLen; i++) {
        saBTs[i] = (String) hashBTs.get(saBill_bid[i].trim());
      }
      oRet[1] = saBTs;
    }
    if (hashBbTs.size() > 0) {
      iLen = saBill_bbid.length;
      String[] saBbTs = new String[iLen];
      for (int i = 0; i < iLen; i++) {
        saBbTs[i] = (String) hashBbTs.get(saBill_bbid[i].trim());
      }
      oRet[2] = saBbTs;
    }
    timer.addExecutePhase("组织返回时间");

    timer.showAllExecutePhase("单据时间戳查询时间分布");

    return oRet;

  }

  /**
   * 方法为根据单据Id设置单据在进行中 的状态说明,与当前审批人。 创建日期：(2001-7-19 23:19:34)
   * 
   * @return boolean
   * @param billId
   *            java.lang.String
   * @throws SQLException 
   */
  public boolean checkGoing(String billId, String ApproveId,
      String ApproveDate, String checkNote) throws BusinessException, SQLException {
    ArrayList array = queryForAudit(billId);
    Object ibillstatus = array.get(2);
    if (ibillstatus != null && ibillstatus.toString().trim().length() > 0) {
      if (!(new Integer(ibillstatus.toString()).intValue() == 2 || new Integer(
          ibillstatus.toString()).intValue() == 0))
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("40040401",
                "UPP40040401-000096")/* @res "单据不能继续审批!" */);
    }
    // 0自由 1作废 2正在审批 3审批通过 4审批未通过
    String sql = "update po_priceaudit set cauditpsnid = ?,ibillstatus = ?,dauditdate = ?,taudittime = ? where cpriceauditid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    UFDateTime serverTime = new UFDateTime(new Date());
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // 审批进行中的状态
      stmt.setString(1, ApproveId);
      stmt.setInt(2, 2);
      stmt.setString(3, ApproveDate);
      stmt.setString(4, serverTime.toString());
      stmt.setString(5, billId);
      //
      stmt.executeUpdate();
    } catch (SQLException e) {
      reportException(e);
      throw new BusinessException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return true;
  }

  /**
   * 方法为根据单据Id设置单据未通过 审批说明与当前审批人。 创建日期：(2001-7-19 23:08:48)
   * 
   * @return boolean
   */
  public boolean checkNoPass(String billId, String ApproveId,
      String ApproveDate, String checkNote) throws BusinessException {
    // 0自由 1作废 2正在审批 3审批通过 4审批未通过
    String sql = "update po_priceaudit set cauditpsnid = null,ibillstatus = ?,dauditdate = null,taudittime = null where cpriceauditid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // 审批进行中的状态
      stmt.setInt(1, 4);
      stmt.setString(2, billId);
      stmt.executeUpdate();
    } catch (SQLException e) {
      reportException(e);
      throw new BusinessException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    return true;
  }

  /**
   * 方法为根据单据Id设置单据在进行中 的状态说明,与当前审批人。 创建日期：(2001-7-19 23:19:34)
   * 
   * @return boolean
   * @param billId
   *            java.lang.String
   * @throws SQLException 
   */
  public boolean checkPass(String billId, String ApproveId,
      String ApproveDate, String checkNote) throws BusinessException, SQLException {
    // TODO 自动生成方法存根
    ArrayList array = queryForAudit(billId);
    Object ibillstatus = array.get(2);
    if (ibillstatus != null && ibillstatus.toString().trim().length() > 0) {
      if (new Integer(ibillstatus.toString()).intValue() == 3)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("40040401",
                "UPP40040401-000097")/* @res "审批已经通过，不能审批！" */);

      if (new Integer(ibillstatus.toString()).intValue() == 1)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("40040401",
                "UPP40040401-000098")/* @res "审批已经作废，不能审批！" */);

      if (new Integer(ibillstatus.toString()).intValue() == 4)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("40040401",
                "UPP40040401-000099")/* @res "审批未通过，不能审批！" */);
    }
    // 0自由 1作废 2正在审批 3审批通过 4审批未通过
    String sql = "update po_priceaudit set cauditpsnid = ?,ibillstatus = ?,dauditdate = ? where cpriceauditid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // 审批进行中的状态
      stmt.setString(1, ApproveId);
      stmt.setInt(2, 3);
      stmt.setString(3, ApproveDate);
      stmt.setString(4, billId);
      //
      stmt.executeUpdate();
    } catch (SQLException e) {
      reportException(e);
      throw new BusinessException(e.getMessage());
    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
    /** ********************************************************** */
    // 保留的系统管理接口：
    // afterCallMethod("nc.bs.pi.InvoiceDMO", "checkNoPass", new
    // Object[]{billId});
    /** ********************************************************** */

    return true;
  }

  /**
   * 作者：周晓 功能：审批订单--逐级弃审(供应链暂不支持) 参数： String billId 单据ID String approveId
   * 审批人ID String approveDate 审批日期 String checkNote 批语 返回：void 例外：Exception
   * 一般异常 日期：(2005-05-24 15:39:21) 修改日期，修改人，修改原因，注释标志：
   */
  public void backGoing(String billId, String approveId, String approveDate,
		  String backNote) throws Exception {
	  CheckIsGenOrder("'" + billId + "'");
	  if (checkIsPriceSorce(billId)) {
		  PubDMO
		  .throwBusinessException(
				  "nc.bs.piInvocieImpl.delete(InvoiceVO)",
				  new BusinessException(nc.bs.ml.NCLangResOnserver
						  .getInstance().getStrByID("4004070105",
						  "UPP4004070105-000072") /*
						   * @res
						   * "此单据已经作为其它价格审批单的报价来源，无法弃审!"
						   */));
	  }
	  ArrayList array = queryForAudit(billId);
	  Object ibillstatus = array.get(2);
	  if (ibillstatus != null && ibillstatus.toString().trim().length() > 0) {
		  if (new Integer(ibillstatus.toString()).intValue() != 2 &&
				  new Integer(ibillstatus.toString()).intValue() != 4
				  &&  new Integer(ibillstatus.toString()).intValue() != 3)
			  throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040401","UPP40040401-000270")/*@res "单据状态不是审批中、审批通过，不可以弃审。"*/);
	  }
	  // 0自由 1作废 2正在审批 3审批通过 4审批未通过
	  String sql = "update po_priceaudit set cauditpsnid = ?,ibillstatus = ?,dauditdate = ?,taudittime = ? where cpriceauditid = ?";
	  
	  Connection con = null;
	  PreparedStatement stmt = null;
	  UFDateTime serverTime = new UFDateTime(new Date());
	  try {
		  con = getConnection();
		  stmt = con.prepareStatement(sql);
		  // 审批进行中的状态
		  stmt.setString(1, approveId);
		  stmt.setInt(2, 2);
		  stmt.setString(3, approveDate);
		  stmt.setString(4, serverTime.toString());
		  stmt.setString(5, billId);
		  //
		  stmt.executeUpdate();
	  } catch (SQLException e) {
		  reportException(e);
		  throw new BusinessException(e.getMessage());
	  } finally {
		  try {
			  if (stmt != null) {
				  stmt.close();
			  }
		  } catch (Exception e) {
		  }
		  try {
			  if (con != null) {
				  con.close();
			  }
		  } catch (Exception e) {
		  }
	  }
  }

  /**
   * 作者：周晓 功能：审批订单--驳回 参数： String billId 单据ID String approveId 审批人ID String
   * approveDate 审批日期 String checkNote 批语 返回：void 例外：Exception 一般异常
   * 日期：(2005-05-24 15:39:21) 修改日期，修改人，修改原因，注释标志：
   */
  public void backNoState(String billId, String approveId,
      String approveDate, String backNote) throws Exception {
    String sql = "update po_priceaudit set ibillstatus = 0, cauditpsnid = null, dauditdate = null where cpriceauditid = ? and dr = 0";
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();

      stmt = prepareStatement(con, sql);

      stmt.setString(1, billId);

      executeUpdate(stmt);

      executeBatch(stmt);

    } finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      } catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      } catch (Exception e) {
      }
    }
  }
  /**
   * 查询表头ts
   * @throws SQLException
   */
  public HashMap queryBillHeadTsBatch(ArrayList alHeadId) throws SQLException{
    if(alHeadId == null || alHeadId.size() == 0)
      return null;

    HashMap hmDBTS = new HashMap();

    // 查询语句
    StringBuffer sbSQL = new StringBuffer();
    sbSQL.append("select cpriceauditid, ts from po_priceaudit where dr = 0 and cpriceauditid in (");

    for (int i = 0; i < alHeadId.size(); i++){
      sbSQL.append("'")
         .append(alHeadId.get(i))
         .append("'");

      if (i != (alHeadId.size() - 1))
        sbSQL.append(", ");
    }
    sbSQL.append(") ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {

      con = getConnection();
      stmt = con.prepareStatement(sbSQL.toString());
      rs = stmt.executeQuery();

      String hid=null;
      String sTs = null; //时间戳

      while (rs.next()){
        hid = rs.getString(1);
        sTs = rs.getString(2);
        if(hid != null && sTs != null)
          hmDBTS.put(hid.trim(), sTs.trim());
      }

    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {}
      try {
        if (stmt != null)
          stmt.close();
      } catch (Exception e) {}
      try {
        if (con != null)
          con.close();
      } catch (Exception e) {}
    }

    return hmDBTS;

  }
  /**
   * 查询表头ts
   * @throws SQLException
   */
  public HashMap queryBillHeadTsBatchForAskBill(ArrayList alHeadId) throws SQLException{
    if(alHeadId == null || alHeadId.size() == 0)
      return null;

    HashMap hmDBTS = new HashMap();

    // 查询语句
    StringBuffer sbSQL = new StringBuffer();
    sbSQL.append("select caskbillid, ts from po_askbill where dr = 0 and caskbillid in (");

    for (int i = 0; i < alHeadId.size(); i++){
      sbSQL.append("'")
         .append(alHeadId.get(i))
         .append("'");

      if (i != (alHeadId.size() - 1))
        sbSQL.append(", ");
    }
    sbSQL.append(") ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {

      con = getConnection();
      stmt = con.prepareStatement(sbSQL.toString());
      rs = stmt.executeQuery();

      String hid=null;
      String sTs = null; //时间戳

      while (rs.next()){
        hid = rs.getString(1);
        sTs = rs.getString(2);
        if(hid != null && sTs != null)
          hmDBTS.put(hid.trim(), sTs.trim());
      }

    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {}
      try {
        if (stmt != null)
          stmt.close();
      } catch (Exception e) {}
      try {
        if (con != null)
          con.close();
      } catch (Exception e) {}
    }

    return hmDBTS;

  }
  /**
   * 查询表头ts
   * @throws SQLException
   */
  public Vector getDataForCheckTs(String condition) throws SQLException{
    if(condition == null || condition.trim().length() == 0)
      return null;

    // 查询语句
    StringBuffer sbSQL = new StringBuffer();
    sbSQL.append("select po_praybill.ts,po_praybill_b.ts, po_praybill_b.cpraybillid,po_praybill_b.cpraybill_bid from po_praybill inner join po_praybill_b on po_praybill.cpraybillid = po_praybill_b.cpraybillid  where po_praybill.dr = 0 and po_praybill_b.dr = 0 and po_praybill_b.cpraybill_bid in ( select cupsourcebillrowid from po_askbill_b where cupsourcebilltype = '20' and dr = 0 and caskbill_bid in " + condition + ") ");

    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    String[] saTshForPray = new String[1];
    String[] saTidForPray = new String[1];
    String hts = null;
    String bts = null;
    String hid = null;
    String bid = null;
    String[] saBill_bidForPray = null;
    String[] saTsbForPray = null;
    String[] saBillIds = null;
    Vector saBill_bidForPrayV = new Vector();
    Vector saTsbForPrayV = new Vector();
    Vector saBillIdsV = new Vector();
    Vector resultV = new Vector(); 

    try {

      con = getConnection();
      stmt = con.prepareStatement(sbSQL.toString());
      rs = stmt.executeQuery();

      while (rs.next()){
        hts = rs.getString(1);
        saTshForPray[0] = hts;
        bts = rs.getString(2);
        saTsbForPrayV.add(bts);
        hid = rs.getString(3);
        saTidForPray[0] = hid;
        bid = rs.getString(4);
        saBill_bidForPrayV.add(bid);
        saBillIdsV.add(bid);
      }
      saBillIdsV.add(saTshForPray[0]);
      if(saTshForPray != null && saTshForPray[0] != null && saTshForPray[0].trim().length() > 0){
        resultV.add(saTshForPray);
      }else{
        resultV.add(null);
      }
      if(saTsbForPrayV.size() > 0){
        saTsbForPray = new String[saTsbForPrayV.size()];
        saTsbForPrayV.copyInto(saTsbForPray);
        resultV.add(saTsbForPray);
      }else{
        resultV.add(null);
      }
      if(saTidForPray != null && saTidForPray[0] != null && saTidForPray[0].trim().length() > 0){
        resultV.add(saTidForPray);
      }else{
        resultV.add(null);
      }
      if(saBill_bidForPrayV.size() > 0){
        saBill_bidForPray = new String[saBill_bidForPrayV.size()];
        saBill_bidForPrayV.copyInto(saBill_bidForPray);
        resultV.add(saBill_bidForPray);
      }else{
        resultV.add(null);
      }
      
      if(saBillIdsV.size() > 0){
        saBillIds = new String[saBillIdsV.size()];
        saBillIdsV.copyInto(saBillIds);
        resultV.add(saBillIds);
      }else{
        resultV.add(null);
      }
      return resultV;
      
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (Exception e) {}
      try {
        if (stmt != null)
          stmt.close();
      } catch (Exception e) {}
      try {
        if (con != null)
          con.close();
      } catch (Exception e) {}
    }

  }
  /**
   * 
   * 方法功能描述：给请购单转单到采购订单界面，选择供应商时从供应商价格表中选择默认供应商使用。
   * 选取方法：同一存货所有供应商是否订货为“是”，且审批通过(ibillstatus==3)的最新有效价格记录，
   *         并将优先级最高的供应商带入到请购单行的供应商栏目。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param loginDate
   * @param pk_corp
   * @param sInvBasids
   * @return hashMap<存货基本档案id，供应商信息list｛供应商基本档案id，供应商管理档案id｝> 
   * @throws SQLException
   * <p>
   * @author donggq
   * @time 2008-3-3 上午09:07:47
   */
public HashMap getDefaultVendors(String loginDate,String pk_corp,String[] sInvBasids)throws SQLException{
  String sBasidWhere = "";
  if(sInvBasids.length == 1){
    sBasidWhere = " and  body.cbaseid = '"+sInvBasids[0]+"' ";
  }else{
    sBasidWhere = SqlMethod.formInSQL("body.cbaseid",sInvBasids);
  }
  HashMap hmVendor = new HashMap();
    String sSQL = "select bb1.cvendorbaseid,body.cbaseid " +
        " from po_priceaudit_bb1 bb1 " +
        " LEFT OUTER JOIN po_priceaudit_b body on bb1.cpriceaudit_bid = body.cpriceaudit_bid " +
        " LEFT OUTER JOIN po_priceaudit head on bb1.cpriceauditid = head.cpriceauditid " +
        " where bb1.border = 'Y' AND body.pk_corp = '"+ pk_corp +"' " +
        " AND head.ibillstatus = 3 " + //价格审批单已审批通过
        " AND bb1.dr = 0 AND body.dr = 0 AND head.dr = 0 " +
        " AND (bb1. dvaliddate <='"
          + loginDate
          + "' or  bb1.dvaliddate is null ) and (bb1. dinvaliddate >='"
          + loginDate
          + "' or  bb1.dinvaliddate is null ) " +//生效范围价格
          sBasidWhere +
        " order by bb1.iprior,bb1.ts  desc ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try{
      con = getConnection();
      stmt = con.prepareStatement(sSQL);
      rs = stmt.executeQuery();
      while(rs.next()){
        String sVendor = rs.getString(1);
        String sInvbasid = rs.getString(2);
        if(!hmVendor.containsKey(sInvbasid)){
          hmVendor.put(sInvbasid, sVendor);
        }
      }      
     }finally{
       try {
         if (rs != null)
           rs.close();
       } catch (Exception e) {}
       try {
         if (stmt != null)
           stmt.close();
       } catch (Exception e) {}
       try {
         if (con != null)
           con.close();
       } catch (Exception e) {}
     }
    return hmVendor;
    
  }
/**
 * 
 * 查询价格审批单来源
 * <p>
 * 如果是参照询报价单生成,对应的询报价单是参照请购单生成则价格审批单只记录价格审批单。
 * <b>examples:</b>
 * <p>
 * 使用示例
 * <p>
 * <b>参数说明</b>
 * @param reWriteDatas
 * @return
 * <p>
 * @author donggq
 * @time 2008-8-13 上午10:54:15
 */
public HashMap<String, Vector<String>> queryBillUpsource(ParaCtToPoRewriteVO[] reWriteDatas) throws SQLException{
	if(null == reWriteDatas || reWriteDatas.length == 0){
		return null;
	}
	String swherePart = "";
	for (ParaCtToPoRewriteVO paraCtToPoRewriteVO : reWriteDatas) {
		swherePart += "'"+paraCtToPoRewriteVO.getSourceRowbid()+"',";
	}
	swherePart = swherePart.substring(0, swherePart.length()-1);
	StringBuffer sbSql = new StringBuffer();
	sbSql.append(" SELECT po_priceaudit_b.cupsourcebilltype , po_priceaudit_b.vupsourcebillcode, ")
		.append(" po_priceaudit_b.cupsourcebillid, po_priceaudit_b.cupsourcebillrowid ")
		.append(" ,po_priceaudit_b.cpriceaudit_bid,po_priceaudit_bb1.cpriceaudit_bb1id,po_priceaudit.cpriceauditid ")
		.append(" from po_priceaudit_bb1 left outer join po_priceaudit_b on po_priceaudit_b.cpriceaudit_bid = po_priceaudit_bb1.cpriceaudit_bid")
		.append(" left outer join po_priceaudit on po_priceaudit.cpriceauditid = po_priceaudit_bb1.cpriceauditid ")
		.append(" where po_priceaudit_bb1.cpriceaudit_bb1id in ("+swherePart+")");
	Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    HashMap<String, Vector<String>> hmRet = new HashMap<String, Vector<String>>();
    try{
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      rs = stmt.executeQuery();
      while(rs.next()){
    	  String cupsourcebilltype = rs.getString("cupsourcebilltype");
    	  if(ScmConst.PO_Pray.equals(cupsourcebilltype)){
    		  Vector<String> vSourceInfo = new Vector<String>();
    		  String supsourcebillid = rs.getString("cupsourcebillid");
    		  String supsourcebillrowid = rs.getString("cupsourcebillrowid");
    		  vSourceInfo.add(supsourcebillid);
    		  vSourceInfo.add(supsourcebillrowid);
    		  String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
    		  if(!hmRet.containsKey(cpriceaudit_bb1id)){
    			  hmRet.put(cpriceaudit_bb1id, vSourceInfo);
    		  }
    	  }
      }      
     }finally{
       try {
         if (rs != null)
           rs.close();
       } catch (Exception e) {}
       try {
         if (stmt != null)
           stmt.close();
       } catch (Exception e) {}
       try {
         if (con != null)
           con.close();
       } catch (Exception e) {}
     }
     return hmRet;
}
protected HashMap getTaxrateByAskBB1id(String[] askbb1id) throws SQLException,BusinessException{
	String sqlForInvdoc = "select distinct po_askbill_b.cbaseid,po_askbill_bb1.pk_corp,po_askbill_bb1.caskbill_bb1id from po_askbill_bb1,po_askbill_b " +
			"where po_askbill_b.caskbill_bid = po_askbill_bb1.caskbill_bid "+SqlMethod.formInSQL("po_askbill_bb1.caskbill_bb1id", askbb1id)+"";
	Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Vector<String> vbasid = new Vector<String>();
    Vector<String> vbb1ids = new Vector<String>();
    HashMap hmIdMapRate = new HashMap();
    String corp = null;
    try{
      con = getConnection();
      stmt = con.prepareStatement(sqlForInvdoc);
      rs = stmt.executeQuery();
      while(rs.next()){
    	  String cbasid = rs.getString("cbaseid");
    	  String pk_corp = rs.getString("pk_corp");
    	  if(PuPubVO.getString_TrimZeroLenAsNull(cbasid) != null){
    		  vbasid.add(cbasid);
    	  }
    	  if(PuPubVO.getString_TrimZeroLenAsNull(corp) == null){
    		  corp = pk_corp;
    	  }
    	  String caskbill_bb1id = rs.getString("caskbill_bb1id");
    	  hmIdMapRate.put(caskbill_bb1id, cbasid + pk_corp);
    	  vbb1ids.add(caskbill_bb1id);
      }      
     }finally{
       try {
         if (rs != null)
           rs.close();
       } catch (Exception e) {}
       try {
         if (stmt != null)
           stmt.close();
       } catch (Exception e) {}
       try {
         if (con != null)
           con.close();
       } catch (Exception e) {}
     }
     HashMap hmRet = null;
     try{
	     if(vbasid.size() > 0 && PuPubVO.getString_TrimZeroLenAsNull(corp) != null){
	    	 hmRet = new PubDMO().getInvTaxRate(vbasid.toArray(new String[vbasid.size()]), corp);
	     }else{
	    	 return new HashMap();
	     }
     }catch(Exception syse){
    	 PubDMO.throwBusinessException(syse);
    	 throw new BusinessException(syse);
     }
     for (String bb1id : vbb1ids) {
    	 hmIdMapRate.put(bb1id, hmRet.get(hmIdMapRate.get(bb1id)));
	}
     return hmIdMapRate;
}
}
