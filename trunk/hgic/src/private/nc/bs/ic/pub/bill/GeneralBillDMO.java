/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.ic.pub.bill;

import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.framework.common.NCLocator;
import nc.bs.ic.pub.GenMethod;
import nc.bs.ic.pub.ICCommonBusiImpl;
import nc.bs.ic.pub.ICDbVisitor;
import nc.bs.ic.pub.QueryInfoDMO;
import nc.bs.ic.pub.check.CheckBusiDMO;
import nc.bs.ic.pub.locator.LocatorDMO;
import nc.bs.ic.pub.settlement.SettlementDMO;
import nc.bs.ic.pub.sn.SerialDMO;
import nc.bs.ic.pub.vmi.ICSmartToolsDmo;
import nc.bs.logging.Logger;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.pub.pf.IQueryData;
import nc.bs.pub.pf.IQueryData2;
import nc.bs.pub.pf.PfUtilTools;
import nc.bs.scm.pub.bill.SQLUtil;
import nc.bs.scm.pub.redun.IRedunSource;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.bs.scm.sourcebill.DefaultSourceDMO;
import nc.jdbc.framework.crossdb.CrossDBConnection;
import nc.vo.ic.ic700.ICDataSet;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.ic.pub.ICSourceBillPara;
import nc.vo.ic.pub.SmartVOUtilExt;
import nc.vo.ic.pub.bc.BarCodeVO;
import nc.vo.ic.pub.bill.BillStatus;
import nc.vo.ic.pub.bill.DynamicJoinSql;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ic.pub.bill.IItemKey;
import nc.vo.ic.pub.bill.QryConditionVO;
import nc.vo.ic.pub.bill.Timer;
import nc.vo.ic.pub.billtype.BillTypeFactory;
import nc.vo.ic.pub.billtype.IBillType;
import nc.vo.ic.pub.billtype.ModuleCode;
import nc.vo.ic.pub.check.CheckTools;
import nc.vo.ic.pub.lang.ResBase;
import nc.vo.ic.pub.locator.LocatorVO;
import nc.vo.ic.pub.sn.SerialVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.BusinessRuntimeException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.query.ConditionVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.constant.ic.InOutFlag;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.ic.bill.WhVO;
import nc.vo.scm.pub.redun.RedunUtil;
import nc.vo.scm.pub.smart.SmartFieldMeta;
import nc.vo.scm.pub.smart.SmartVO;
import nc.vo.scm.sourcebill.LightBillVO;

/**
 * 出入库单据的DMO类。
 * 
 * 创建日期：(2001-6-12)
 * 
 * @author：王乃军 2002-03-29 修改copyItem等方法的为包可访问属性(private --> default)。支持业务代码转移到BO
 */
public class GeneralBillDMO extends DataManageObject implements
		nc.bs.pub.pf.IQueryData, nc.bs.pub.pf.IQueryData2 {

	nc.vo.ic.pub.bill.Timer m_timer = new nc.vo.ic.pub.bill.Timer();
	private String sNULL = null;

	/**
	 * GeneralBillDMO 构造子注解。
	 * 
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public GeneralBillDMO() throws javax.naming.NamingException,
			SystemException {
		super();
	}

	/**
	 * GeneralBillDMO 构造子注解。
	 * 
	 * @param dbName
	 *            java.lang.String 在EJB Server中配置的数据库DataSource名称。
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public GeneralBillDMO(String dbName) throws javax.naming.NamingException,
			SystemException {
		super(dbName);
	}

	/**
	 * 创建者：王乃军 功能：读存货数据，现存量数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public void cancelInSerialsForCopy(GeneralBillHeaderVO voHeader,
			GeneralBillItemVO voItem, Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut, Vector vFreeze) throws BusinessException,
			SystemException, Exception {
		if (voHeader == null || voItem == null) {
			nc.vo.scm.pub.SCMEnv.out("vo null ERR.");
			return;
		}
		if (voItem.getSerial() == null || voItem.getSerial().length == 0)
			return;

		String sBodyPK = voItem.getPrimaryKey(); // 表体ID
		// String sTempSN = null; //临时的序列号
		String sSNbodyPK = null; // 返回的cgeneralbid
		SerialDMO dmoSN = new SerialDMO(); // 序列号dmo
		SerialVO voTempSN = null; // 临时序列号VO
		ArrayList alRet = null; // 返回的状态数组 [vo,vo]
		// 先查看一遍序列号的状态，都正确时再一起插入。
		int iCorrectCount = 0; // 正确计数器
		int iSNstatus = SerialVO.NOTEXIST; // 返回的状态
		// 读属于此单据行的序列号状态。
		// in/in/in/in/in/in/in/in/in/in/in/in/in/in/in
		alRet = dmoSN.getInSerialStatus(sBodyPK);
		// --------------------
		// 这些序列号查不到了。如果是序列号管理的存货就是业务错误，否则本来就没有。--------------------
		if (alRet != null && alRet.size() == 1 && alRet.get(0) != null
				&& ((SerialVO) alRet.get(0)).getVserialcode() == null) {
			// ------------------
			nc.vo.scm.pub.SCMEnv.out("can't find sn.");
			return;
			// ---------------
		} else if (alRet != null && alRet.size() > 0)
			// 设置仓库等其它数据
			for (int j = 0; j < alRet.size(); j++)
				if (alRet.get(j) != null) {
					voTempSN = (SerialVO) alRet.get(j);
					// 查看当前序列号的状态
					if (voTempSN.getSnStatus() != null) {
						iSNstatus = voTempSN.getSnStatus().intValue();

						// in/in/in/in/in/in/in/in/in/in/in/in/in/in/in
						sSNbodyPK = voTempSN.getCinbillbodyid();

						// sTempSN = voTempSN.getVserialcode();
						// 入库、存在此还回的序列号，已出库--〉出错
						// 存在但不是本张单据的此单据行，认为已存在--〉ERR。
						// Vector==null will ignore this check.
						if (iSNstatus == SerialVO.EXIST) {
							if (sBodyPK.equals(sSNbodyPK))
								iCorrectCount++;
							else if (vNotEx != null) {
								if (!vNotEx.contains(voTempSN))
									vNotEx.addElement(voTempSN);
							} else
								// 不检查vNotEx
								iCorrectCount++;

						} else if (iSNstatus == SerialVO.RETURN && vRet != null) {
							if (!vRet.contains(voTempSN))
								vRet.addElement(voTempSN);
						} else if (iSNstatus == SerialVO.OUTWH && vOut != null) {
							if (!vOut.contains(voTempSN))
								vOut.addElement(voTempSN);
						} else if (iSNstatus == SerialVO.FREEZE
								&& vFreeze != null) { // 和出库的处理不同，不用处理表体cfreezeid比较
							if (!vFreeze.contains(voTempSN))
								vFreeze.addElement(voTempSN);
						} else
							iCorrectCount++;

					}
				}

		// 都正确：
		if (alRet != null && iCorrectCount == alRet.size())
			// 删除入库的数据
			dmoSN.deleteSerials(sBodyPK);
		// release dmo ??? need it?
		dmoSN = null;
	}

	/**
	 * 
	 * 创建者：王乃军 功能：取消序列号出库
	 * 
	 * 未考虑冻结的序列号，因为已经出库的序列号不会被冻结
	 * 
	 * 参数： 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public void cancelOutSerials(GeneralBillHeaderVO voHeader,
			GeneralBillItemVO voItem, Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut) throws BusinessException, SystemException, Exception {
		if (voHeader == null || voItem == null) {
			nc.vo.scm.pub.SCMEnv.out("vo null ERR.");
			return;
		}
		if (voItem.getSerial() == null || voItem.getSerial().length == 0)
			return;

		String sBodyPK = voItem.getPrimaryKey(); // 表体ID
		// String sTempSN = null; //临时的序列号
		String sSNbodyPK = null; // 返回的cgeneralbid
		SerialDMO dmoSN = new SerialDMO(); // 序列号dmo
		SerialVO voTempSN = null; // 临时序列号VO
		ArrayList alRet = null; // 返回的状态数组 [vo,vo]
		// 先查看一遍序列号的状态，都正确时再一起插入。
		int iCorrectCount = 0; // 正确计数器
		int iSNstatus = SerialVO.NOTEXIST; // 返回的状态
		// 读属于此单据行的序列号状态。
		// out/out/out/out/out/out/out/out/out/out/out/out
		alRet = dmoSN.getOutSerialStatus(sBodyPK);
		// --------------------
		// 这些序列号查不到了。如果是序列号管理的存货就是业务错误，否则本来就没有。--------------------
		if (alRet != null && alRet.size() == 1 && alRet.get(0) != null
				&& ((SerialVO) alRet.get(0)).getVserialcode() == null) {
			// ------------------
			nc.vo.scm.pub.SCMEnv.out("-----> can't find sn");
			return;
			// ---------------
		} else if (alRet != null && alRet.size() > 0)
			// 设置仓库等其它数据
			for (int j = 0; j < alRet.size(); j++)
				if (alRet.get(j) != null) {
					voTempSN = (SerialVO) alRet.get(j);
					// 查看当前序列号的状态
					if (voTempSN.getSnStatus() != null) {
						iSNstatus = voTempSN.getSnStatus().intValue();

						// out/out/out/out/out/out/out/out/out/out/out/out
						sSNbodyPK = voTempSN.getCoutbillbodyid();

						// sTempSN = voTempSN.getVserialcode();

						// 出库还是入库？根据单据类型和数量的正负来决定。
						// 出库，不存在此序列号，或已出库，出错
						// Vector==null will ignore this check.
						if (iSNstatus == SerialVO.NOTEXIST && vNotEx != null) {
							if (!vNotEx.contains(voTempSN))
								vNotEx.addElement(voTempSN);
						} else // 已出库但不是本张单据的此单据行，认为已出库--〉ERR。
						if (iSNstatus == SerialVO.OUTWH) {
							if (sBodyPK.equals(sSNbodyPK)) {
								// nc.vo.scm.pub.SCMEnv.out("---> i out it !");
								iCorrectCount++;
							} else if (vOut != null) {
								if (!vOut.contains(voTempSN))
									vOut.addElement(voTempSN);
							} else { // 不检查出库状态
								iCorrectCount++;
								// nc.vo.scm.pub.SCMEnv.out("---> don't check
								// out!");
							}

						} else if (iSNstatus == SerialVO.RETURN && vRet != null) {
							if (!vRet.contains(voTempSN))
								vRet.addElement(voTempSN);
						} else {
							iCorrectCount++;
							// nc.vo.scm.pub.SCMEnv.out("---> ok !");
						}
					}
				}

		// 都正确：
		nc.vo.scm.pub.SCMEnv.out("---> ok number is " + iCorrectCount + "/"
				+ alRet.size());
		if (alRet != null && iCorrectCount == alRet.size())
			dmoSN.cancelOutSerial(sBodyPK);
		// release dmo ??? need it?
		dmoSN = null;
	}

	/**
	 * 创建者：王乃军 功能：签字（记账）功能 参数： ArrayList alParam: alParam[0]:Bill PK
	 * alParam[1]:操作员 alParam[2]:公司ID alParam[3]:当前日期
	 * 
	 * 返回： 例外： 日期：(2001-6-14 9:13:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean cancelSign(ArrayList alParam) throws BusinessException,
			Exception {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "cancelSign",
				new Object[] { alParam });

		String sBillPK = null, sRegisterID = null, sCorpID = null, sCurDate = null;
		String sCurBillType = null; // 单据类型
		if (alParam.get(0) != null)
			sBillPK = alParam.get(0).toString();
		if (alParam.get(1) != null)
			sRegisterID = alParam.get(1).toString();
		if (alParam.get(2) != null)
			sCorpID = alParam.get(2).toString();
		if (alParam.get(3) != null)
			sCurDate = alParam.get(3).toString();
		if (alParam.get(4) != null)
			sCurBillType = alParam.get(4).toString();

		// v5:月结取消签字可能需要补单据
		GeneralBillBOHelper.cancelSignMonth(sBillPK, sCurDate);

		if (alParam != null && alParam.size() >= 4) {

			// 检查通过把操作员ID置成NULL
			if (cancelSignCheck(sBillPK, sRegisterID, sCorpID, sCurDate,
					sCurBillType,false)) {
				String sql = "UPDATE ic_general_h SET  cregister = NULL, daccountdate = NULL,fbillflag=?, taccounttime = NULL  WHERE cgeneralhid = ?";

				Connection con = null;
				PreparedStatement stmt = null;
				try {
					con = getConnection();
					stmt = con.prepareStatement(sql);
					// status set to free 08/Oct
					stmt.setInt(1, Integer.valueOf(BillStatus.FREE).intValue());
					// body pk
					if (sBillPK == null) {
						stmt.setNull(2, Types.CHAR);
					} else {
						stmt.setString(2, sBillPK);
					}
					stmt.executeUpdate();
					return new Boolean(true);
				} finally {
					try {
						if (stmt != null) {
							stmt.close();
						}
					} catch (Exception e) {
						throw e;
					}
					try {
						if (con != null) {
							con.close();
						}
					} catch (Exception e) {
						throw e;
					}
				}
			}
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000184")/*
																				 * @res
																				 * "取消签字检查参数错误！"
																				 */);

		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "cancelSign",
				new Object[] { alParam });

		return new Boolean(false);
	}

	/**
	 * 创建者：王乃军 功能：取消签字（记账）功能 参数： 返回： 例外： 日期：(2001-6-14 9:13:17)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean cancelSign(GeneralBillVO voBill) throws BusinessException,
			Exception {

		// v5: 取消签字
		GeneralBillBOHelper.modifyBillsSign(new GeneralBillVO[] { voBill },
				false);

		if (voBill == null || voBill.getHeaderVO() == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000184")/*
																				 * @res
																				 * "取消签字检查参数错误！"
																				 */);
		GeneralBillHeaderVO voHead = voBill.getHeaderVO();

		// 单据PK,操作员，公司，登录日期
		String sBillPK = voHead.getCgeneralhid();
		String sRegisterID = voHead.getCregister();
		String sCorpID = voHead.getPk_corp();
		String sCurDate = null;
		String sCurBillType = voHead.getCbilltypecode(); // 单据类型

		if (voHead.getDaccountdate() != null)
			sCurDate = voHead.getDaccountdate().toString();
		else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000163")/*
																				 * @res
																				 * "库房取消签字时发现非法的数据：没有取消签字日期。"
																				 */);

		// 已经审核，不能取消签字
		if (voHead.getCauditorid() != null
				&& voHead.getCauditorid().trim().length() > 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000185")/*
																				 * @res
																				 * "单据已经存货记账，不能取消签字！"
																				 */);

		if (sCurBillType != null
				&& (sCurBillType.equals(BillTypeConst.m_allocationIn) || sCurBillType
						.equals(BillTypeConst.m_purchaseIn))) {

			String sql = " select count(*) from ic_general_b where COALESCE(btoinzgflag,'N') = 'Y' and dr=0 and  cgeneralhid = '"
					+ sBillPK + "' ";
			Object[] ret = (new SmartDMO()).selectBy2(sql);
			if (ret != null && ret.length > 0 && ret[0] != null) {
				Object[] row = (Object[]) ret[0];
				if (row != null && row.length > 0 && row[0] != null) {
					if (nc.vo.ic.pub.GenMethod.isGTZero(CheckTools
							.toUFDouble(row[0])))
						throw new BusinessException("已暂估，不能取消签字");
				}
			}
		}
		
		Boolean bOnroadflag = false;
		for (GeneralBillItemVO itemVO : voBill.getItemVOs())
			if (null != itemVO.getAttributeValue("bonroadflag") && ((UFBoolean)itemVO.getAttributeValue("bonroadflag")).booleanValue() ){
				bOnroadflag = true;
				break;
			}

		// 调用签字
		Boolean bret = cancelSign(sBillPK, sRegisterID, sCorpID, sCurDate,
				sCurBillType,bOnroadflag);

		return bret;

	}

	/**
	 * 创建者：王乃军 功能：签字（记账）功能 参数： ArrayList alParam: alParam[0]:Bill PK
	 * alParam[1]:操作员 alParam[2]:公司ID alParam[3]:当前日期
	 * 
	 * 返回： 例外： 日期：(2001-6-14 9:13:17) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	private Boolean cancelSign(String sBillPK, String sRegisterID,
			String sCorpID, String sCurDate, String sCurBillType,Boolean bOnroadflag)
			throws BusinessException, Exception {

		// 检查通过把操作员ID置成NULL
		if (cancelSignCheck(sBillPK, sRegisterID, sCorpID, sCurDate,
				sCurBillType,bOnroadflag)) {
			String sql = "UPDATE ic_general_h SET  cregister = NULL, daccountdate = NULL,fbillflag=?, taccounttime = NULL,cauditorid=NULL,dauditdate=NULL WHERE cgeneralhid = ?";

			Connection con = null;
			PreparedStatement stmt = null;
			try {
				con = getConnection();
				stmt = con.prepareStatement(sql);
				// status set to free 08/Oct
				stmt.setInt(1, Integer.valueOf(BillStatus.FREE).intValue());
				// body pk
				if (sBillPK == null) {
					stmt.setNull(2, Types.CHAR);
				} else {
					stmt.setString(2, sBillPK);
				}
				stmt.executeUpdate();
				return new Boolean(true);
			} finally {
				try {
					if (stmt != null) {
						stmt.close();
					}
				} catch (Exception e) {
					throw e;
				}
				try {
					if (con != null) {
						con.close();
					}
				} catch (Exception e) {
					throw e;
				}
			}
		}
		return new Boolean(false);
	}

	private boolean isSearchBarCodeOpen(ConditionVO[] voaCond) {
		if (voaCond == null)
			return false;
		for (int i = 0; i < voaCond.length; i++) {

			if (voaCond[i].getFieldCode()
					.equalsIgnoreCase("body.bbarcodeclose")) {
				if (voaCond[i].getValue().equalsIgnoreCase("N"))
					return true;
			}
		}
		return false;
	}

	/**
	 * 创建者：王乃军 功能：取消签字（记账）检查功能： 返回：true：检查通过， false：不通过 例外：检查到其它错误 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * 
	 * 没有在库存的bo/dmo中发现该方法的调用之处（不可能为接口方法，ui端需要通过bs调用dmo方法），
	 * 且cancelSignCheck()方法的参数已经修改，故暂时引掉。 邵兵 on Jun 6, 2005
	 */
	/***************************************************************************
	 * public boolean cancelSignCheck(ArrayList alParam) throws
	 * BusinessException, Exception { // 保留的系统管理接口： beforeCallMethod(
	 * "nc.bs.ic.pub.bill.GeneralBillDMO", "cancelSignCheck", new Object[] {
	 * alParam });
	 * 
	 * if (alParam == null || alParam.size() < 2 || alParam.get(0) == null ||
	 * alParam.get(1) == null) { nc.vo.scm.pub.SCMEnv.out("sign check param
	 * err."); return false; } //单据PK String sBillPK =
	 * alParam.get(0).toString(); //操作员 String sRegisterID =
	 * alParam.get(1).toString(); //执行 return
	 * cancelSignCheck(sBillPK,sRegisterID,null,null); }
	 **************************************************************************/

	/**
	 * 创建者：王乃军 功能：取消签字（记账）检查功能： 参数： 返回： 例外： 日期：(2001-6-14 9:11:16)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public boolean cancelSignCheck(GeneralBillVO voBill)
			throws BusinessException, Exception {
		if (voBill == null || voBill.getHeaderVO() == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000184")/*
																				 * @res
																				 * "取消签字检查参数错误！"
																				 */);
		GeneralBillHeaderVO voHead = voBill.getHeaderVO();
		// 单据PK,操作员，公司，登录日期
		String sBillPK = voHead.getCgeneralhid();
		String sRegisterID = voHead.getCregister();
		String sCorpID = voHead.getPk_corp();
		String sCurBillType = voHead.getCbilltypecode(); // 单据类型

		String sCurDate = null;
		if (voHead.getDaccountdate() != null)
			sCurDate = voHead.getDaccountdate().toString();
		else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000163")/*
																				 * @res
																				 * "库房取消签字时发现非法的数据：没有取消签字日期。"
																				 */);
		
		Boolean bOnroadflag = false;
		for (GeneralBillItemVO itemVO : voBill.getItemVOs())
			if (null != itemVO.getAttributeValue("bonroadflag") && ((UFBoolean)itemVO.getAttributeValue("bonroadflag")).booleanValue() ){
				bOnroadflag = true;
				break;
			}
		// 调用签字
		return cancelSignCheck(sBillPK, sRegisterID, sCorpID, sCurDate,
				sCurBillType,bOnroadflag);
	}

	/**
	 * 创建者：王乃军 功能：取消签字（记账）检查功能： 返回：true：检查通过， false：不通过
	 * 
	 * 参数：单据PK,操作员，公司，登录日期 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * 
	 * 采用ForwardBillDMO.isHaveForwardBill(String sCurBillType,String
	 * sCurBillPK)判断有无下游单据。 修改该方法，多传递一个参数：单据类型。 邵兵 on Jun 6, 2005
	 * 不建议这样传递参数：方法不便于扩展。
	 * 
	 */
	public boolean cancelSignCheck(String sBillPK, String sRegisterID,
			String sCorpID, String sCurDate, String sCurBillType,Boolean bOnroadflag)
			throws BusinessException, Exception {
		// NOW,we have powerful ts check ,this check is needless.
		// 2003-12-06 业务检查还是需要的
		// if (true)
		// return true;

		GeneralBillVO voBill = new GeneralBillVO();
		GeneralBillHeaderVO headvo = new GeneralBillHeaderVO();
		headvo.setCgeneralhid(sBillPK);
		voBill.setParentVO(headvo);

		// 增加对单据状态的检查 and lock
		new CheckBusiDMO().checkBillStatusFor(new GeneralBillVO[] { voBill },
				nc.vo.ic.pub.GenMethod.BillAction.CancelAudit);

		// sRegisterID用于权限检查
		// -------------------------------------
		//
		//
		// -------------------------------------

		boolean bOK = false;
		StringBuffer sbErrMsg = new StringBuffer();

		// // 检查表体是否有暂估或结算的行
		// Boolean bRet = isHaveEstimatedItems(sBillPK);
		// if (bRet != null && bRet.booleanValue())
		// sbErrMsg.append("该单据表体已经暂估或结算，不能取消签字。\n");
		// 检查 单据是否已取消签字--〉批签字时
		// 检查是否已签字。
		String sBillStatus = getBillStatus(sBillPK);
		if (sBillStatus != null) {
			if (sBillStatus.equals(BillStatus.AUDITED))
				sbErrMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
						.getStrByID("4008bill", "UPP4008bill-000351")/*
																		 * @res
																		 * "该单据已存货记账，不能取消签字。"
																		 */
						+ "\n");
			else if (sBillStatus.equals(BillStatus.DELETED))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000186")/* @res "此单据已被删除。" */);
			else if (sBillStatus.equals(BillStatus.FREE))
				sbErrMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
						.getStrByID("4008bill", "UPP4008bill-000352")/*
																		 * @res
																		 * "该单据当前未签字。"
																		 */
						+ "\n");
		} else
			sbErrMsg
					.append(nc.bs.ml.NCLangResOnserver.getInstance()
							.getStrByID("4008bill", "UPP4008bill-000353")/*
																			 * @res
																			 * "此单据状态未知。"
																			 */);

		Boolean bRet = isDmSigned(sCorpID, sBillPK);
		if (bRet != null && bRet.booleanValue() == true) {
			bOK = bRet.booleanValue();
			sbErrMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
					.getStrByID("4008bill", "UPP4008bill-000488")/*
																	 * @res
																	 * "该单据已经做过发运签收或者结算，不能取消签字！"
																	 */
					+ "\n");
		}

		// 判断有无下游单据 modified by Shaw on Jun 6,2005
		// bRet = isRewrited(sBillPK);
		boolean bHaveDownBill = isHaveForwardBill(sCurBillType, sBillPK,
				sCorpID,bOnroadflag);
		if (bHaveDownBill) {
			bOK = bHaveDownBill;
			sbErrMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
					.getStrByID("4008bill", "UPP4008bill-000489")/*
																	 * @res
																	 * "该单据已经生成下游单据，不能取消签字！"
																	 */
					+ "\n");
		}

		nc.itf.uap.sf.ICreateCorpQueryService s = (nc.itf.uap.sf.ICreateCorpQueryService) NCLocator
				.getInstance().lookup("nc.itf.uap.sf.ICreateCorpQueryService");

		if (s.isEnabled(sCorpID, "PO")) {
			String sql = " SELECT cadjustbillid FROM po_settle_feedetail WHERE cadjustbillid = '"
					+ sBillPK + "' and dr = 0";
			Object[] ret = (new SmartDMO()).selectBy2(sql);
			if (ret != null && ret.length > 0 && ret[0] != null) {
				Object[] row = (Object[]) ret[0];
				if (row != null && row.length > 0 && row[0] != null) {
					throw new BusinessException("已费用结算，不能取消签字");
				}
			}
		}

		// 检查子单据是否已经签字
		ArrayList alTempParam = new ArrayList();
		alTempParam.add(sBillPK);
		// 修改人：刘家清 修改日期：2008-5-9下午01:41:10 修改原因：增加来源类型
		ArrayList alRet = cancelSignCheckChldBill(alTempParam, sCurBillType);
		if (alRet == null) // something ERROR.
			sbErrMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
					.getStrByID("4008bill", "UPP4008bill-000355")/*
																	 * @res
																	 * "其它错误:子单据是否已经签字未知。"
																	 */
					+ "\n");
		else if (alRet.size() == 0) // OK
			bOK = true;
		else {
			StringBuffer sbMsg = new StringBuffer(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000187")/*
																				 * @res
																				 * "以下子单据："
																				 */);

			ArrayList alTemp = null;
			// 组织返回提示信息
			for (int i = 0; i < alRet.size(); i++) {
				alTemp = (ArrayList) alRet.get(i);
				if (alTemp != null && alTemp.size() >= 2
						&& alTemp.get(0) != null && alTemp.get(1) != null) {
					sbMsg.append("(");
					// 单据类型
					// zhx I18N

					sbMsg.append(alTemp.get(0));
					// zhx I18N

					sbMsg.append(",");
					// 单据号
					// zhx I18N

					// zhx I18N

					sbMsg.append(alTemp.get(1));
					sbMsg.append(")");
				}
			}

			sbMsg
					.append(nc.bs.ml.NCLangResOnserver.getInstance()
							.getStrByID("4008bill", "UPP4008bill-000188")/*
																			 * @res
																			 * "已经签字。请先取消签字这些单据。"
																			 */);
			sbErrMsg.append(sbMsg.toString());
		}
		if (sbErrMsg.toString().length() > 0)
			throw new BusinessException(sbErrMsg.toString());
		return bOK;
	}

	public ArrayList cancelSignCheckChldBill(ArrayList alParam)
			throws BusinessException, Exception {
		return cancelSignCheckChldBill(alParam, null);
	}

	/**
	 * 创建者：王乃军 功能：取消签字（记账）检查功能子单据是否已经签字 返回： -->new ArrayList():没有签字
	 * -->返回已经签字的[[子单据的类型、单据号][ ]] -->null 错误
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO 修改人：刘家清
	 *            修改日期：2008-5-9下午01:42:58 修改原因：增加来源单据类型
	 */
	public ArrayList cancelSignCheckChldBill(ArrayList alParam,
			String sCurBillType) throws BusinessException, Exception {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"cancelSignCheckChldBill", new Object[] { alParam });
		/** ********************************************************** */
		if (alParam == null || alParam.size() == 0 || alParam.get(0) == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000184")/*
																				 * @res
																				 * "取消签字检查参数错误！"
																				 */);
		// 必须的返回值初始化
		ArrayList alRet = new ArrayList();
		// 单据PK
		String sBillPK = alParam.get(0).toString();
		// 读存货数据
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000189")/*
																				 * @res
																				 * "取消签字检查参数错误！无单据PK。"
																				 */);

		StringBuffer sbSql = new StringBuffer();
		// sbSql.append(" SELECT DISTINCT
		// h.cgeneralhid,h.pk_corp,h.cbilltypecode,bt.billtypename AS
		// cbilltypename,
		// h.vbillcode,h.dbilldate,cregister,h.daccountdate,cauditorid,h.dauditdate
		// \n");
		sbSql
				.append(" SELECT DISTINCT bt.billtypename AS cbilltypename, h.vbillcode \n");

		sbSql
				.append(" FROM ic_general_h h INNER JOIN ic_general_b b ON h.cgeneralhid=b.cgeneralhid \n");
		sbSql
				.append(" LEFT OUTER JOIN bd_billtype bt ON bt.pk_billtypecode=h.cbilltypecode \n");
		sbSql.append(" WHERE h.dr=0 and b.csourcebillhid='");
		sbSql.append(sBillPK.trim());
		sbSql.append("'");
		if (null != sCurBillType && !"".equals(sCurBillType.trim()))
			sbSql.append(" and b.csourcetype = '" + sCurBillType.trim() + "' ");
		sbSql
				.append(" AND (cregister IS NOT NULL AND daccountdate IS NOT NULL OR cauditorid IS NOT NULL AND dauditdate IS NOT NULL)  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			ArrayList alTemp = null;
			while (rs.next()) {
				alTemp = new ArrayList();
				// 单据类型
				alTemp.add(rs.getString(1));
				// 单据号
				alTemp.add(rs.getString(2));
				// 增到返回结果
				alRet.add(alTemp);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
				throw e;
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {
				throw e;
			}
		}
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"cancelSignCheckChldBill", new Object[] { alParam });
		return alRet;
	}

	/**
	 * 
	 * 注意保持次check 和 GeneralBillBO中的check 一致
	 * 
	 * 
	 * 
	 * 此处插入方法说明。 创建日期：(2001-7-5 14:22:41)
	 * 
	 * @param vo
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 * @exception java.rmi.RemoteException
	 *                异常说明。
	 */
	public void check(GeneralBillVO vo) throws nc.vo.pub.BusinessException,
			Exception {
		// CheckDMO aCheck=new CheckDMO();
		// try {
		// if (vo.getHeaderVO().getStatus() == VOStatus.DELETED) {
		// //操作员权限
		// aCheck.checkOperatorBusiness(vo);
		// //现存量校验负结存，辅计量
		// aCheck.checkInvQty(vo);
		// //出库指定入库单的结存检查
		// aCheck.checkInKeep(vo);
		// //货位
		// aCheck.checkLocator(vo);
		// } else {

		// //操作员权限
		// aCheck.checkOperatorBusiness(vo);
		// //库管员权限
		// aCheck.checkWHManager(vo);
		// //失效日期
		// aCheck.checkInvidateDate(vo);
		// //现存量校验负结存，辅计量
		// aCheck.checkInvQty(vo);
		// //货位
		// aCheck.checkLocator(vo);
		// //出库指定入库单的结存检查
		// aCheck.checkInKeep(vo);
		// //检查库存组织---存货的对应关系
		// aCheck.checkCalBodyInv(vo);
		// }

		// } catch (nc.vo.pub.BusinessException be) {
		// throw be;

		// } catch (Exception e) {
		// // reportException(e);
		// throw e;
		// }

	}

	/**
	 * 创建者：王乃军 功能：解析关联单据信息，结果以异常的形式抛出。 参数： 返回： 例外： 日期：(2001-10-18 11:46:08)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void checkBillInfo(ArrayList alBillInfo, String sMsgHeader,
			String sMsgTail) throws BusinessException {

		String sMsg = parseBillInfo(alBillInfo, sMsgHeader, sMsgTail);
		if (sMsg != null && sMsg.trim().length() > 0)
			throw new BusinessException(sMsg.toString());

	}

	/**
	 * 创建者：余大英 功能：复制单据，支持数据挖掘; 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public void copyBill(GeneralBillVO voBill) throws BusinessException {

		try {
			/** ********************************************************** */
			// 保留的系统管理接口：
			beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyBill",
					new Object[] { voBill });
			/** ********************************************************** */
			if (voBill == null)
				return;
			setBillPrimaryKeysForCopy(voBill);
			// 复制表头：
			GeneralBillHeaderVO hvo = copyHeader((GeneralBillHeaderVO) voBill
					.getParentVO());

			String sNewHeadPK = hvo.getPrimaryKey();
			String sCorpID = hvo.getPk_corp();
			// 复制表体各项：(包含bb1,bb2)
			GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
					.getChildrenVO();
			// queryBillItemForCopy(cgeneralhid);

			if (voItems != null && voItems.length > 0) {

				copyItem(voItems, sNewHeadPK, sCorpID);
				// bb1货位

				copyItembb1(voItems, sCorpID);
				// bb2序列号

				copyItembb2(voItems, sCorpID);
				// //复制bb3，结算数据

				copyItembb3(voItems, sNewHeadPK, sCorpID);

			}

		} catch (Exception e) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000190")/*
																				 * @res
																				 * "复制单据错误："
																				 */
					+ e.getMessage());
		}
		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyBill",
				new Object[] { voBill });
		/** ********************************************************** */

		return;

	}

	/**
	 * @author:余大英 向数据库插入一个VO对象。
	 * 
	 * 创建日期：(2001-5-14)
	 * @param node
	 *            nc.vo.ic.ic201.GeneralHHeaderVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	protected GeneralBillHeaderVO copyHeader(GeneralBillHeaderVO voHeader)
			throws java.sql.SQLException, nc.bs.pub.SystemException,
			BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyHeader",
				new Object[] { voHeader });
		/** ********************************************************** */

		String key = null;
		try {
			// set PK fields:
			// 2003-06-10预置pk
			if (voHeader.getCgeneralhid() == null) {
				key = getOID(voHeader.getPk_corp());
				voHeader.setCgeneralhid(key);
			} else
				key = voHeader.getCgeneralhid();
			voHeader.setStatus(VOStatus.NEW);
			SmartDMO dmo = new SmartDMO();
			dmo.maintain(voHeader);
			String sql = "update ic_general_h set dr=1 where cgeneralhid=?";
			ArrayList alValue = new ArrayList();
			alValue.add(key);
			ArrayList alType = new ArrayList();
			alType.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
			dmo.executeUpdate(sql, alValue, alType);

		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyHeader",
				new Object[] { voHeader });
		/** ********************************************************** */
		voHeader.setCgeneralhid(key);
		return voHeader;
	}

	/**
	 * @author:余大英 向数据库插入一个VO对象。
	 * 
	 * 创建日期：(2001-5-14)
	 * @param node
	 *            nc.vo.ic.ic201.GeneralHHeaderVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	protected GeneralBillHeaderVO copyHeader(String cgeneralhid)
			throws Exception {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyHeader",
				new Object[] { cgeneralhid });
		/** ********************************************************** */

		GeneralBillHeaderVO voHeader = queryBillHead(cgeneralhid);

		String key = null;

		try {

			key = getOID(voHeader.getPk_corp());
			GeneralBillHeaderVO voCopy = (GeneralBillHeaderVO) voHeader.clone();
			voCopy.setStatus(VOStatus.NEW);
			voCopy.setCgeneralhid(key);
			SmartDMO dmo = new SmartDMO();
			dmo.maintain(voHeader);
			String sql = "update ic_general_h set dr=1 where cgeneralhid=?";
			ArrayList alValue = new ArrayList();
			alValue.add(key);
			ArrayList alType = new ArrayList();
			alType.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
			dmo.executeUpdate(sql, alValue, alType);
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyHeader",
				new Object[] { cgeneralhid });
		/** ********************************************************** */
		voHeader.setCgeneralhid(key);
		return voHeader;
	}

	/**
	 * 创建者：余大英 功能：复制单据行，支持数据挖掘 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	String[] copyItem(GeneralBillItemVO[] voItem, String cgeneralhid,
			String sCorpID) throws java.sql.SQLException,
			nc.bs.pub.SystemException, BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItem",
				new Object[] { voItem, cgeneralhid, sCorpID });
		/** ********************************************************** */
		String[] key = null;
		try {
			String[] aryNewOID = new String[voItem.length];
			for (int i = 0; i < voItem.length; i++) {
				if (voItem[i].getCgeneralbid() == null) {
					aryNewOID[i] = getOID(sCorpID);
					voItem[i].setCgeneralbid(aryNewOID[i]);
				} else
					aryNewOID[i] = voItem[i].getCgeneralbid();
				voItem[i].setStatus(VOStatus.NEW);
			}
			// 用于返回
			key = aryNewOID;
			SmartDMO dmo = new SmartDMO();
			dmo.maintain(voItem);
			String sql = "update ic_general_b set dr=1 where cgeneralhid=?";
			ArrayList alValue = new ArrayList();
			alValue.add(cgeneralhid);
			ArrayList alType = new ArrayList();
			alType.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
			dmo.executeUpdate(sql, alValue, alType);

		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItem",
				new Object[] { voItem, cgeneralhid, sCorpID });
		/** ********************************************************** */

		return key;
	}

	/**
	 * 创建者：余大英 功能：复制货位数据，支持数据挖掘 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	void copyItembb1(GeneralBillItemVO[] voItems, String sCorpID)
			throws java.sql.SQLException, nc.bs.pub.SystemException,
			BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItem",
				new Object[] { voItems, sCorpID });
		/** ********************************************************** */

		// GeneralBillItemVO voGeneralBillItem=queryBillItem(cgeneralbid);
		String sql = "insert into ic_general_bb1(cgeneralbb1,cgeneralbid, cspaceid,ninspacenum, ninspaceassistnum, noutspacenum,noutspaceassistnum,dr) values(?, ?, ?, ?, ?, ?, ?,1)";

		// String[] keys = null;
		CrossDBConnection con = null;
		PreparedStatement stmt = null;

		// 组织全部的LocatorVO
		long ITime = System.currentTimeMillis();
		// int count = 0;
		ArrayList alVOs = new ArrayList();
		for (int i = 0; i < voItems.length; i++) {
			LocatorVO[] voLocators = voItems[i].getLocator();
			// count = count + voLocators.length;
			if (voLocators != null && voLocators.length > 0) {
				ArrayList al = new ArrayList();
				al.add(0, voLocators);
				al.add(1, voItems[i].getCgeneralbid());
				alVOs.add(al);
			}

		}
		nc.vo.scm.pub.SCMEnv.showTime(ITime, "组织全部的LocatorVO");
		if (alVOs == null || alVOs.size() <= 0)
			return;

		try {
			con = (CrossDBConnection) getConnection();
			stmt = prepareStatement(con, sql);
			// set PK fields:
			// keys[i] = getOID(sCorpID);
			// 2003-06-10预置pk
			ITime = System.currentTimeMillis();
			for (int j = 0; j < alVOs.size(); j++) {
				ArrayList al = (ArrayList) alVOs.get(j);
				LocatorVO[] svoLocators = (LocatorVO[]) al.get(0);
				String cgeneralbid = (String) al.get(1);
				for (int i = 0; i < svoLocators.length; i++) {
					LocatorVO vo = svoLocators[i];
					String key = new String();
					if (vo.getAttributeValue("cgeneralbb1") == null) {
						key = getOID(sCorpID);
						vo.setAttributeValue("cgeneralbb1", key);
					} else
						key = (String) vo.getAttributeValue("cgeneralbb1");

					stmt.setString(1, key);

					// set non PK fields:
					stmt.setString(2, cgeneralbid);

					if (vo.getCspaceid() == null) {
						stmt.setNull(3, Types.CHAR);
					} else {
						stmt.setString(3, vo.getCspaceid());
					}

					if (vo.getNinspacenum() == null) {
						stmt.setNull(4, Types.INTEGER);
					} else {
						stmt.setBigDecimal(4, vo.getNinspacenum()
								.toBigDecimal());
					}

					if (vo.getNinspaceassistnum() == null) {
						stmt.setNull(5, Types.INTEGER);
					} else {
						stmt.setBigDecimal(5, vo.getNinspaceassistnum()
								.toBigDecimal());
					}
					if (vo.getNoutspacenum() == null) {
						stmt.setNull(6, Types.INTEGER);
					} else {
						stmt.setBigDecimal(6, vo.getNoutspacenum()
								.toBigDecimal());
					}

					if (vo.getNoutspaceassistnum() == null) {
						stmt.setNull(7, Types.INTEGER);
					} else {
						stmt.setBigDecimal(7, vo.getNoutspaceassistnum()
								.toBigDecimal());
					}
					executeUpdate(stmt);

				}
			}
			executeBatch(stmt);
			nc.vo.scm.pub.SCMEnv.showTime(ITime, "copyItem : executeBatch");
			//

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItem",
				new Object[] { voItems, sCorpID });
		/** ********************************************************** */

		// return keys;
	}

	/**
	 * 创建者：余大英 功能：复制单据序列号数据，支持数据挖掘 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	String copyItembb2(GeneralBillItemVO[] voItems, String sCorpID)
			throws java.sql.SQLException, nc.bs.pub.SystemException,
			BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItembb2",
				new Object[] { voItems, sCorpID });
		/** ********************************************************** */

		// GeneralBillItemVO voGeneralBillItem=queryBillItem(cgeneralbid);
		String sql = "insert into ic_general_bb2( cgeneralbid, cserialid, vserialcode, cwarehouseid, cinventoryid, cproviderid, vfree1, vfree2, vfree3, vfree4, vfree5, vfree6, vfree7, vfree8, vfree9, vfree10, cspaceid, vbatchcode, ccustomerid, cinbilltypecode, vinbillcode, cinbillheadid, cinbillbodyid, coutbilltype, voutbillcode, coutbillheadid, coutbillbodyid,dr) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,1)";

		// 组织全部的SerialVO
		long ITime = System.currentTimeMillis();
		// int count = 0;
		ArrayList alVOs = new ArrayList();
		for (int i = 0; i < voItems.length; i++) {
			SerialVO[] votmpSerials = voItems[i].getSerial();
			// count = count + voLocators.length;
			if (votmpSerials != null && votmpSerials.length > 0) {
				ArrayList al = new ArrayList();
				al.add(0, votmpSerials);
				al.add(1, voItems[i].getCgeneralbid());
				alVOs.add(al);
			}

		}
		nc.vo.scm.pub.SCMEnv.showTime(ITime, "组织全部的SerialVO");
		if (alVOs == null || alVOs.size() <= 0)
			return null;

		CrossDBConnection con = null;
		PreparedStatement stmt = null;
		try {
			con = (CrossDBConnection) getConnection();
			stmt = prepareStatement(con, sql);
			ITime = System.currentTimeMillis();
			for (int k = 0; k < alVOs.size(); k++) {
				ArrayList al = (ArrayList) alVOs.get(k);
				SerialVO[] voSerials = (SerialVO[]) al.get(0);
				String cgeneralbid = (String) al.get(1);
				for (int i = 0; i < voSerials.length; i++) {
					SerialVO voSerial = voSerials[i];
					stmt.setString(1, cgeneralbid);
					String key = null;
					// set PK fields:
					// key = getOID(sCorpID);
					// 2003-06-10预置pk
					if (voSerial.getCserialid() == null) {
						key = getOID(sCorpID);
						voSerial.setCserialid(key);
					} else
						key = voSerial.getCserialid();

					// if (voSerial.getCserialid() == null) {
					// stmt.setNull(2, Types.CHAR);
					// } else {
					stmt.setString(2, key); // voSerial.getCserialid());
					// }
					// set non PK fields:
					// set non PK fields:
					if (voSerial.getVserialcode() == null) {
						stmt.setNull(3, Types.CHAR);
					} else {
						stmt.setString(3, voSerial.getVserialcode());
					}
					if (voSerial.getCwarehouseid() == null) {
						stmt.setNull(4, Types.CHAR);
					} else {
						stmt.setString(4, voSerial.getCwarehouseid());
					}
					if (voSerial.getCinventoryid() == null) {
						stmt.setNull(5, Types.CHAR);
					} else {
						stmt.setString(5, voSerial.getCinventoryid());
					}
					if (voSerial.getCproviderid() == null) {
						stmt.setNull(6, Types.CHAR);
					} else {
						stmt.setString(6, voSerial.getCproviderid());
					}
					if (voSerial.getVfree1() == null) {
						stmt.setNull(7, Types.CHAR);
					} else {
						stmt.setString(7, voSerial.getVfree1());
					}
					if (voSerial.getVfree2() == null) {
						stmt.setNull(8, Types.CHAR);
					} else {
						stmt.setString(8, voSerial.getVfree2());
					}
					if (voSerial.getVfree3() == null) {
						stmt.setNull(9, Types.CHAR);
					} else {
						stmt.setString(9, voSerial.getVfree3());
					}
					if (voSerial.getVfree4() == null) {
						stmt.setNull(10, Types.CHAR);
					} else {
						stmt.setString(10, voSerial.getVfree4());
					}
					if (voSerial.getVfree5() == null) {
						stmt.setNull(11, Types.CHAR);
					} else {
						stmt.setString(11, voSerial.getVfree5());
					}
					if (voSerial.getVfree6() == null) {
						stmt.setNull(12, Types.CHAR);
					} else {
						stmt.setString(12, voSerial.getVfree6());
					}
					if (voSerial.getVfree7() == null) {
						stmt.setNull(13, Types.CHAR);
					} else {
						stmt.setString(13, voSerial.getVfree7());
					}
					if (voSerial.getVfree8() == null) {
						stmt.setNull(14, Types.CHAR);
					} else {
						stmt.setString(14, voSerial.getVfree8());
					}
					if (voSerial.getVfree9() == null) {
						stmt.setNull(15, Types.CHAR);
					} else {
						stmt.setString(15, voSerial.getVfree9());
					}
					if (voSerial.getVfree10() == null) {
						stmt.setNull(16, Types.CHAR);
					} else {
						stmt.setString(16, voSerial.getVfree10());
					}
					if (voSerial.getCspaceid() == null) {
						stmt.setNull(17, Types.CHAR);
					} else {
						stmt.setString(17, voSerial.getCspaceid());
					}
					if (voSerial.getVbatchcode() == null) {
						stmt.setNull(18, Types.CHAR);
					} else {
						stmt.setString(18, voSerial.getVbatchcode());
					}
					if (voSerial.getCcustomerid() == null) {
						stmt.setNull(19, Types.CHAR);
					} else {
						stmt.setString(19, voSerial.getCcustomerid());
					}
					if (voSerial.getCinbilltypecode() == null) {
						stmt.setNull(20, Types.CHAR);
					} else {
						stmt.setString(20, voSerial.getCinbilltypecode());
					}
					if (voSerial.getVinbillcode() == null) {
						stmt.setNull(21, Types.CHAR);
					} else {
						stmt.setString(21, voSerial.getVinbillcode());
					}
					if (voSerial.getCinbillheadid() == null) {
						stmt.setNull(22, Types.CHAR);
					} else {
						stmt.setString(22, voSerial.getCinbillheadid());
					}
					if (voSerial.getCinbillbodyid() == null) {
						stmt.setNull(23, Types.CHAR);
					} else {
						stmt.setString(23, voSerial.getCinbillbodyid());
					}
					if (voSerial.getCoutbilltype() == null) {
						stmt.setNull(24, Types.CHAR);
					} else {
						stmt.setString(24, voSerial.getCoutbilltype());
					}
					if (voSerial.getVoutbillcode() == null) {
						stmt.setNull(25, Types.CHAR);
					} else {
						stmt.setString(25, voSerial.getVoutbillcode());
					}
					if (voSerial.getCoutbillheadid() == null) {
						stmt.setNull(26, Types.CHAR);
					} else {
						stmt.setString(26, voSerial.getCoutbillheadid());
					}
					if (voSerial.getCoutbillbodyid() == null) {
						stmt.setNull(27, Types.CHAR);
					} else {
						stmt.setString(27, voSerial.getCoutbillbodyid());
					}
					executeUpdate(stmt);
					//
				}
			}
			executeBatch(stmt);
			nc.vo.scm.pub.SCMEnv.showTime(ITime, "copyItem : executeBatch");
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItembb2",
				new Object[] { voItems, sCorpID });
		/** ********************************************************** */

		return null;
	}

	/**
	 * 创建者：余大英 功能：复制单据结算数据，支持数据挖掘 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	String copyItembb3(GeneralBillItemVO[] voItems, String cgeneralhid,
			String sCorpID) throws java.sql.SQLException,
			nc.bs.pub.SystemException, BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItembb3",
				new Object[] { voItems, cgeneralhid, sCorpID });
		/** ********************************************************** */

		// GeneralBillItemVO voGeneralBillItem=queryBillItem(cgeneralbid);
		String sql =
		// "insert into ic_general_bb3 (cgeneralbb3, cgeneralhid, cgeneralbid)
		// values(?, ?, ? ) ";
		"insert into ic_general_bb3 (cgeneralbb3, cgeneralhid, cgeneralbid, naccountmny, naccountnum2, caccountunitid, naccountnum1, nsignnum, npprice, npmoney, nmaterialmoney,ndmsignnum,nrsvnum1,nrsvnum2,cpk1,cpk2,vrsv1,vrsv2,dr) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,? ,? ,? ,? ,? ,? ,1) ";

		// 组织全部的SettlementVO
		long ITime = System.currentTimeMillis();
		ArrayList alVOs = new ArrayList();
		for (int i = 0; i < voItems.length; i++) {
			nc.vo.ic.pub.settlement.SettlementVO[] votmpSets = voItems[i]
					.getBB3VO();
			if (votmpSets != null && votmpSets.length > 0) {
				ArrayList al = new ArrayList();
				al.add(0, votmpSets);
				al.add(1, voItems[i].getCgeneralbid());
				alVOs.add(al);
			}

		}
		nc.vo.scm.pub.SCMEnv.showTime(ITime, "组织全部的SettlementVO");
		if (alVOs == null || alVOs.size() <= 0)
			return null;

		CrossDBConnection con = null;
		PreparedStatement stmt = null;
		try {
			con = (CrossDBConnection) getConnection();
			stmt = prepareStatement(con, sql);
			ITime = System.currentTimeMillis();
			for (int k = 0; k < alVOs.size(); k++) {
				ArrayList al = (ArrayList) alVOs.get(k);
				nc.vo.ic.pub.settlement.SettlementVO[] voSets = (nc.vo.ic.pub.settlement.SettlementVO[]) al
						.get(0);
				String cgeneralbid = (String) al.get(1);
				for (int i = 0; i < voSets.length; i++) {
					nc.vo.ic.pub.settlement.SettlementVO settlement = voSets[i];
					// key = getOID(sCorpID);
					// 2003-06-10预置pk
					String key = null;
					if (settlement.getCgeneralbb3() == null) {
						key = getOID(sCorpID);
						settlement.setCgeneralbb3(key);
					} else
						key = settlement.getCgeneralbb3();

					// set PK fields:
					stmt.setString(1, key);
					// set non PK fields:
					if (cgeneralhid == null) {
						stmt.setNull(2, Types.CHAR);
					} else {
						stmt.setString(2, cgeneralhid);
					}
					if (cgeneralbid == null) {
						stmt.setNull(3, Types.CHAR);
					} else {
						stmt.setString(3, cgeneralbid);
					}
					/*
					 * stmt.setBigDecimal(4, new BigDecimal("0"));
					 * stmt.setBigDecimal(5, new BigDecimal("0"));
					 * stmt.setNull(6, Types.CHAR); stmt.setBigDecimal(7, new
					 * BigDecimal("0")); stmt.setBigDecimal(8, new
					 * BigDecimal("0")); stmt.setBigDecimal(9, new
					 * BigDecimal("0")); stmt.setBigDecimal(10, new
					 * BigDecimal("0")); stmt.setBigDecimal(11, new
					 * BigDecimal("0")); //stmt.setBigDecimal(12, new
					 * BigDecimal("0")); //stmt.setBigDecimal(13, new
					 * BigDecimal("0")); //stmt.setBigDecimal(14, new
					 * BigDecimal("0"));
					 */

					if (settlement.getNsettlemny1() == null) {
						stmt.setNull(4, Types.INTEGER);
					} else {
						stmt.setBigDecimal(4, settlement.getNsettlemny1()
								.toBigDecimal());
					}
					if (settlement.getNaccountnum2() == null) {
						stmt.setNull(5, Types.INTEGER);
					} else {
						stmt.setBigDecimal(5, settlement.getNaccountnum2()
								.toBigDecimal());
					}
					if (settlement.getCaccountunitid() == null) {
						stmt.setNull(6, Types.CHAR);
					} else {
						stmt.setString(6, settlement.getCaccountunitid());
					}
					if (settlement.getNsettlenum1() == null) {
						stmt.setNull(7, Types.INTEGER);
					} else {
						stmt.setBigDecimal(7, settlement.getNsettlenum1()
								.toBigDecimal());
					}
					if (settlement.getNsignnum() == null) {
						stmt.setNull(8, Types.INTEGER);
					} else {
						stmt.setBigDecimal(8, settlement.getNsignnum()
								.toBigDecimal());
					}
					if (settlement.getNpprice() == null) {
						stmt.setNull(9, Types.INTEGER);
					} else {
						stmt.setBigDecimal(9, settlement.getNpprice()
								.toBigDecimal());
					}
					if (settlement.getNpmoney() == null) {
						stmt.setNull(10, Types.INTEGER);
					} else {
						stmt.setBigDecimal(10, settlement.getNpmoney()
								.toBigDecimal());
					}
					if (settlement.getNmaterialmoney() == null) {
						stmt.setNull(11, Types.INTEGER);
					} else {
						stmt.setBigDecimal(11, settlement.getNmaterialmoney()
								.toBigDecimal());
					}
					// if (settlement.getNaccountassistnum2() == null) {
					// stmt.setNull(14, Types.INTEGER);
					// } else {
					// stmt.setBigDecimal(14,
					// settlement.getNaccountassistnum2().toBigDecimal());
					// }
					// if (settlement.getNaccountassistnum1() == null) {
					// stmt.setNull(15, Types.INTEGER);
					// } else {
					// stmt.setBigDecimal(15,
					// settlement.getNaccountassistnum1().toBigDecimal());
					// }
					// if (settlement.getNsignassistnum() == null) {
					// stmt.setNull(16, Types.INTEGER);
					// } else {
					// stmt.setBigDecimal(16,
					// settlement.getNsignassistnum().toBigDecimal());
					// }
					if (settlement.getNdmsignnum() == null) {
						stmt.setNull(12, Types.INTEGER);
					} else {
						stmt.setBigDecimal(12, settlement.getNdmsignnum()
								.toBigDecimal());
					}
					if (settlement.getNrsvnum1() == null) {
						stmt.setNull(13, Types.INTEGER);
					} else {
						stmt.setBigDecimal(13, settlement.getNrsvnum1()
								.toBigDecimal());
					}
					if (settlement.getNrsvnum2() == null) {
						stmt.setNull(14, Types.INTEGER);
					} else {
						stmt.setBigDecimal(14, settlement.getNrsvnum2()
								.toBigDecimal());
					}
					if (settlement.getCpk1() == null) {
						stmt.setNull(15, Types.CHAR);
					} else {
						stmt.setString(15, settlement.getCpk1());
					}
					if (settlement.getCpk2() == null) {
						stmt.setNull(16, Types.CHAR);
					} else {
						stmt.setString(16, settlement.getCpk2());
					}
					if (settlement.getVrsv1() == null) {
						stmt.setNull(17, Types.VARCHAR);
					} else {
						stmt.setString(17, settlement.getVrsv1());
					}
					if (settlement.getVrsv2() == null) {
						stmt.setNull(18, Types.VARCHAR);
					} else {
						stmt.setString(18, settlement.getVrsv2());
					}
					executeUpdate(stmt);
				}
			}
			executeBatch(stmt);
			nc.vo.scm.pub.SCMEnv.showTime(ITime, "copyItembb3 : executeBatch");
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "copyItembb3",
				new Object[] { voItems, cgeneralhid, sCorpID });
		/** ********************************************************** */

		return null;
	}

	/**
	 * 创建者：王乃军 功能：删除单据， 返回：
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * 
	 * @param voBill
	 *            nc.voDeleteBill.ic.pub.bill.GeneralBillVO
	 */
	public final void deleteBill(String sBillPK) throws java.sql.SQLException,
			BusinessException, Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteBill",
				new Object[] { sBillPK });
		/** ********************************************************** */
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000162")/*
																				 * @res
																				 * "VO参数错误。"
																				 */);

		// 读入要删除的单据的所有单据行,读序列号，不读货位
		QryConditionVO qvo = new QryConditionVO(" head.cgeneralhid='" + sBillPK
				+ "'");
		qvo.setIntParam(0, GeneralBillVO.QRY_FULL_BILL_PURE);
		ArrayList alBill = queryBills(qvo);

		if (alBill == null || alBill.size() == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000191")/*
																				 * @res
																				 * "未查到当前的单据，可能已被删除。"
																				 */);

		// 读出的单据
		GeneralBillVO voBill = (GeneralBillVO) alBill.get(0);
		if (voBill == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000192")/*
																				 * @res
																				 * "查询的结果错误。"
																				 */);

		GeneralBillHeaderVO voHeader = voBill.getHeaderVO();
		// 检查是否已经签字了
		if (voHeader.getCregister() != null
				&& voHeader.getCregister().toString().trim().length() > 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000193")/*
																				 * @res
																				 * "此单据已签字！"
																				 */);

		// 复制单据
		// copyBill(sBillPK);

		// 单据体
		GeneralBillItemVO[] voaItem = voBill.getItemVOs();
		if (voaItem == null || voaItem.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000194")/*
																				 * @res
																				 * "删除查询的结果表体错误。"
																				 */);
		// 如果有子或相关单据 ，不能删除。如 借出单有了还回单，就不能删除了。除非先删子单据。
		// 公司ID
		// String sCorpID = voHeader.getPk_corp();

		// 关联单据
		ArrayList alChildrenBill = null;
		// 如果出库时指定入库单则需查子单据和相关单据。---〉param is moved to inv man doc
		// if (sTrackedBill != null && sTrackedBill.startsWith("Y"))
		// alChildrenBill = queryRelatedBillInfo(sBillPK);
		// else //否则只查子单据
		// alChildrenBill = queryChildrenBillInfo(sBillPK);

		// 如果有错，抛异常
		checkBillInfo(alChildrenBill,
				nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008bill",
						"UPP4008bill-000195")/* @res "本单据有如下相关单据:\n" */,
				nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008bill",
						"UPP4008bill-000196")/* @res "\n不能删除。" */);

		// queryAllBillItemByBillPK(sBillPK,true,false);
		// 序列号
		nc.bs.ic.pub.sn.SerialDMO sdmo = new nc.bs.ic.pub.sn.SerialDMO();
		// 货位
		nc.bs.ic.pub.locator.LocatorDMO ldmo = new nc.bs.ic.pub.locator.LocatorDMO();
		// bb3
		nc.bs.ic.pub.settlement.SettlementDMO stdmo = new nc.bs.ic.pub.settlement.SettlementDMO();
		// nc.bs.ic.pub.sn.SerialDMO sdmo = new nc.bs.ic.pub.sn.SerialDMO();
		// 记录序列号状态
		// 存在
		Vector vEx = new Vector();
		// 不存在
		Vector vNotEx = new Vector();
		// 还回
		Vector vRet = new Vector();
		// 出库
		Vector vOut = new Vector();
		// 冻结
		Vector vFreeze = new Vector();

		// 序列号
		SerialVO[] voasn = null;
		// 表体PK
		String sItemPK = null;
		for (int row = 0; row < voaItem.length; row++) {
			if (voaItem[row] != null) {
				// 设置为删除态
				voaItem[row].setStatus(VOStatus.DELETED);
				sItemPK = voaItem[row].getPrimaryKey();
				// 删货位
				ldmo.deleteLocatorsForCopy(sItemPK);
				// 删bb3
				stdmo.deleteBB3ForCopy(sItemPK);

				// 入库的有吗？---- 09 Oct ,wnj
				voasn = sdmo.queryAllInSnByBodyPK(sItemPK);
				// 有入库，删之
				if (voasn != null && voasn.length > 0) {
					voaItem[row].setSerial(voasn);
					cancelInSerialsForCopy(voBill.getHeaderVO(), voaItem[row],
							vEx, vNotEx, vRet, vOut, vFreeze);
				}
				// --------------------------------
				// 出库的有吗？
				voasn = sdmo.queryAllOutSnByBodyPK(sItemPK);
				// 有出库，取消之，
				if (voasn != null && voasn.length > 0) {
					voaItem[row].setSerial(voasn);
					cancelOutSerials(voBill.getHeaderVO(), voaItem[row], vEx,
							vNotEx, vRet, vOut);
				}
				// ---- 09 Oct ,wnj
			}
		}
		// 可能有的业务检查错误信息
		String sMsg = getSnHintMsg(vEx, vNotEx, vRet, vOut, vFreeze);
		if (sMsg != null && sMsg.length() > 0)
			throw new BusinessException(sMsg);
		// 删除表体
		deleteItemsForHeader(sBillPK);
		// 删除表头
		deleteHeader(sBillPK);

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteBill",
				new Object[] { sBillPK });
		/** ********************************************************** */
	}

	/**
	 * 采购调用的删除推式生成的采购入库单的方法。 功能： 参数： 返回： 例外： 日期：(2001-10-18 12:44:36)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void deleteBySourceID(String sourceHeadID[], String sSourceType)
			throws BusinessException, Exception {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"deleteBySourceID", new Object[] { sourceHeadID, sSourceType });
		/** ********************************************************** */
		if (sourceHeadID == null || sSourceType == null) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return;
		}
		StringBuffer sbSql2 = new StringBuffer(
				"select cgeneralhid from ic_general_b where dr=0  AND ");
		StringBuffer sbWhere = new StringBuffer("  csourcetype=? "); // AND
																		// csourcebillhid
																		// IN
																		// (");
		// 使用临时表
		sbWhere.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"csourcebillhid", sourceHeadID));
		// 循环写入条件
		// for (int i = 0; i < sourceHeadID.length; i++) {
		// if (sourceHeadID[i] != null && sourceHeadID[i] != null) {
		// sbWhere.append("'");
		// sbWhere.append(sourceHeadID[i]);
		// sbWhere.append("',");
		// }
		// //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
		// if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT
		// == 0) {
		// sbWhere.append(" '' ) OR csourcebillhid IN ( ");
		// }
		// }
		// 加''是为了上面循环结果中最后的","
		// 因为ID不可能为'',所以可行。
		// sbWhere.append(" '' ) )");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			// --------2--------
			stmt = con.prepareStatement(sbSql2.append(sbWhere).toString());
			stmt.setString(1, sSourceType);
			rs = stmt.executeQuery();
			if (rs.next())
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000197")/*
														 * @res
														 * "请先删除相关的库存单据，然后再试。"
														 */);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteBySourceID",
				new Object[] { sourceHeadID, sSourceType });
		/** ********************************************************** */
	}

	/**
	 * 采购调用的删除推式生成的采购入库单的方法。 功能： 参数： 返回： 例外： 日期：(2001-10-18 12:44:36)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public void deleteBySourceID_backup(String sourceHeadID[],
			String sSourceType) throws BusinessException, Exception {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"deleteBySourceID_backup", new Object[] { sourceHeadID,
						sSourceType });
		/** ********************************************************** */
		if (sourceHeadID == null || sSourceType == null) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return;
		}
		StringBuffer sbSql = new StringBuffer(
				"update ic_general_b  set dr=1 where dr=0 AND (");
		StringBuffer sbSql2 = new StringBuffer(
				"update ic_general_h set dr=1 where dr=0 AND cgeneralhid IN (select cgeneralhid from ic_general_b where dr=1  AND ");
		StringBuffer sbWhere = new StringBuffer("  csourcetype=? ");// AND
																	// csourcebillhid
																	// IN (");

		// 使用临时表
		sbWhere.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"csourcebillhid", sourceHeadID));
		// 循环写入条件
		// for (int i = 0; i < sourceHeadID.length; i++) {
		// if (sourceHeadID[i] != null && sourceHeadID[i] != null) {
		// sbWhere.append("'");
		// sbWhere.append(sourceHeadID[i]);
		// sbWhere.append("',");
		// }
		// //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
		// if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT
		// == 0) {
		// sbWhere.append(" '' ) OR csourcebillhid IN ( ");
		// }
		// }
		// 加''是为了上面循环结果中最后的","
		// 因为ID不可能为'',所以可行。
		// sbWhere.append(" '' ) )");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.append(sbWhere).toString());
			stmt.setString(1, sSourceType);
			stmt.executeUpdate();
			// --------2--------
			stmt = con.prepareStatement(sbSql2.append(sbWhere).append(")")
					.toString());
			stmt.setString(1, sSourceType);
			stmt.executeUpdate();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"deleteBySourceID_backup", new Object[] { sourceHeadID,
						sSourceType });
		/** ********************************************************** */
	}

	/**
	 * 创建者：王乃军 功能：删除源单据是指定PK的单据， 返回： -->返回删除的[[子单据的类型、单据号][ ]]
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	protected ArrayList deleteChildrenBillXXX(String sParentBillPK)
			throws BusinessException, Exception {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"cancelSignCheckChldBillXXX", new Object[] { sParentBillPK });
		/** ********************************************************** */
		if (sParentBillPK == null) {
			nc.vo.scm.pub.SCMEnv.out("bill pk null ERR.");
			return null;
		}
		// 可能有的业务检查错误信息
		StringBuffer sbMsg = new StringBuffer();

		// 检查子单据
		ArrayList alParam = new ArrayList();
		alParam.add(sParentBillPK);
		ArrayList alChildrenBill = cancelSignCheckChldBill(alParam);
		// -->new ArrayList():没有签字
		// -->返回已经签字的[[子单据的类型、单据号][ ]]
		// -->null 错误
		if (alChildrenBill == null)
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000198")/* @res "子单据其它错误。\n" */);
		else if (alChildrenBill != null && alChildrenBill.size() > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000199")/* @res "子单据" */);
			// zhx I18N

			ArrayList alTempRet = null;
			for (int t = 0; t < alChildrenBill.size(); t++) {
				if (alChildrenBill.get(t) != null) {
					alTempRet = (ArrayList) alChildrenBill.get(t);

					if (alTempRet != null && alTempRet.size() >= 2) {
						sbMsg.append("(");
						sbMsg.append(alTempRet.get(0));
						sbMsg.append(",");
						sbMsg.append(alTempRet.get(1));
						sbMsg.append(")");
					}
				}

			}
			// zhx I18N

			sbMsg
					.append(nc.bs.ml.NCLangResOnserver.getInstance()
							.getStrByID("4008bill", "UPP4008bill-000200")/*
																			 * @res
																			 * "已经签字，请取消签字后再试！\n"
																			 */);
		}
		if (sbMsg.toString().length() > 0)
			throw new BusinessException(sbMsg.toString());

		ArrayList alRet = new ArrayList();
		// 这里直接删除了，未考虑子单据的被引用问题。
		String sql = "DELETE FROM ic_general_h WHERE cgeneralhid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sParentBillPK.trim());
			stmt.executeUpdate();
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"cancelSignCheckChldBillXXX", new Object[] { sParentBillPK });
		return alRet;
	}

	/**
	 * 根据主键在数据库中删除一个VO对象。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @param key
	 *            nc.vo.pub.oid.OID
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void deleteHeader(String sBillPK) throws java.sql.SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteHeader",
				new Object[] { sBillPK });
		/** ********************************************************** */
		String sql = "update ic_general_h set dr=1 where cgeneralhid = ?";

		// String sql = "delete from ic_general_h where cgeneralhid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sBillPK);
			stmt.executeUpdate();
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteHeader",
				new Object[] { sBillPK });
		/** ********************************************************** */
	}

	/**
	 * 仅用于修改单据时，删除表体 根据主键在数据库中删除一个VO对象。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @param key
	 *            nc.vo.pub.oid.OID
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	protected void deleteItem(String sBodyPK) throws java.sql.SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteItem",
				new Object[] { sBodyPK });
		/** ********************************************************** */
		// String sql = "update ic_general_b set dr=1 where cgeneralbid = ?";
		String sql = "delete from ic_general_b where cgeneralbid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sBodyPK);
			stmt.executeUpdate();
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteItem",
				new Object[] { sBodyPK });
		/** ********************************************************** */
	}

	/**
	 * 仅用于修改单据时，删除表体 根据主键在数据库中删除一个VO对象。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @param key
	 *            nc.vo.pub.oid.OID
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void deleteItemBatch(GeneralBillItemVO[] voItems)
			throws BusinessException {
		if (voItems == null || voItems.length == 0)
			return;
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteItemBatch",
				new Object[] { voItems });
		/** ********************************************************** */
		String sql = "update ic_general_b set dr=1 where cgeneralbid = ?";

		// String sql = "delete from ic_general_b where cgeneralbid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = prepareStatement(con, sql);
			for (int i = 0; i < voItems.length; i++) {

				stmt.setString(1, voItems[i].getCgeneralbid());
				executeUpdate(stmt);
			}
			executeBatch(stmt);
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "deleteItemBatch",
				new Object[] { voItems });
		/** ********************************************************** */
	}

	/**
	 * 仅用于删除整个单据 根据主键在数据库中删除一个VO对象。
	 * 
	 * 创建日期：(2001-6-12)
	 * 
	 * @param key
	 *            nc.vo.pub.oid.OID
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void deleteItemsForHeader(String headerKey) throws BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"deleteItemsForHeader", new Object[] { headerKey });
		/** ********************************************************** */

		String sql = "update ic_general_b set dr=1  where cgeneralhid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, headerKey);
			stmt.executeUpdate();
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"deleteItemsForHeader", new Object[] { headerKey });
		/** ********************************************************** */
	}

	/**
	 * 创建者：王乃军 功能：过滤多余的辅计量单位 参数： 返回： 例外： 日期：(2001-10-18 11:46:08)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	protected ArrayList filterUselessUOM(ArrayList alResultData) {
		if (alResultData == null || alResultData.size() == 0)
			return null;

		GeneralBillItemVO[] voaTempBillItem = null;
		for (int bill = 0; bill < alResultData.size(); bill++) {
			voaTempBillItem = ((GeneralBillVO) alResultData.get(bill))
					.getItemVOs();
			for (int item = 0; item < voaTempBillItem.length; item++) {
				// 如果辅计量单位为空，滤掉无用的换算率和是否固定换算率属性。
				if (voaTempBillItem[item].getCastunitid() == null
						|| voaTempBillItem[item].getCastunitid().trim()
								.length() == 0) {
					voaTempBillItem[item].setHsl(null);
					voaTempBillItem[item].setIsSolidConvRate(null);
				}
			}
		}

		return alResultData;
	}

	/**
	 * 创建者：王乃军 功能：过滤多余的辅计量单位 参数： 返回： 例外： 日期：(2001-10-18 11:46:08)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	protected GeneralBillItemVO[] filterUselessUOM(
			GeneralBillItemVO[] voaBillItem) {
		if (voaBillItem == null || voaBillItem.length == 0)
			return null;

		for (int item = 0; item < voaBillItem.length; item++) {
			// 如果辅计量单位为空，滤掉无用的换算率和是否固定换算率属性。
			if (voaBillItem[item].getCastunitid() == null
					|| voaBillItem[item].getCastunitid().trim().length() == 0) {
				voaBillItem[item].setHsl(null);
				voaBillItem[item].setIsSolidConvRate(null);
			}
		}

		return voaBillItem;
	}

	/**
	 * <p>
	 * 根据表头的主键查询属于本单据的表体pk。用于删除时
	 * <p>
	 * 创建日期：(2001-5-14)
	 * 
	 * @param key
	 *            ??dbFieldType??
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	protected Vector findAllBodyPK(String sBillPK) throws BusinessException {

		Vector vPK = new Vector();
		;
		String sql = "select   cgeneralbid from ic_general_b where dr=0 AND cgeneralhid ='"
				+ sBillPK + "' order by cgeneralbid ";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			rs = stmt.executeQuery();
			while (rs.next())
				vPK.addElement(rs.getString("cgeneralbid"));

		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return vPK;
	}

	/**
	 * 创建者：王乃军 功能：检查单据是否已签字（记账）。 参数： 返回：true：已签字 false：未签字 例外： 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public String getBillStatus(String sBillPK) throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getBillStatus",
				new Object[] { sBillPK });
		/** ********************************************************** */
		// 读存货数据
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000201")/*
																				 * @res
																				 * "检查单据是否签字时未传入单据ID."
																				 */);
		// 缺省未签字，。
		String sRet = BillStatus.FREE;
		String sSql = " SELECT cregister,cauditorid FROM ic_general_h WHERE dr=0 AND cgeneralhid=?";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql.toString());
			stmt.setString(1, sBillPK.trim());
			rs = stmt.executeQuery();
			// 无签字人id,表示未签字。
			if (rs.next()) {
				String cregister = rs.getString(1);
				String cauditorid = rs.getString(2);
				if ((cregister == null || cregister.trim().length() == 0)
						&& (cauditorid == null || cauditorid.trim().length() == 0))
					sRet = BillStatus.FREE;
				else if (cregister != null
						&& cregister.trim().length() > 0
						&& (cauditorid == null || cauditorid.trim().length() == 0))
					sRet = BillStatus.SIGNED;
				else if (cregister != null && cregister.trim().length() > 0
						&& cauditorid != null && cauditorid.trim().length() > 0)
					sRet = BillStatus.AUDITED;
				nc.vo.scm.pub.SCMEnv.out("reg=" + cregister + " ---> "
						+ cauditorid);

			} else
				// 如果找不到此单据,--->
				sRet = BillStatus.DELETED;

		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getBillStatus",
				new Object[] { sBillPK });
		/** ********************************************************** */
		return sRet;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return ArrayList String[0] hid; String[1] code
	 * @param
	 */
	private ArrayList getFirstBillCodes(String billtype, String subQry)
			throws BusinessException {
		if (billtype == null || subQry == null)
			return null;

		IBillType billType = BillTypeFactory.getInstance()
				.getBillType(billtype);
		// String sWhere=" in (select cfirstbillhid from ic_general_b where
		// cgeneralhid='"+cgeneralhid+"')";
		String sWhere = " in (" + subQry + ")";
		StringBuffer s = new StringBuffer("select ");
		if (billtype.equalsIgnoreCase("30") || billtype.equalsIgnoreCase("3A")) {
			s.append(" csaleid,vreceiptcode from so_sale where csaleid ");
		} else if (billtype.equalsIgnoreCase("31")) {
			s
					.append(" csaleid,vreceiptcode from so_salereceipt where csaleid ");

		} else if (billtype.equalsIgnoreCase("32")
				|| billtype.equalsIgnoreCase("3C")) {
			s
					.append(" csaleid,vreceiptcode from so_saleinvoice where csaleid ");

		} else if (billtype.equalsIgnoreCase("3U")
				|| billtype.equalsIgnoreCase("3V")) {
			s.append(" pk_apply,vreceiptcode from so_apply where pk_apply ");

		} else if (billtype.equalsIgnoreCase("21")) {
			s.append(" corderid,vordercode from po_order where corderid ");

		} else if (billtype.equalsIgnoreCase("23")) {
			s
					.append(" carriveorderid,varrordercode from po_arriveorder where carriveorderid ");

		} else if (billtype.equalsIgnoreCase("61")) {
			s.append(" corderid,vordercode from sc_order where corderid ");

		} else if (billtype.equalsIgnoreCase("A2")) {
			s.append(" pk_moid,scddh from mm_mo where pk_moid ");

		} else if (billtype.equalsIgnoreCase("A3")) {
			s.append(" pk_pickmid,bljhdh from mm_pickm where pk_pickmid ");

		} else if (billtype.equalsIgnoreCase("A4")) {
			s.append(" pk_wrid,djh from mm_wr where pk_wrid ");

		} else if (billtype.equalsIgnoreCase("41")
				|| billtype.equalsIgnoreCase("42")
				|| billtype.equalsIgnoreCase("49")
				|| billtype.equalsIgnoreCase("4H")
				|| billtype.equalsIgnoreCase("4Q")) {
			s
					.append(" cgeneralhid,vbillcode from ic_general_h where cgeneralhid ");

		} else if (billtype.equalsIgnoreCase("4K")
				|| billtype.equalsIgnoreCase("4L")
				|| billtype.equalsIgnoreCase("4M")
				|| billtype.equalsIgnoreCase("4N")
				|| billtype.equalsIgnoreCase("4R")) {
			s
					.append(" cspecialhid,vbillcode from ic_special_h where cspecialhid ");

		} else if (billtype.equalsIgnoreCase("4U")) {
			s
					.append(" callocationhid,vbillcode from ic_allocation_h where callocationhid ");
		} else if (billType.typeOf(ModuleCode.TO)) {
			s.append(" cbillid,vcode from to_bill where cbillid ");
		} else
			return null;
		s.append(sWhere);

		Connection con = null;
		PreparedStatement stmt = null;
		ArrayList alhidcode = new ArrayList();
		try {
			con = getConnection();
			stmt = con.prepareStatement(s.toString());
			ResultSet rs = stmt.executeQuery();
			String hid = null;
			String code = null;
			while (rs.next()) {
				hid = rs.getString(1);
				code = rs.getString(2);
				if (hid != null && code != null)
					alhidcode.add(new String[] { hid, code });

			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return alhidcode;
	}

	/**
	 * 创建者：王乃军 功能：读自由项 参数： 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	protected ArrayList getFreeItemData(ArrayList alResultData)
			throws BusinessException {
		// 查自由项
		if (alResultData == null || alResultData.size() == 0)
			return alResultData;
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		gm.setFreeItemVO(alResultData);
		return alResultData;

		// //读存货id
		// ArrayList alBodyPK = new ArrayList();
		// ArrayList alTemp = null;
		// ArrayList alFree = null;
		// GeneralBillItemVO[] voaTempBillItem = null;
		// Hashtable htid = new Hashtable();
		// String id = null;
		// for (int bill = 0; bill < alResultData.size(); bill++) {
		// voaTempBillItem = ((GeneralBillVO)
		// alResultData.get(bill)).getItemVOs();
		// for (int item = 0; item < voaTempBillItem.length; item++) {
		// id = voaTempBillItem[item].getCinventoryid();
		// //if (!htid.containsKey(id)
		// //&& voaItem[item].getFreeItemVO() != null
		// //&& !voaItem[item].getFreeItemVO().isNullValue()) {
		// //alBodyPK.add(id);
		// //htid.put(id, id);
		// //}
		// if (!htid.containsKey(id)) {
		// alBodyPK.add(id);
		// htid.put(id, id);
		// }
		// }
		// }

		// //读自由项
		// nc.bs.ic.pub.freeitem.DefdefDMO defdmo = new
		// nc.bs.ic.pub.freeitem.DefdefDMO();
		// Hashtable htFree = defdmo.queryFreeVOByInvIDsOnceAll1(alBodyPK);
		// FreeVO voBodyFree = null; //单据读出的free值
		// FreeVO voBasFree = null; //基础数据读出的free设置
		// for (int bill = 0; bill < alResultData.size(); bill++) {
		// voaTempBillItem = ((GeneralBillVO)
		// alResultData.get(bill)).getItemVOs();
		// for (int row = 0; row < voaTempBillItem.length; row++) {
		// voBodyFree = voaTempBillItem[row].getFreeItemVO();
		// if (htid.containsKey(voaTempBillItem[row].getCinventoryid())) {
		// voBasFree =
		// (FreeVO) ((FreeVO)
		// htFree.get(voaTempBillItem[row].getCinventoryid())).clone();
		// }

		// //置入def读出的free
		// if (voBodyFree != null && voBasFree != null)
		// for (int f = 1; f <= FreeVO.FREE_ITEM_NUM; f++) {
		// //nc.vo.scm.pub.SCMEnv.out("free"+f+"="+voBodyFree.getAttributeValue("vfree"+f));
		// voBasFree.setAttributeValue(
		// "vfree" + f,
		// voBodyFree.getAttributeValue("vfree" + f));
		// }
		// //完整的free
		// voaTempBillItem[row].setFreeItemVO(voBasFree);
		// //setItemVOFreeMgt(voaTempBillItem[row]);
		// }
		// }

		// return alResultData;
	}

	/**
	 * 创建者：王乃军 功能：读自由项 参数： 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	protected GeneralBillItemVO[] getFreeItemData(GeneralBillItemVO[] voaItem)
			throws BusinessException {
		try {
			// 查自由项
			if (voaItem == null || voaItem.length == 0)
				return voaItem;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			gm.setFreeItemVO((nc.vo.scm.ic.bill.FreeItemDeal[]) voaItem);
			return voaItem;
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}

		// //读存货id
		// ArrayList alBodyPK = new ArrayList();
		// ArrayList alTemp = null;
		// Hashtable htid = new Hashtable();
		// String id = null;
		// for (int item = 0; item < voaItem.length; item++) {
		// id = voaItem[item].getCinventoryid();
		// //if (!htid.containsKey(id)
		// //&& voaItem[item].getFreeItemVO() != null
		// //&& !voaItem[item].getFreeItemVO().isNullValue()) {
		// //alBodyPK.add(id);
		// //htid.put(id, id);
		// //}
		// if (!htid.containsKey(id)) {
		// alBodyPK.add(id);
		// htid.put(id, id);
		// }
		// }
		// if (alBodyPK == null || alBodyPK.size() == 0)
		// return voaItem;
		// //读自由项
		// nc.bs.ic.pub.freeitem.DefdefDMO defdmo = new
		// nc.bs.ic.pub.freeitem.DefdefDMO();
		// Hashtable htFree = defdmo.queryFreeVOByInvIDsOnceAll1(alBodyPK);
		// ArrayList alFree2 = null;
		// //写自由项

		// FreeVO voBodyFree = null; //单据读出的free值
		// FreeVO voBasFree = null; //基础数据读出的free设置
		// for (int row = 0; row < voaItem.length; row++) {
		// voBodyFree = voaItem[row].getFreeItemVO();
		// if (htFree.containsKey(voaItem[row].getCinventoryid())) {
		// voBasFree =
		// (FreeVO) ((FreeVO)
		// htFree.get(voaItem[row].getCinventoryid())).clone();

		// }
		// //置入def读出的free
		// if (voBodyFree != null && voBasFree != null)
		// for (int f = 1; f <= 10; f++) {
		// //nc.vo.scm.pub.SCMEnv.out("free"+f+"="+voBodyFree.getAttributeValue("vfree"+f));
		// voBasFree.setAttributeValue(
		// "vfree" + f,
		// voBodyFree.getAttributeValue("vfree" + f));
		// }
		// //完整的free
		// voaItem[row].setFreeItemVO(voBasFree);
		// //setItemVOFreeMgt(voaItem[row]);
		// }

		// return voaItem;
	}

	/**
	 * 创建者：王乃军 功能：读自由项 参数： 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	protected GeneralBillItemVO[] getFreeItemData_OLD(
			GeneralBillItemVO[] voaItem) throws Exception {
		// 查自由项
		if (voaItem == null || voaItem.length == 0)
			return voaItem;
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		gm.setFreeItemVO((nc.vo.scm.ic.bill.FreeItemDeal[]) voaItem);
		return voaItem;

		// //读存货id
		// ArrayList alBodyPK = new ArrayList();
		// ArrayList alTemp = null;
		// ArrayList alFree = null;
		// alTemp = new ArrayList();
		// for (int item = 0; item < voaItem.length; item++)
		// alTemp.add(voaItem[item].getCinventoryid());
		// alBodyPK.add(alTemp);

		// //读自由项
		// nc.bs.ic.pub.freeitem.DefdefDMO defdmo = new
		// nc.bs.ic.pub.freeitem.DefdefDMO();
		// alFree = defdmo.queryFreeVOByInvIDsGroupByBills(alBodyPK);
		// ArrayList alFree2 = null;
		// //写自由项
		// if (alFree != null
		// && alFree.size() > 0) { //&& alResultData.size()==alFree.size()) {
		// //nc.vo.scm.pub.SCMEnv.out("free size"+alFree.size());
		// FreeVO voBodyFree = null; //单据读出的free值
		// FreeVO voBasFree = null; //基础数据读出的free设置
		// alFree2 = (ArrayList) alFree.get(0);
		// if (alFree2 != null && alFree2.size() == voaItem.length) {
		// for (int row = 0; row < voaItem.length; row++) {
		// voBodyFree = voaItem[row].getFreeItemVO();
		// voBasFree = (FreeVO) alFree2.get(row);
		// //置入def读出的free
		// if (voBodyFree != null && voBasFree != null)
		// for (int f = 1; f <= 10; f++) {
		// //nc.vo.scm.pub.SCMEnv.out("free"+f+"="+voBodyFree.getAttributeValue("vfree"+f));
		// voBasFree.setAttributeValue(
		// "vfree" + f,
		// voBodyFree.getAttributeValue("vfree" + f));
		// }
		// //完整的free
		// voaItem[row].setFreeItemVO(voBasFree);
		// }
		// }
		// }
		// return voaItem;
	}

	/**
	 * 创建者：王乃军 功能：得到指定bodyPK的货位分配数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public ArrayList getLocDataByBodyPK(String[] sBodyPK) throws Exception {
		nc.bs.ic.pub.locator.LocatorDMO ldmo = new nc.bs.ic.pub.locator.LocatorDMO();

		ArrayList alLoc = new ArrayList();

		// 读货位数据、序列号数据
		if (sBodyPK != null)
			for (int i = 0; i < sBodyPK.length; i++)
				alLoc.add(ldmo.queryByBodyPK(sBodyPK[i]));
		return alLoc;
	}

	/**
	 * 创建者：王乃军 功能：读指定单据的货位数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public ArrayList getLocInfo(String sBillPK) throws Exception {
		// 读存货数据
		if (sBillPK == null) {
			nc.vo.scm.pub.SCMEnv.out("billid null ERR.");
			return null;
		}

		ArrayList alData = new ArrayList();

		LocatorDMO ldmo = new LocatorDMO();
		alData.add(ldmo.queryByBillPK2(sBillPK));
		// 序列号
		// SerialDMO sndmo = new SerialDMO();
		// alData.add(sndmo.queryByBillPK2(sBillPK));
		// 如果是SQL异常则抛出
		return alData;
	}

	/**
	 * 创建者：王乃军 功能：读指定单据的货位和序列号数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public ArrayList getLocSNInfo(String sBillPK) throws Exception {
		// 读存货数据
		if (sBillPK == null) {
			nc.vo.scm.pub.SCMEnv.out("billid null ERR.");
			return null;
		}

		ArrayList alData = new ArrayList();

		LocatorDMO ldmo = new LocatorDMO();
		alData.add(ldmo.queryByBillPK2(sBillPK));
		// 序列号
		SerialDMO sndmo = new SerialDMO();
		alData.add(sndmo.queryByBillPK2(sBillPK));
		// 如果是SQL异常则抛出

		return alData;
	}

	/**
	 * 创建者：仲瑞庆 功能：继承父类的方法，但扩大访问范围 参数： 返回： 例外： 日期：(2001-11-19 15:05:26)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.lang.String
	 */
	public String getOID(String sCorpID) {
		return super.getOID(sCorpID);
	}

	/**
	 * 创建者：王乃军 功能：得到指定bodyPK的序列号数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public ArrayList getSNDataByBodyPK(String[] sBodyPK) throws Exception {
		// 先查询表体的数量看是写在in/out,正/负，从而决定其出入库属性。
		ArrayList alSN = new ArrayList();

		nc.bs.ic.pub.sn.SerialDMO sdmo = new nc.bs.ic.pub.sn.SerialDMO();
		// 读序列号数据
		if (sBodyPK != null)
			for (int i = 0; i < sBodyPK.length; i++) {
				GeneralBillItemVO voItem = queryBillItemQtyInfo(sBodyPK[i]);
				int iInOut = InOutFlag.SPECIAL;
				if (voItem != null)
					iInOut = voItem.getInOutFlag();

				if (iInOut == InOutFlag.IN) // 入库是新记录
					alSN.add(sdmo.findSerialsByBodyPK(sBodyPK[i]));
				else if (iInOut == InOutFlag.OUT) // 出库是在入库记录的基础上
					alSN.add(sdmo.findOutSerialsByBodyPK(sBodyPK[i]));
				else
					alSN.add(null);
			}
		return alSN;
	}

	/**
	 * 创建者：王乃军 功能：得到序列号提示信息 参数：Vector vEx, Vector vNotEx, Vector vRet, Vector
	 * vOut 存在 不存在 返回 已出库 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	public String getSnHintMsg(Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut) {
		StringBuffer sbMsg = new StringBuffer();
		// 判断序列号的状态，出现在返回结果中的序列号都是有问题的。
		nc.vo.ic.pub.sn.SerialVO voSn = null;
		int iCount = vEx.size();

		if (iCount > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000167")/* @res "重复的序列号：" */);
			for (int sn = 0; sn < iCount; sn++) {
				voSn = (nc.vo.ic.pub.sn.SerialVO) vEx.elementAt(sn);
				if (voSn != null)
					// zhx I18N
					sbMsg.append(voSn.getVserialcode());
				if (sn != iCount - 1)
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPPSCMCommon-000000")/* @res "、" */);
				else
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000168")/* @res "。" */);
			}

		}
		iCount = vNotEx.size();
		if (iCount > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000345")/* @res "不存在的序列号：" */);
			for (int sn = 0; sn < iCount; sn++) {
				voSn = (nc.vo.ic.pub.sn.SerialVO) vNotEx.elementAt(sn);
				if (voSn != null)
					sbMsg.append(voSn.getVserialcode());
				if (sn != iCount - 1)
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPPSCMCommon-000000")/* @res "、" */);
				else
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000168")/* @res "。" */);
			}
		}
		iCount = vRet.size();
		if (iCount > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000169")/* @res "已退回的序列号：" */);
			for (int sn = 0; sn < iCount; sn++) {
				voSn = (nc.vo.ic.pub.sn.SerialVO) vRet.elementAt(sn);
				if (voSn != null)
					// zhx I18N
					sbMsg.append(voSn.getVserialcode());
				if (sn != iCount - 1)
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPPSCMCommon-000000")/* @res "、" */);
				else
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000168")/* @res "。" */);
			}
		}
		iCount = vOut.size();
		if (iCount > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000202")/* @res "已出库的序列号：" */);
			for (int sn = 0; sn < iCount; sn++) {
				voSn = (nc.vo.ic.pub.sn.SerialVO) vOut.elementAt(sn);
				if (voSn != null)
					// zhx I18N
					sbMsg.append(voSn.getVserialcode());
				if (sn != iCount - 1)
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPPSCMCommon-000000")/* @res "、" */);
				else
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000168")/* @res "。" */);
			}
		}
		return sbMsg.toString();
	}

	/**
	 * 创建者：王乃军 功能：得到序列号提示信息 参数：Vector vEx, Vector vNotEx, Vector vRet, Vector
	 * vOut 存在 不存在 返回 已出库 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	public String getSnHintMsg(Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut, Vector vFreeze) {
		// -------------
		StringBuffer sbMsg = new StringBuffer(getSnHintMsg(vEx, vNotEx, vRet,
				vOut));
		// 判断序列号的状态，出现在返回结果中的序列号都是有问题的。
		nc.vo.ic.pub.sn.SerialVO voSn = null;
		int iCount = 0;
		iCount = vFreeze.size();
		if (iCount > 0) {
			sbMsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000203")/* @res "已冻结的序列号：" */);
			for (int sn = 0; sn < iCount; sn++) {
				voSn = (nc.vo.ic.pub.sn.SerialVO) vFreeze.elementAt(sn);
				if (voSn != null)
					// zhx I18N
					sbMsg.append(voSn.getVserialcode());
				if (sn != iCount - 1)
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPPSCMCommon-000000")/* @res "、" */);
				else
					sbMsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000168")/* @res "。" */);
			}
		}
		return sbMsg.toString();
	}

	/**
	 * 创建者：王乃军 功能：读指定单据的序列号数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public ArrayList getSNInfo(String sBillID) throws Exception {
		// 读存货数据
		if (sBillID == null) {
			nc.vo.scm.pub.SCMEnv.out("billid null ERR.");
			return null;
		}

		ArrayList alSNData = new ArrayList();
		// 序列号
		SerialDMO sndmo = new SerialDMO();
		alSNData.add(sndmo.queryByBillPK2(sBillID));
		// //读表体PK
		// Vector vBodyPK = findAllBodyPK(sBillID);

		// if (vBodyPK != null && vBodyPK.size() > 0) {
		// String saBodyPK[] = new String[vBodyPK.size()];
		// vBodyPK.copyInto(saBodyPK);
		// //序列号
		// alSNData.add(getSNDataByBodyPK(saBodyPK));
		// }

		return alSNData;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return ArrayList String[0] bid; String[1] code
	 * @param
	 */
	private ArrayList getSourceRowNos(String billtype, String shid)
			throws BusinessException {
		if (billtype == null)
			return null;

		IBillType billType = BillTypeFactory.getInstance()
				.getBillType(billtype);
		m_timer.start();
		String subQry = " select csourcebillbid from ic_general_b where csourcetype='"
				+ billtype + "'";

		if (shid != null)
			subQry = subQry + " and cgeneralhid='" + shid + "'";
		String sWhere = " in (" + subQry + ")";

		StringBuffer s = new StringBuffer("select ");
		if (billtype.equalsIgnoreCase("30") || billtype.equalsIgnoreCase("3A")) {
			s
					.append(" corder_bid,crowno from so_saleorder_b where corder_bid ");
		}

		else if (billtype.equalsIgnoreCase("32")
				|| billtype.equalsIgnoreCase("3C")) {
			s
					.append(" cinvoice_bid,crowno from so_saleinvoice_b where cinvoice_bid ");

		} else if (billtype.equalsIgnoreCase("3U")
				|| billtype.equalsIgnoreCase("3V")) {
			s.append(" pk_apply_b,crowno from so_apply_b where pk_apply_b ");

		} else if (billtype.equalsIgnoreCase("21")) {
			s.append(" corder_bid,crowno from po_order_b where corder_bid ");

		} else if (billtype.equalsIgnoreCase("23")) {
			s
					.append(" carriveorder_bid,crowno from po_arriveorder_b where carriveorder_bid ");

		} else if (billtype.equalsIgnoreCase("61")) {
			s.append(" corder_bid,crowno from sc_order_b where corder_bid ");

		} else if (billType.typeOf(ModuleCode.TO)) {
			s.append("   cbill_bid,crowno from to_bill_b where cbill_bid ");

		}
		// else if (billtype.equalsIgnoreCase("A2")){
		// s.append(" pk_moid,scddh from mm_mo where pk_moid ");

		// }
		// else if (billtype.equalsIgnoreCase("A3")){
		// s.append(" pk_pickmid,bljhdh from mm_pickm where pk_pickmid ");

		// }
		// else if (billtype.equalsIgnoreCase("A4")){
		// s.append(" pk_wrid,djh from mm_wr where pk_wrid ");

		// }
		else if (billtype.equalsIgnoreCase("41")
				|| billtype.equalsIgnoreCase("42")
				|| billtype.equalsIgnoreCase("49")
				|| billtype.equalsIgnoreCase("4H")
				|| billtype.equalsIgnoreCase("4Q")
				|| billtype.equalsIgnoreCase("4C")
				|| billtype.equalsIgnoreCase("45")) {
			s
					.append(" cgeneralbid,crowno from ic_general_b where cgeneralbid ");

		} else if (billtype.equalsIgnoreCase("4K")
				|| billtype.equalsIgnoreCase("4L")
				|| billtype.equalsIgnoreCase("4M")
				|| billtype.equalsIgnoreCase("4N")
				|| billtype.equalsIgnoreCase("4R")) {
			s
					.append(" cspecialbid,crowno from ic_special_b where cspecialbid ");

		} else if (billtype.equalsIgnoreCase("4U")) {
			s
					.append(" callocationbid,crowno from ic_allocation_b where callocationbid ");
		} else if (billtype.equals("7F")) {
			s
					.append(" pk_delivbill_b,irownumber from dm_delivbill_b where pk_delivbill_b ");
		} else
			return null;

		s.append(sWhere);

		Connection con = null;
		PreparedStatement stmt = null;
		ArrayList alhidcode = new ArrayList();
		try {
			con = getConnection();
			stmt = con.prepareStatement(s.toString());
			ResultSet rs = stmt.executeQuery();
			String hid = null;
			String code = null;
			while (rs.next()) {
				hid = rs.getString(1);
				code = rs.getString(2);
				if (hid != null && code != null)
					alhidcode.add(new String[] { hid, code });

			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		m_timer.stopAndShow("@@:--)查询来源行号：" + billtype
				+ String.valueOf(alhidcode.size()));
		return alhidcode;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return ArrayList String[0] bid; String[1] code
	 * @param
	 */
	public String getSourceRowNoSQL(String billtype) throws Exception {
		if (billtype == null)
			return null;

		IBillType billType = BillTypeFactory.getInstance()
				.getBillType(billtype);
		// "FROM so_saleorder_b b WHERE ic_general_b.csourcebillbid =
		// b.corder_bid AND ic_general_b.csourcetype = '30'"

		m_timer.start();

		// 发运单
		if (billtype.equals("7D"))
			return "update ic_general_b set vsourcerowno='1' where dr=0 and  csourcetype='7D' and vsourcerowno is null ";

		// 发运单
		if (billtype.equals("7F"))
			return " update ic_general_b set vsourcerowno=b.irownumber from dm_delivbill_b b  where ic_general_b.csourcebillbid=b.pk_delivbill_b and ic_general_b.csourcetype='7F' and ic_general_b.dr=0 and ic_general_b.vsourcerowno is null";

		StringBuffer s = new StringBuffer(
				"update ic_general_b set vsourcerowno=b.crowno");
		if (billtype.equalsIgnoreCase("30") || billtype.equalsIgnoreCase("3A")) {
			s
					.append(" from so_saleorder_b b WHERE ic_general_b.csourcebillbid = b.corder_bid ");
		}

		else if (billtype.equalsIgnoreCase("32")
				|| billtype.equalsIgnoreCase("3C")) {
			s
					.append("  from so_saleinvoice_b b where ic_general_b.csourcebillbid = b.cinvoice_bid ");

		} else if (billtype.equalsIgnoreCase("3U")
				|| billtype.equalsIgnoreCase("3V")) {
			s
					.append(" from so_apply_b b where ic_general_b.csourcebillbid = b.pk_apply_b ");

		} else if (billtype.equalsIgnoreCase("21")) {
			s
					.append(" from po_order_b b where  ic_general_b.csourcebillbid = b.corder_bid ");

		} else if (billtype.equalsIgnoreCase("23")) {
			s
					.append("  from po_arriveorder_b b where ic_general_b.csourcebillbid = b.carriveorder_bid ");

		} else if (billtype.equalsIgnoreCase("61")) {
			s
					.append("   from sc_order_b  b where ic_general_b.csourcebillbid = b.corder_bid ");

		} else if (billType.typeOf(ModuleCode.TO)) {
			s
					.append("   from to_bill_b  b where ic_general_b.csourcebillbid = b.cbill_bid ");

		}
		// else if (billtype.equalsIgnoreCase("41")
		// ||billtype.equalsIgnoreCase("42")
		// ||billtype.equalsIgnoreCase("49")
		// ||billtype.equalsIgnoreCase("4H")
		// ||billtype.equalsIgnoreCase("4Q")
		// ||billtype.equalsIgnoreCase("4C")
		// ||billtype.equalsIgnoreCase("45")){
		// s.append(" from ic_general_b b where ic_general_b.csourcebillbid =
		// b.cgeneralbid ");

		// }
		else if (billtype.equalsIgnoreCase("4K")
				|| billtype.equalsIgnoreCase("4L")
				|| billtype.equalsIgnoreCase("4M")
				|| billtype.equalsIgnoreCase("4N")
				|| billtype.equalsIgnoreCase("4R")) {
			s
					.append("  from ic_special_b  b where ic_general_b.csourcebillbid = b.cspecialbid ");

		} else if (billtype.equalsIgnoreCase("4U")) {
			s
					.append("  from ic_allocation_b  b where ic_general_b.csourcebillbid = b.callocationbid ");
		}

		else
			return null;

		s
				.append(" AND ic_general_b.csourcetype = '")
				.append(billtype)
				.append("'")
				.append(
						" and ic_general_b.dr=0 and ic_general_b.vsourcerowno is null ");

		return s.toString();
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return ArrayList String[0] bid; String[1] code
	 * @param
	 */
	public String getSourceRowNoWhereString(String billtype) throws Exception {
		if (billtype == null)
			return null;

		// "FROM so_saleorder_b b WHERE ic_general_b.csourcebillbid =
		// b.corder_bid AND ic_general_b.csourcetype = '30'"

		m_timer.start();

		StringBuffer s = new StringBuffer();
		if (billtype.equalsIgnoreCase("30") || billtype.equalsIgnoreCase("3A")) {

			s
					.append(" from so_saleorder_b b WHERE ic_general_b.csourcebillbid = b.corder_bid ");
		}

		else if (billtype.equalsIgnoreCase("32")
				|| billtype.equalsIgnoreCase("3C")) {
			s
					.append("  from so_saleinvoice_b b where ic_general_b.csourcebillbid = b.cinvoice_bid ");

		} else if (billtype.equalsIgnoreCase("3U")
				|| billtype.equalsIgnoreCase("3V")) {
			s
					.append(" from so_apply_b b where ic_general_b.csourcebillbid = b.pk_apply_b ");

		} else if (billtype.equalsIgnoreCase("21")) {
			s
					.append(" from po_order_b b where  ic_general_b.csourcebillbid = b.corder_bid ");

		} else if (billtype.equalsIgnoreCase("23")) {
			s
					.append("  from po_arriveorder_b b where ic_general_b.csourcebillbid = b.carriveorder_bid ");

		} else if (billtype.equalsIgnoreCase("61")) {
			s
					.append("   from sc_order_b  b where ic_general_b.csourcebillbid = b.corder_bid ");

		}

		else if (billtype.equalsIgnoreCase("41")
				|| billtype.equalsIgnoreCase("42")
				|| billtype.equalsIgnoreCase("49")
				|| billtype.equalsIgnoreCase("4H")
				|| billtype.equalsIgnoreCase("4Q")
				|| billtype.equalsIgnoreCase("4C")
				|| billtype.equalsIgnoreCase("45")) {
			s
					.append("   from ic_general_b b where ic_general_b.csourcebillbid = b.cgeneralbid ");

		} else if (billtype.equalsIgnoreCase("4K")
				|| billtype.equalsIgnoreCase("4L")
				|| billtype.equalsIgnoreCase("4M")
				|| billtype.equalsIgnoreCase("4N")
				|| billtype.equalsIgnoreCase("4R")) {
			s
					.append("  from ic_special_b  b where ic_general_b.csourcebillbid = b.cspecialbid ");

		} else if (billtype.equalsIgnoreCase("4U")
				|| billtype.equalsIgnoreCase("5E")) {
			s
					.append("  from ic_allocation_b  b where ic_general_b.csourcebillbid = b.callocationbid ");
		}

		else
			return null;

		s
				.append(" AND ic_general_b.csourcetype = '")
				.append(billtype)
				.append("'")
				.append(
						" and ic_general_b.dr=0 and ic_general_b.vsourcerowno is null ");

		if (s.length() == 0)
			return null;
		return s.toString();
	}

	/**
	 * 创建者：王乃军 功能：读单据ts数据 参数： 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public ArrayList getTs(String sBillPK) throws SQLException, Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getTs",
				new Object[] { sBillPK });
		/** ********************************************************** */
		String sSql1 = "SELECT h.ts,b.cgeneralbid,b.ts AS bts,ninnum,ninassistnum,noutnum,noutassistnum,vfirstbillcode,vbatchcode,nbarcodenum,bbarcodeclose,b.nprice,b.nmny FROM ic_general_b b INNER JOIN       ic_general_h h ON b.cgeneralhid = h.cgeneralhid WHERE h.cgeneralhid=? and b.cgeneralhid=? and  h.dr=0 ";// AND
																																																																															// b.dr=0
																																																																															// ";
																																																																															// 删出行同样需要检查Ts,因此应该刷新，如保存后立即签字
																																																																															// 5.5
		// 返回值
		ArrayList alRet = new ArrayList();
		ArrayList alItemRet = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql1);
			stmt.setString(1, sBillPK);
			stmt.setString(2, sBillPK);
			rs = stmt.executeQuery();
			String sHeadTs = null;
			BigDecimal num = null;
			//
			UFBoolean ufbBarcodeClose = new UFBoolean(false);
			String sBarcodeClose = null;
			while (rs.next()) {
				sHeadTs = rs.getString(1);
				alItemRet = new ArrayList();
				// 0 bid
				alItemRet.add(rs.getString(2));
				// 1,ts
				alItemRet.add(rs.getString(3));

				// 2,ninnum
				num = rs.getBigDecimal(4);
				if (num != null)
					alItemRet.add(new UFDouble(num));
				else
					alItemRet.add(null);
				// 3,ninassistnum
				num = rs.getBigDecimal(5);
				if (num != null)
					alItemRet.add(new UFDouble(num));
				else
					alItemRet.add(null);

				// 2 noutnum
				num = rs.getBigDecimal(6);
				if (num != null)
					alItemRet.set(2, new UFDouble(num));

				// 3 noutassistnum
				num = rs.getBigDecimal(7);
				if (num != null)
					alItemRet.set(3, new UFDouble(num));
				// 4,vfirstcode
				alItemRet.add(rs.getString(8));
				// 5:vbatchcode
				alItemRet.add(rs.getString(9));

				// 6:条码数量
				num = rs.getBigDecimal(10);
				if (num != null)
					alItemRet.add(new UFDouble(num));
				else
					alItemRet.add(null);

				// 7:条码是否关闭
				sBarcodeClose = rs.getString(11);
				if (sBarcodeClose == null)
					ufbBarcodeClose = new UFBoolean(false);
				else
					ufbBarcodeClose = new UFBoolean(sBarcodeClose);
				alItemRet.add(ufbBarcodeClose);

				// 8,nprice
				num = rs.getBigDecimal(12);
				if (num != null)
					alItemRet.add(new UFDouble(num));
				else
					alItemRet.add(null);

				// 9,nmny
				num = rs.getBigDecimal(13);
				if (num != null)
					alItemRet.add(new UFDouble(num));
				else
					alItemRet.add(null);

				alRet.add(alItemRet);
			}
			if (alRet.size() > 0)
				alRet.add(0, sHeadTs);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				throw e;
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				throw e;
			}
		}
		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getTs",
				new Object[] { sBillPK });
		/** ********************************************************** */

		return alRet;
	}

	/**
	 * 此处插入方法说明。 功能：获取需要倒挤得行 参数： 返回： 例外： 日期：(2002-4-1 20:06:45)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.pub.AggregatedValueObject
	 * @param voCur
	 *            nc.vo.pub.AggregatedValueObject
	 * @param voPre
	 *            nc.vo.pub.AggregatedValueObject
	 */
	public GeneralBillVO[] getVOSForUpdate2(AggregatedValueObject voCur)
			throws Exception {

		// 非空检查
		if ((voCur == null) || (voCur.getChildrenVO() == null)
				|| (voCur.getChildrenVO().length == 0)) {
			return null;
		}

		// 类型转换
		GeneralBillVO checkVO = null;
		if (!(voCur instanceof GeneralBillVO)) {
			return null;
		} else {
			checkVO = (GeneralBillVO) voCur;

		}

		GeneralBillHeaderVO voCurHead = (GeneralBillHeaderVO) checkVO
				.getHeaderVO();
		GeneralBillItemVO[] voCurItems = (GeneralBillItemVO[]) checkVO
				.getItemVOs();
		if (voCurHead.getPk_corp() == null
				|| voCurHead.getCwarehouseid() == null) {
			return null;
		}

		GeneralBillItemVO[] voItems = checkVO.getItemVOs();
		String cgeneralhid = voCurHead.getCgeneralhid();
		String cwarehouseid = voCurHead.getCwarehouseid();
		Vector vNew = new Vector();
		Vector vOld = new Vector();
		UFDouble ZERO = new UFDouble(0);
		WhVO whvo = new QueryInfoDMO().getWhInfo(cwarehouseid);
		boolean bVendor = whvo.getIsgathersettle().booleanValue();
		try {
			Hashtable ht = null;
			if (whvo.getIsLocatorMgt() == null
					|| whvo.getIsLocatorMgt().intValue() != 1) {

				ht = queryNotAllZero(checkVO);// (cgeneralhid, cwarehouseid);
												// //仓库数量倒挤

				if (ht != null && ht.size() > 0) {
					StringBuffer key = null;

					GeneralBillItemVO voNewItem = null;
					GeneralBillItemVO voChangedItem = null;

					for (int i = 0; i < voItems.length; i++) {
						if (voItems[i].getNinnum() == null
								&& voItems[i].getNoutnum() == null)
							continue;

						InvVO invvo = voItems[i].getInv();
						// if(voItems[i].getCsourcetype()!=null)
						// continue;
						// 不是辅计量，删除行，待检，序列号不到挤

						if (voItems[i].getCastunitid() == null
								|| voItems[i].getHsl() == null
								|| voItems[i].getHsl().doubleValue() == 0.0
								|| voItems[i].getStatus() == VOStatus.DELETED
								|| (voItems[i].getFchecked() != null && voItems[i]
										.getFchecked().intValue() != 0)
								|| (voItems[i].getSerial() != null && voItems[i]
										.getSerial().length > 0))
							continue;
						key = new StringBuffer();
						key.append(voItems[i].getCinventoryid()).append(
								voItems[i].getVfree1()).append(
								voItems[i].getVfree2()).append(
								voItems[i].getVfree3()).append(
								voItems[i].getVfree4()).append(
								voItems[i].getVfree5()).append(
								voItems[i].getVfree6()).append(
								voItems[i].getVfree7()).append(
								voItems[i].getVfree8()).append(
								voItems[i].getVfree9()).append(
								voItems[i].getVfree10()).append(
								voItems[i].getVbatchcode()).append(
								voItems[i].getCastunitid());
						if (bVendor
								|| (invvo.getIssupplierstock() != null && (invvo
										.getIssupplierstock().toString()
										.equals("1") || invvo
										.getIssupplierstock().equals("Y")))) {
							key.append(voItems[i].getCvendorid());
						} else {
							key.append(sNULL);
						}
						if (invvo.getIsStoreByConvert() != null
								&& (invvo.getIsStoreByConvert().toString()
										.equals("1") || invvo
										.getIsStoreByConvert().equals("Y"))
								&& voItems[i].getHsl() != null) {
							if (voItems[i].getHsl() != null) {
								UFDouble hsl = voItems[i].getHsl();
								hsl.setTrimZero(true);
								key.append(hsl);
							} else {
								key.append(sNULL);
							}
						} else {
							key.append(sNULL);
						}

						if (ht.containsKey(key.toString())) {
							voChangedItem = (GeneralBillItemVO) ht.get(key
									.toString());
							if ((voChangedItem.getNinnum() == null || voChangedItem
									.getNinnum().compareTo(ZERO) == 0)
									&& (voChangedItem.getNinassistnum() == null || voChangedItem
											.getNinassistnum().compareTo(ZERO) == 0)) {
								ht.remove(key.toString());
								continue;
							}
							vOld.addElement(voItems[i].clone());
							voNewItem = voItems[i];
							vNew.addElement(voNewItem);
							nc.vo.scm.pub.SCMEnv.out("发生倒挤："
									+ voNewItem.getCinventorycode());
							relation(voNewItem, voChangedItem);
							voNewItem.setStatus(VOStatus.UPDATED);

						}
					}
				}
			} else {
				ht = queryNotAllZeroCargo(checkVO);// (cgeneralhid,
													// cwarehouseid);
				if (ht != null && ht.size() > 0) {
					StringBuffer key = null;
					StringBuffer key1 = null;

					GeneralBillItemVO voChangedItem = null;
					GeneralBillItemVO voNewItem = null;
					// UFDouble num = null;
					// UFDouble assistnum = null;
					LocatorVO[] voLocs = null;
					boolean isFound = false;
					for (int i = 0; i < voItems.length; i++) {
						if (voItems[i].getNinnum() == null
								&& voItems[i].getNoutnum() == null)
							continue;

						InvVO invvo = voItems[i].getInv();

						// 不是辅计量，删除行，待检，来源单据、对应单据,序列号不到挤
						if (voItems[i].getCastunitid() == null
								|| voItems[i].getHsl() == null
								|| voItems[i].getHsl().doubleValue() == 0.0
								|| voItems[i].getStatus() == VOStatus.DELETED
								|| (voItems[i].getFchecked() != null && voItems[i]
										.getFchecked().intValue() != 0)
								|| (voItems[i].getSerial() != null && voItems[i]
										.getSerial().length > 0))
							continue;
						isFound = false;

						key = new StringBuffer();
						key.append(voItems[i].getCinventoryid()).append(
								voItems[i].getVfree1()).append(
								voItems[i].getVfree2()).append(
								voItems[i].getVfree3()).append(
								voItems[i].getVfree4()).append(
								voItems[i].getVfree5()).append(
								voItems[i].getVfree6()).append(
								voItems[i].getVfree7()).append(
								voItems[i].getVfree8()).append(
								voItems[i].getVfree9()).append(
								voItems[i].getVfree10()).append(
								voItems[i].getVbatchcode()).append(
								voItems[i].getCastunitid());
						if (bVendor
								|| (invvo.getIssupplierstock() != null && (invvo
										.getIssupplierstock().toString()
										.equals("1") || invvo
										.getIssupplierstock().equals("Y")))) {
							key.append(voItems[i].getCvendorid());
						} else {
							key.append(sNULL);
						}

						if (invvo.getIsStoreByConvert() != null
								&& (invvo.getIsStoreByConvert().toString()
										.equals("1") || invvo
										.getIsStoreByConvert().equals("Y"))
								&& voItems[i].getHsl() != null) {
							if (voItems[i].getHsl() != null) {
								UFDouble hsl = voItems[i].getHsl();
								hsl.setTrimZero(true);// zhy 忽略小数位数
								key.append(hsl.toString());
							} else {
								key.append(sNULL);
							}
						} else {
							key.append(sNULL);
						}

						// 货位
						if (voItems[i].getLocator() != null) {
							// 旧的vo
							voNewItem = (GeneralBillItemVO) voItems[i].clone();
							voLocs = voItems[i].getLocator();

							for (int j = 0; j < voLocs.length; j++) {
								key1 = new StringBuffer();
								key1.append(key);
								key1.append(voLocs[j].getCspaceid());
								if (ht.containsKey(key1.toString())) {
									voChangedItem = (GeneralBillItemVO) ht
											.get(key1.toString());
									if ((voChangedItem.getNinnum() == null || voChangedItem
											.getNinnum().compareTo(ZERO) == 0)
											&& (voChangedItem.getNinassistnum() == null || voChangedItem
													.getNinassistnum()
													.compareTo(ZERO) == 0)) {
										ht.remove(key1.toString());
										continue;
									}
									// vOld.addElement(voItems[i].clone());
									nc.vo.scm.pub.SCMEnv.out("发生倒挤："
											+ voNewItem.getCinventorycode());
									relation2(voItems[i], voChangedItem,
											voLocs[j]);
									isFound = true;
								}
							}
						}
						if (isFound) {
							vOld.addElement(voNewItem);
							vNew.add(voItems[i]);

							voItems[i].setStatus(VOStatus.UPDATED);
							voItems[i].setLocStatus(VOStatus.UPDATED);

						}

					}
				}
			}
			// 货位数量倒挤
		} catch (SQLException e) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000176")/*
																				 * @res
																				 * "数量倒挤："
																				 */
					+ e.getMessage());
		}
		GeneralBillVO voNewBill = null;
		if (vNew.size() > 0) {
			voNewBill = new GeneralBillVO();
			voNewBill.setParentVO((GeneralBillHeaderVO) checkVO.getParentVO()
					.clone());
			GeneralBillItemVO[] vobodies = new GeneralBillItemVO[vNew.size()];
			vNew.copyInto(vobodies);
			voNewBill.setChildrenVO(vobodies);

		}
		GeneralBillVO voOldBill = null;
		if (vOld.size() > 0) {
			voOldBill = new GeneralBillVO();
			voOldBill.setParentVO((GeneralBillHeaderVO) checkVO.getParentVO()
					.clone());
			GeneralBillItemVO[] vobodies = new GeneralBillItemVO[vOld.size()];
			vOld.copyInto(vobodies);
			voOldBill.setChildrenVO(vobodies);

		}
		GeneralBillVO[] vos = new GeneralBillVO[2];
		vos[0] = voNewBill;
		vos[1] = voOldBill;
		return vos;
	}

	/**
	 * 创建者：王乃军 功能：存货序列号入库
	 * 
	 * 考虑了冻结的序列号，因为入库的序列号会被冻结，同时说明已经存在。
	 * 
	 * 
	 * 参数： 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public void inSerials(GeneralBillHeaderVO voHeader,
			GeneralBillItemVO voItem, Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut) throws BusinessException, SystemException, Exception {

		if (voHeader == null || voItem == null) {
			nc.vo.scm.pub.SCMEnv.out("vo null ERR.");
			return;
		}
		SerialVO[] voaSn = voItem.getSerial(); // 新序列号们

		if (voaSn == null || voaSn.length == 0) {
			nc.vo.scm.pub.SCMEnv.out("no sn,ret");
			return;
		}
		String sBodyPK = voItem.getPrimaryKey(); // 表体ID
		// String sTempSN = null; //临时的序列号
		// String sSNbodyPK = null; //返回的cgeneralbid
		SerialDMO dmoSN = new SerialDMO(); // 序列号dmo
		SerialVO voTempSN = null; // 临时序列号VO
		ArrayList alRet = null; // 返回的状态数组 [vo,vo]
		// 先查看一遍序列号的状态，都正确时再一起插入。
		int iCorrectCount = 0; // 正确计数器
		int iSNstatus = SerialVO.NOTEXIST; // 返回的状态
		// 读指定序列号的状态,可能重复
		alRet = dmoSN.getSerialStatus(voItem.getCinventoryid(), voaSn);
		// -------------------- 至少返回一个 vo --------------------
		// 返回一个vo,并且状态是不存在，表示全都不存在，OK!
		if (alRet != null
				&& alRet.size() == 1
				&& alRet.get(0) != null
				&& ((SerialVO) alRet.get(0)).getSnStatus() != null
				&& ((SerialVO) alRet.get(0)).getSnStatus().intValue() == SerialVO.NOTEXIST) {
			// ------------------
			iCorrectCount = voaSn.length;
			// ---------------
		} else if (alRet != null && alRet.size() > 0) {
			// 设置仓库等其它数据
			for (int j = 0; j < alRet.size(); j++)
				if (alRet.get(j) != null) {
					voTempSN = (SerialVO) alRet.get(j);
					// 查看当前序列号的状态
					if (voTempSN.getSnStatus() != null) {
						iSNstatus = voTempSN.getSnStatus().intValue();

						// sTempSN = voTempSN.getVserialcode();

						// 入库、存在此还回的序列号，已出库--〉出错
						// 存在但不是本张单据的此单据行，认为已存在--〉ERR。
						// Vector==null will ignore this check.
						if ((iSNstatus == SerialVO.EXIST || iSNstatus == SerialVO.FREEZE)
								&& vEx != null) {
							if (!vEx.contains(voTempSN))
								vEx.addElement(voTempSN);
						} else if (iSNstatus == SerialVO.RETURN && vRet != null) {
							if (!vRet.contains(voTempSN))
								vRet.addElement(voTempSN);
						}
						// else 12 Oct 序列号入库时不管是否已出库，在修改时，取消操作已判断合法。
						// if (iSNstatus == SerialDMO.OUTWH && vOut!=null)
						// vOut.addElement(voTempSN);
						else
							iCorrectCount++;

					}
				}
		}

		nc.vo.scm.pub.SCMEnv.out("---> ok number is " + iCorrectCount + "/"
				+ voaSn.length);
		// 都正确-->入库
		if (voaSn != null && voaSn[0] != null && iCorrectCount == voaSn.length) {
			// 对于一行的数据来说，每个序列号的下列信息都是相同的。所以只需置一次。
			// 只有序列号不同
			voaSn[0].setCwarehouseid(voHeader.getCwarehouseid()); // 仓库
			// 如果是供应商管理的需要记录供应商,不是供应商管理的不记录供应商
			if (voHeader.getIsgathersettle().booleanValue()
					|| ((voItem.getInv().getIssupplierstock() != null) && "Y"
							.equals(voItem.getInv().getIssupplierstock())))
				voaSn[0].setCproviderid(voItem.getCvendorid());
			else
				voaSn[0].setCproviderid(null);

			// voaSn[0].setCproviderid(voHeader.getCproviderid());
			voaSn[0].setCcustomerid(voHeader.getCcustomerid());
			// ten freeitems
			for (int free = 1; free <= 10; free++)
				voaSn[0].setAttributeValue("vfree" + free, voItem
						.getAttributeValue("vfree" + free));
			voaSn[0].setCinventoryid(voItem.getCinventoryid());
			voaSn[0].setVbatchcode(voItem.getVbatchcode());
			// ;''''''''''''''''''''..............
			// 出库还是入库？根据单据类型和数量的正负来决定。
			voaSn[0].setCinbilltypecode(voHeader.getCbilltypecode());
			voaSn[0].setVinbillcode(voHeader.getVbillcode());
			voaSn[0].setCinbillheadid(voHeader.getCgeneralhid());
			voaSn[0].setCinbillbodyid(voItem.getCgeneralbid());
			// 如果是供应商管理的需要记录供应商,不是供应商管理的不记录供应商
			if (voHeader.getIsgathersettle().booleanValue()
					|| ((voItem.getInv().getIssupplierstock() != null) && "Y"
							.equals(voItem.getInv().getIssupplierstock())))
				voaSn[0].setCproviderid(voItem.getCvendorid());
			else
				voaSn[0].setCproviderid(null);
			dmoSN.insertSerials(sBodyPK, voaSn, voHeader.getPk_corp());
		}
		// release dmo ??? need it?
		dmoSN = null;
	}

	/**
	 * <p>
	 * 向数据库插入一个VO对象。
	 * <p>
	 * 创建日期：(2001-5-14)
	 * 
	 * @param voItem
	 *            nc.vo.ic.ic201.GeneralHItemVO
	 * @param sBillPK
	 *            String
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public String insertBillItem(GeneralBillItemVO voItem, String sBillPK,
			String sCorpID) throws BusinessException {
		if (voItem == null || sBillPK == null || sCorpID == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000204")/*
																				 * @res
																				 * "插入行错误：无单据PK."
																				 */);
		try {
			voItem.setCgeneralhid(sBillPK);
			insertItemBatch(new GeneralBillItemVO[] { voItem });
			return voItem.getCgeneralbid();
		} catch (Exception e) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000205")/*
																				 * @res
																				 * "插入行错误："
																				 */
					+ e.getMessage());
		}

	}

	/**
	 * 向数据库插入一个VO对象。
	 * 
	 * 创建日期：(2001-5-14)
	 * 
	 * @param node
	 *            nc.vo.ic.ic201.GeneralHHeaderVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public String insertHeader(GeneralBillHeaderVO voHeader)
			throws BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "insertHeader",
				new Object[] { voHeader });
		/** ********************************************************** */
		String key = voHeader.getPrimaryKey();
		nc.vo.scm.pub.SCMEnv.out("@@@@" + key);
		SmartDMO dmo = null;
		try {
			dmo = new SmartDMO();
			// voHeader.setStatus(VOStatus.NEW);
			dmo.maintain(voHeader);
		}
		catch (SQLException e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(
					nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008busi","UPP4008busi-000404")/*
																				 * @res
																				 * "后台数据库操作异常！可能由于网络不稳定，后台已经生成单据，或其他原因，请确认后，再进行操作!"
																				 */,
					e);
		}
		catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(
					"creat SmartDMO err!",
					e);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "insertHeader",
				new Object[] { voHeader });
		/** ********************************************************** */

		return key;
	}

	/**
	 * 向数据库批量插入VO表体对象。
	 * 
	 * 创建日期：(2001-5-14)
	 * 
	 * @param node
	 *            nc.vo.ic.ic201.GeneralHItemVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void insertItemBatch(GeneralBillItemVO[] voItems)
			throws BusinessException {

		if (voItems == null || voItems.length == 0)
			return;
		// String[] name = voItems[0].getAttributeNames();
		// for(int i=0;i<name.length;i++)
		// nc.vo.scm.pub.SCMEnv.out("@@@@"+name[i]+"
		// "+voItems[0].getAttributeValue(name[i]));
		SmartDMO dmo = null;
		try {
			dmo = new SmartDMO();

			dmo.maintain(voItems);

		} catch (Exception e) {
			// throw new SystemException("creat SmartDMO err!");
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException("creat SmartDMO err!",
					e);
		}

		return;
	}

	/**
	 * 创建者：王乃军 功能：检查单据是否已存货记账。 参数： 返回： true：已记账 false：未记账 例外： 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean isAudited(String sBillPK) throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */
		Boolean bRet = null;
		// 读存货数据
		if (sBillPK == null) {
			nc.vo.scm.pub.SCMEnv.out("bill pk null ERR.");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(
				" SELECT cauditorid FROM ic_general_h WHERE dr=0 AND cgeneralhid='");
		sbSql.append(sBillPK.trim());
		sbSql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			// 无签字人id,表示未签字。
			if (rs.next()) {
				String cauditorid = rs.getString(1);
				nc.vo.scm.pub.SCMEnv.out("reg=" + cauditorid);
				if (cauditorid == null || cauditorid.trim().length() == 0)
					bRet = new Boolean(false);
				else
					bRet = new Boolean(true);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */

		return bRet;
	}

	/**
	 * 创建者：王乃军 功能：检查单据已经发运签收 参数： 返回： true：已经签收 false：未签收 例外： 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean isDmSigned(String pk_corp, String sBillPK) throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */
		Boolean bRet = Boolean.FALSE;
		// 读存货数据
		if (sBillPK == null || pk_corp == null) {
			nc.vo.scm.pub.SCMEnv.out("bill pk null ERR.");
			return null;
		}

		nc.itf.uap.sf.ICreateCorpQueryService s = (nc.itf.uap.sf.ICreateCorpQueryService) NCLocator
				.getInstance().lookup("nc.itf.uap.sf.ICreateCorpQueryService");
		boolean isDM = s.isEnabled(pk_corp, "DM");
		boolean isTO = s.isEnabled(pk_corp, "TO");
		boolean isPO = s.isEnabled(pk_corp, "PO");

		// CreatecorpDMO dmo =new CreatecorpDMO();
		// boolean isDM=dmo.isEnabled(pk_corp,"DM");
		// boolean isTO=dmo.isEnabled(pk_corp,"TO");
		// boolean isPO=dmo.isEnabled(pk_corp,"PO");

		// naccountnum1
		StringBuffer sbSql = new StringBuffer(
				" SELECT sum(isnull(ndmsignnum,0)) as ndmsignnum,sum(isnull(ntoaccountnum,0.0)) as ntoaccountnum, sum(isnull(naccountnum1,0.0)) as naccountnum1, sum(isnull(nsettlenum1,0.0)) as nsettlenum1 FROM ic_general_bb3 WHERE dr=0 AND cgeneralhid=? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			stmt.setString(1, sBillPK);
			rs = stmt.executeQuery();

			UFDouble ufd0 = new UFDouble(0.0);
			// 无签字人id,表示未签字。
			if (rs.next()) {
				BigDecimal num = rs.getBigDecimal(1);
				if (num != null && new UFDouble(num).compareTo(ufd0) != 0) {

					nc.vo.scm.pub.SCMEnv.out("dmsignnum=" + num);
					if (isDM)
						bRet = Boolean.TRUE;
				}
				num = rs.getBigDecimal(2);
				if (num != null && new UFDouble(num).compareTo(ufd0) != 0) {

					nc.vo.scm.pub.SCMEnv.out("ntoaccountnum=" + num);
					if (isTO)
						bRet = Boolean.TRUE;
				}
				num = rs.getBigDecimal(3);
				// v5不需要检查，自动取消结算，丁伟
				// if(num!=null&&new UFDouble(num).compareTo(ufd0)!=0){
				//
				// nc.vo.scm.pub.SCMEnv.out("ntoaccountnum1=" + num);
				// if(isPO)
				// bRet = Boolean.TRUE;
				// }

				num = rs.getBigDecimal(4);
				if (num != null && new UFDouble(num).compareTo(ufd0) != 0) {
					nc.vo.scm.pub.SCMEnv.out("nsettlenum1=" + num);
					if (isPO)
						bRet = Boolean.TRUE;
				}

			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */

		return bRet;
	}

	/**
	 * 创建者：王乃军 功能：修改累计出库数量 参数 : String[] sBillItemPK, 表体PK UFDouble[] dNum 数量
	 * 返回： 例外： 日期：(2001-6-12 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public void updateCorNumBatch(String[] sBillItemPKs, UFDouble[] dNums,
			UFDouble[] dAstNums, UFDouble[] dGrsNums)
			throws java.sql.SQLException, BusinessException, SystemException {
		if (sBillItemPKs == null || sBillItemPKs.length == 0 || dNums == null
				|| dNums.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000490")/*
																				 * @res
																				 * "传入参数不完整！"
																				 */);

		String sql1 = "UPDATE ic_general_b SET  ncorrespondnum = COALESCE(ncorrespondnum,0.0)+(?), ncorrespondastnum = COALESCE(ncorrespondastnum,0.0)+(?),ncorrespondgrsnum = COALESCE(ncorrespondgrsnum,0.0)+(?)  WHERE cgeneralbid = ?";

		// String sql2 =
		// "UPDATE ic_general_b SET ncorrespondastnum= case when
		// COALESCE(ninnum,abs(noutnum))- COALESCE(ncorrespondnum,0.0)=0 then
		// COALESCE(ninassistnum,abs(noutassistnum)) else case when hsl = 0 then
		// 0 else COALESCE(ncorrespondnum,0.0)/ COALESCE(hsl,1.0) end end WHERE
		// cgeneralbid = ? and castunitid is not null ";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = prepareStatement(con, sql1);

			// 回写主数量
			for (int i = 0; i < sBillItemPKs.length; i++) {
				stmt.setBigDecimal(1, dNums[i].toBigDecimal());
				if (dAstNums != null && dAstNums.length > i
						&& dAstNums[i] != null)
					stmt.setBigDecimal(2, dAstNums[i].toBigDecimal());
				else
					stmt.setBigDecimal(2, new BigDecimal(0.0));
				if (dGrsNums != null && dGrsNums.length > i
						&& dAstNums[i] != null)
					stmt.setBigDecimal(3, dGrsNums[i].toBigDecimal());
				else
					stmt.setBigDecimal(3, new BigDecimal(0.0));

				stmt.setString(4, sBillItemPKs[i]);

				executeUpdate(stmt);
			}
			executeBatch(stmt);

			stmt.close();

			// //回写辅数量
			// stmt = prepareStatement(con,sql2);

			// for(int i=0;i<sBillItemPKs.length;i++){

			// stmt.setString(1, sBillItemPKs[i]);

			// executeUpdate(stmt);
			// }
			// executeBatch(stmt);

			// stmt.close();
			// 检查发票数量是否大于入库数量
			if (sBillItemPKs.length > 0) {
				String ss = nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
						"b.cgeneralbid", sBillItemPKs);
				StringBuffer sMsg = new StringBuffer();
				String sql = " select vbillcode ,invname,num from ic_general_h h inner join (select b.cgeneralhid,invb.invname,abs(COALESCE(ninnum,noutnum))-abs(isnull(ncorrespondnum,0)) as num from ic_general_b b inner join bd_invbasdoc invb on b.cinvbasid = invb.pk_invbasdoc  where b.dr=0 "
						+ ss
						+ ") tmp on h.cgeneralhid=tmp.cgeneralhid where num<0 ";
				stmt = con.prepareStatement(sql);
				ResultSet rs = stmt.executeQuery();
				while (rs.next()) {
					sMsg.append("\n"
							+ nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000491")/*
																	 * @res
																	 * "入库单据："
																	 */
							+ rs.getString(1));
					sMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
							.getStrByID("4008bill", "UPP4008bill-000455")/*
																			 * @res
																			 * "；存货名称："
																			 */
							+ ":" + rs.getString(2));
					sMsg.append(nc.bs.ml.NCLangResOnserver.getInstance()
							.getStrByID("4008bill", "UPP4008bill-000493")/*
																			 * @res
																			 * "；超出："
																			 */
							+ rs.getBigDecimal(3).abs().toString());

				}
				if (sMsg.length() > 0) {
					throw new BusinessException(sMsg.toString());

				}

				stmt = con
						.prepareStatement("select count(*) from ic_general_b b where b.dr=0 "
								+ ss);
				rs = stmt.executeQuery();
				if (rs.next()) {
					int count = rs.getInt(1);
					if (count != sBillItemPKs.length) {

						throw new BusinessException(ResBase
								.getCorInBillDelete());
					}

				}
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}

	/**
	 * 创建者：王乃军 功能：检查表体是否有暂估或结算的行 返回： -->false 没有 -->true 有
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean isHaveEstimatedItems(String sBillPK)
			throws BusinessException, Exception {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isHaveEstimatedItem", new Object[] { sBillPK });
		/** ********************************************************** */
		// 单据PK
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000206")/*
																				 * @res
																				 * "暂估检查参数错误！无单据PK。"
																				 */);
		// 返回值
		Boolean bHave = new Boolean(false);

		StringBuffer sbSql = new StringBuffer(
				"SELECT cgeneralbid,bzgflag,isok FROM ic_general_b WHERE dr=0 AND cgeneralhid='");
		sbSql.append(sBillPK.trim());
		sbSql
				.append("' \n AND (rtrim(ltrim(COALESCE(bzgflag,'N')))='Y' OR rtrim(ltrim(COALESCE(bzgflag,'N')))='y' ");
		sbSql
				.append("  \n OR rtrim(ltrim(COALESCE(isok,'N')))='Y' OR rtrim(ltrim(COALESCE(isok,'N')))='y' )");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			if (rs.next()) {
				// 有已经结算或暂估的表体
				bHave = new Boolean(true);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
				throw e;
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {
				throw e;
			}
		}
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isHaveEstimatedItem", new Object[] { sBillPK });
		/** ********************************************************** */
		return bHave;
	}

	/**
	 * 创建者：王乃军 功能：检查表体是否有暂估或结算的行 返回： -->false 没有 -->true 有
	 * 
	 * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean isHaveSettledItems(String sBillPK) throws BusinessException,
			SQLException {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isHaveSettledItems", new Object[] { sBillPK });
		/** ********************************************************** */
		// 单据PK
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000207")/*
																				 * @res
																				 * "结算检查参数错误！无单据PK。"
																				 */);
		// 返回值
		Boolean bHave = new Boolean(false);

		String sSql = "SELECT cgeneralbid,isok FROM ic_general_b WHERE dr=0 AND cgeneralhid=?  AND  (rtrim(ltrim(COALESCE(isok,'N')))='Y' OR rtrim(ltrim(COALESCE(isok,'N')))='y' )";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql);
			stmt.setString(1, sBillPK);
			rs = stmt.executeQuery();
			if (rs.next()) {
				// 有已经结算的表体
				bHave = new Boolean(true);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {
			}
		}
		// 保留的系统管理接口：
		/** ********************************************************** */
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isHaveSettledItems", new Object[] { sBillPK });
		/** ********************************************************** */
		return bHave;
	}

	/**
	 * ****************************************** 功能：<|>
	 * 
	 * 创建日期：(2004-3-12 9:27:08)
	 * 
	 * @param：
	 * 
	 * @return： ******************************************
	 * @return boolean
	 * @param cbilltypecode
	 *            java.lang.String
	 */
	private boolean isNeedBB3(String cbilltypecode) {

		if (cbilltypecode != null
				&& (cbilltypecode
						.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_purchaseIn)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_saleOut)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_purchaseInit)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_saleInit)
						|| cbilltypecode.equalsIgnoreCase("3Q")
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_consignMachiningIn)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_consignMachiningOut)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_allocationIn)
						|| cbilltypecode
								.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_otherOut) || cbilltypecode
						.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_allocationOut)))
			return true;

		else
			return false;
	}

	/**
	 * 创建者：王乃军 功能：检查单据是否已签字（记账）。 参数： 返回：true：已签字 false：未签字 例外： 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean isSigned(String sBillPK) throws BusinessException,
			SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */
		// 读存货数据
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000201")/*
																				 * @res
																				 * "检查单据是否签字时未传入单据ID."
																				 */);
		// 缺省未签字，。
		Boolean bRet = new Boolean(false);
		StringBuffer sbSql = new StringBuffer(
				" SELECT cregister FROM ic_general_h WHERE dr=0 AND cgeneralhid='");
		sbSql.append(sBillPK.trim());
		sbSql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			// 无签字人id,表示未签字。
			if (rs.next()) {
				String cauditorid = rs.getString(1);
				nc.vo.scm.pub.SCMEnv.out("reg=" + cauditorid);
				if (cauditorid == null || cauditorid.trim().length() == 0)
					bRet = new Boolean(false);
				else
					bRet = new Boolean(true);
			} else
				// 如果找不到此单据,--->
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000208")/*
														 * @res
														 * "检查单据是否签字时找不到此单据。"
														 */);

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "signCheck",
				new Object[] { sBillPK });
		/** ********************************************************** */

		return bRet;
	}

	/**
	 * 创建者：张欣 功能：根据传入的公司ID，来源单据Hid和来源单据类型，检查单据是否已签字（记账）。 参数：String pk_corp,
	 * String sSourceBillHid, String sSourceBillType 返回：true：已签字 false：未签字 例外：
	 * 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 */
	public Boolean isSourceBillSigned(String pk_corp, String sSourceBillHid,
			String sSourceBillType) throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isSourceBillSigned", new Object[] { pk_corp, sSourceBillHid,
						sSourceBillType });
		/** ********************************************************** */
		Boolean bRet = null;
		// 读存货数据
		if (pk_corp == null || sSourceBillHid == null
				|| sSourceBillType == null) {
			nc.vo.scm.pub.SCMEnv
					.out("pk_corp or sourcebillhid or sourcebilltype is  null ERR.");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(
				" SELECT h.cregister FROM ic_general_h h Inner Join ic_general_b b on(h.cgeneralhid =b.cgeneralhid and h.dr=0 and b.dr=0) WHERE h.pk_corp='");
		sbSql.append(pk_corp.trim()).append("' And b.csourcetype = '").append(
				sSourceBillType).append("' And b.csourcebillhid ='").append(
				sSourceBillHid).append("' ");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			// 无签字人id,表示未签字。
			if (rs.next()) {
				String cauditorid = rs.getString(1);
				nc.vo.scm.pub.SCMEnv.out("reg=" + cauditorid);
				if (cauditorid == null || cauditorid.trim().length() == 0)
					bRet = new Boolean(false);
				else
					bRet = new Boolean(true);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isSourceBillSigned", new Object[] { pk_corp, sSourceBillHid,
						sSourceBillType });
		/** ********************************************************** */

		return bRet;
	}

	/**
	 * 创建者：张欣 功能：根据传入的公司ID，来源单据Hid和来源单据类型，检查单据是否已签字（记账）。 参数：String pk_corp,
	 * String sSourceBillHid, String sSourceBillType 返回：true：已签字 false：未签字 例外：
	 * 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 */
	public Boolean isSourceBillsSigned(String[] params, String sSourceBillType)
			throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isSourcesBillSigned", new Object[] { params, sSourceBillType });
		/** ********************************************************** */
		Boolean bRet = null;
		// 读存货数据
		String pk_corp = params[0];

		if (pk_corp == null || sSourceBillType == null) {
			nc.vo.scm.pub.SCMEnv
					.out("pk_corp or sourcebillbid or sourcebilltype is  null ERR.");
			return null;
		}
		StringBuffer sbSql = new StringBuffer(
				" SELECT h.cregister FROM ic_general_h h Inner Join ic_general_b b on(h.cgeneralhid =b.cgeneralhid and h.dr=0 and b.dr=0) WHERE h.pk_corp='");
		sbSql.append(pk_corp.trim()).append(
				"'  AND h.cbilltypecode <> '4X' And b.csourcetype = '").append(
				sSourceBillType);

		sbSql.append("' ");
		// And b.csourcebillbid in (");
		// 使用临时表
		sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"b.csourcebillbid", params));
		// for (int i = 1; i < params.length; i++) {
		// sbSql.append("'").append(params[i]).append("' ");
		// if (i != params.length - 1)
		// sbSql.append(" , ");
		// }
		// sbSql.append(")");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sbSql.toString());
			rs = stmt.executeQuery();
			// 无签字人id,表示未签字。
			if (rs.next()) {
				String cauditorid = rs.getString(1);
				nc.vo.scm.pub.SCMEnv.out("reg=" + cauditorid);
				if (cauditorid == null || cauditorid.trim().length() == 0)
					bRet = new Boolean(false);
				else
					bRet = new Boolean(true);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"isSourcesBillSigned", new Object[] { params, sSourceBillType });
		/** ********************************************************** */

		return bRet;
	}

	/**
	 * 创建者：王乃军 功能：存货序列号出库
	 * 
	 * 
	 * 考虑了冻结的序列号，因为待出库的序列号会被冻结
	 * 
	 * 
	 * 
	 * 参数： 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public void outSerials(GeneralBillHeaderVO voHeader,
			GeneralBillItemVO voItem, Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut, Vector vFreeze) throws BusinessException,
			SystemException, Exception {
		if (voItem == null || voHeader == null) {
			nc.vo.scm.pub.SCMEnv.out("vo null ERR.");
			return;
		}
		SerialVO[] voaSn = voItem.getSerial(); // 新序列号们

		if (voaSn == null || voaSn.length == 0) {
			nc.vo.scm.pub.SCMEnv.out("no sn,ret");
			return;
		}
		// String sBodyPK = voItem.getPrimaryKey(); //表体ID
		// String sTempSN = null; //临时的序列号
		// String sSNbodyPK = null; //返回的cgeneralbid
		String sFreezeID = null; // 冻结id,看表体上的freezeid是否与序列号上的cfreezeid是否一致，如果不一致就报错。
		SerialDMO dmoSN = new SerialDMO(); // 序列号dmo
		SerialVO voTempSN = null; // 临时序列号VO
		ArrayList alRet = null; // 返回的状态数组 [vo,vo]
		// 先查看一遍序列号的状态，都正确时再一起插入。
		int iCorrectCount = 0; // 正确计数器
		int iSNstatus = SerialVO.NOTEXIST; // 返回的状态
		// 读指定序列号的状态,可能已重复入库
		alRet = dmoSN.getSerialStatus(voItem.getCinventoryid(), voaSn);
		// -------------------- 这些序列号查不到了，业务错误 --------------------
		if (alRet != null && alRet.size() == 1 && alRet.get(0) != null
				&& ((SerialVO) alRet.get(0)).getVserialcode() == null) {
			// ------------------
			nc.vo.scm.pub.SCMEnv.out("-----> can'not find those sn");
			return;
			// ---------------
		} else if (alRet != null && alRet.size() > 0)
			// 设置仓库等其它数据
			for (int j = 0; j < alRet.size(); j++)
				if (alRet.get(j) != null) {
					voTempSN = (SerialVO) alRet.get(j);
					// 查看当前序列号的状态
					if (voTempSN.getSnStatus() != null) {
						iSNstatus = voTempSN.getSnStatus().intValue();

						// sTempSN = voTempSN.getVserialcode();

						// 出库还是入库？根据单据类型和数量的正负来决定。
						sFreezeID = voTempSN.getCfreezeid();
						// 出库，不存在此序列号，或已出库，出错
						// Vector==null will ignore this check.
						if (iSNstatus == SerialVO.NOTEXIST && vNotEx != null) {
							if (!vNotEx.contains(voTempSN))
								vNotEx.addElement(voTempSN);
						} else // 已出库但不是本张单据的此单据行，认为已出库--〉ERR。
						if (iSNstatus == SerialVO.OUTWH && vOut != null) {
							if (!vOut.contains(voTempSN))
								vOut.addElement(voTempSN);
						} else // 已冻结--〉ERR。看表体上的freezeid是否与序列号上的cfreezeid是否一致，如果不一致就报错。
						if (iSNstatus == SerialVO.FREEZE && sFreezeID != null
								&& !sFreezeID.equals(voItem.getCfreezeid())
								&& vFreeze != null) {
							if (!vFreeze.contains(voTempSN))
								vFreeze.addElement(voTempSN);
						} else {
							iCorrectCount++;
							// 设置入库表体ID,出库时作为唯一键的一部分。
							// zhy如果此处不设置setCinbillbodyid的值,则upate
							// bb2表时,就得不到[0]行以外的其他表体行对应的序列号,导致无法保存
							for (int i = 0; i < voaSn.length; i++) {
								if (voaSn[i].getCserialid().equals(
										voTempSN.getCserialid())) {
									voaSn[i].setCgeneralbid(voTempSN
											.getCgeneralbid());
									voaSn[i].setCinbillbodyid(voTempSN
											.getCgeneralbid());
									break;
								}
							}
							// voaSn[0].setCgeneralbid(voTempSN.getCgeneralbid());
							// voaSn[0].setCinbillbodyid(voTempSN.getCgeneralbid());

						}
						// else 12 Oct 序列号出库时不管是否是退回
						// if (iSNstatus == SerialDMO.RETURN && vRet!=null)
						// vRet.addElement(voTempSN);
					}
				}
		// 都正确-->入库
		if (voaSn != null && voaSn[0] != null && iCorrectCount == voaSn.length) {
			// 对于一行的数据来说，每个序列号的下列信息都是相同的。所以只需置一次。
			// 只有序列号不同
			voaSn[0].setCwarehouseid(voHeader.getCwarehouseid());
			// 如果是供应商管理的需要记录供应商,不是供应商管理的不记录供应商
			if (voHeader.getIsgathersettle().booleanValue()
					|| ((voItem.getInv().getIssupplierstock() != null) && "Y"
							.equals(voItem.getInv().getIssupplierstock())))
				voaSn[0].setCproviderid(voItem.getCvendorid());
			else
				voaSn[0].setCproviderid(null);

			voaSn[0].setCcustomerid(voHeader.getCcustomerid());
			// ten freeitems
			for (int free = 1; free <= 10; free++)
				voaSn[0].setAttributeValue("vfree" + free, voItem
						.getAttributeValue("vfree" + free));
			voaSn[0].setCinventoryid(voItem.getCinventoryid());
			voaSn[0].setVbatchcode(voItem.getVbatchcode());
			// ;''''''''''''''''''''..............
			// 出库还是入库？根据单据类型和数量的正负来决定。
			// 出库
			voaSn[0].setCoutbilltype(voHeader.getCbilltypecode());
			voaSn[0].setVoutbillcode(voHeader.getVbillcode());
			voaSn[0].setCoutbillheadid(voHeader.getCgeneralhid());
			voaSn[0].setCoutbillbodyid(voItem.getCgeneralbid());
			voaSn[0].setCproviderid(voItem.getCvendorid());
			dmoSN.outSerials(voaSn);
		}
		// release dmo ??? need it?
		dmoSN = null;
	}

	/**
	 * 创建者：王乃军 功能：存货序列号出库
	 * 
	 * 
	 * 考虑了冻结的序列号，因为待出库的序列号会被冻结
	 * 
	 * 
	 * 
	 * 参数： 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.InvVO
	 * @param sWhID
	 *            java.lang.String
	 * @param sInvID
	 *            java.lang.String
	 */
	public String outSerialsWithTest(GeneralBillHeaderVO voHeader,
			GeneralBillItemVO voItem, Vector vEx, Vector vNotEx, Vector vRet,
			Vector vOut, Vector vFreeze) throws BusinessException,
			SystemException, Exception {
		if (voItem == null || voHeader == null) {
			nc.vo.scm.pub.SCMEnv.out("vo null ERR.");
			return null;
		}
		SerialVO[] voaSn = voItem.getSerial(); // 新序列号们

		if (voaSn == null || voaSn.length == 0) {
			nc.vo.scm.pub.SCMEnv.out("no sn,ret");
			return null;
		}
		SerialDMO dmoSN = new SerialDMO(); // 序列号dmo
		// StringBuffer sbSql = new StringBuffer("UPDATE ic_general_bb2 SET
		// ccustomerid=");
		// if (param.get(0) == null)
		// sbSql.append("NULL ");
		// else {
		// sbSql.append("'");
		// sbSql.append(param.get(0));
		// sbSql.append("'");

		// }
		// sbSql
		// .append(", coutbilltype='")
		// .append(param.get(1))
		// .append("', voutbillcode='")
		// .append(param.get(2))
		// .append("', coutbillheadid='")
		// .append(param.get(3))
		// .append("', coutbillbodyid='")
		// .append(param.get(4))
		// .append("' WHERE ");
		// attention to sequence.......
		ArrayList alParam = new ArrayList();
		alParam.add(voHeader.getCcustomerid());
		alParam.add(voHeader.getCbilltypecode());
		alParam.add(voHeader.getVbillcode());
		alParam.add(voHeader.getCgeneralhid());
		alParam.add(voItem.getCgeneralbid());
		return dmoSN.outSerialsWithTest(alParam, voaSn);

	}

	/**
	 * 创建者：王乃军 功能：解析关联单据信息 参数： 返回： 例外： 日期：(2001-10-18 11:46:08)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	public String parseBillInfo(ArrayList alBillInfo, String sMsgHeader,
			String sMsgTail) {
		StringBuffer sbCmsg = null;
		if (alBillInfo != null && alBillInfo.size() > 0) {
			// 提示
			sbCmsg = new StringBuffer(sMsgHeader);

			String saBillInfo[] = null;
			for (int c = 0; c < alBillInfo.size(); c++) {
				saBillInfo = (String[]) alBillInfo.get(c);
				// 类型
				sbCmsg.append(saBillInfo[1]);
				sbCmsg.append(",");
				// 单据号
				sbCmsg.append(saBillInfo[2]);
				sbCmsg.append("\n");
			}

			// 结论
			sbCmsg.append(sMsgTail);
		}
		if (sbCmsg != null)
			return sbCmsg.toString();
		else
			return null;

	}

	/**
	 * 此处方法说明为根据主表的关键字段进行查询子表的数据。 创建日期：(2001-7-9 20:06:40)
	 * 
	 * @return nc.vo.pub.CircularlyAccessibleValueObject
	 * @param sBillPK
	 *            java.lang.String
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllBodyData(
			java.lang.String sBillPK) throws BusinessException {
		GeneralBillItemVO[] voaBody = null;
		if (sBillPK != null) {
			// 其他的单据
			String saBillPK[] = new String[] { sBillPK };
			voaBody = queryPureItemData(saBillPK);
			voaBody = getFreeItemData(voaBody);
		}

		return voaBody;
	}

	/**
	 * 此处方法说明为根据主表的关键字段进行查询子表的数据。 创建日期：(2001-7-9 20:06:40)
	 * 
	 * @return nc.vo.pub.CircularlyAccessibleValueObject
	 * @param sBillPK
	 *            java.lang.String
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllBodyData(
			java.lang.String sBillPK, String sWhere) throws BusinessException {

		boolean isVMIQueryBill = false;
		int mark = sWhere
				.indexOf("and 'VMI_ONCOND_ITEM_QRY'='VMI_ONCOND_ITEM_QRY'");
		QryConditionVO voQryCond = null;
		if (mark > 0) {
			isVMIQueryBill = true;
			String sWhereRight = sWhere.substring(mark + 47); // 47代表长度：and
																// 'VMI_ONCOND_ITEM_QRY'='VMI_ONCOND_ITEM_QRY'
			sWhere = sWhere.substring(0, mark);

			ConditionVO[] voCondition = GenMethod.getConditionVO(sWhereRight);
			voQryCond = new QryConditionVO(sWhere);
			voQryCond.setParam(QryConditionVO.QRY_CONDITIONVO, voCondition);

		}
		GeneralBillItemVO[] voaBody = null;
		try {
			if (sBillPK != null) {

				// 获取仓库,用户
				String[] skeys = nc.vo.ic.pub.GenMethod.splitID(sBillPK);
				String curcorp = null, cwarehouseid = null, cuserid = null, srcbilltype = null, curbilltype = null;
				if (skeys != null && skeys.length >= 6) {
					sBillPK = skeys[0];
					curcorp = skeys[1];
					cwarehouseid = skeys[2];
					cuserid = skeys[3];
					srcbilltype = skeys[4];
					curbilltype = skeys[5];
				}

				// 其他的单据
				String saBillPK[] = new String[] { sBillPK };
				if (isVMIQueryBill) {
					voaBody = queryPureItemDataForVMI(saBillPK, voQryCond);
				} else {
					voaBody = queryPureItemData(saBillPK, sWhere);
				}
				voaBody = getFreeItemData(voaBody);

				// 按库管员过滤单据
				IBillType billType = BillTypeFactory.getInstance().getBillType(
						curbilltype);
				if (curbilltype != null && billType.typeOf(ModuleCode.IC)
						&& !curbilltype.equals(BillTypeConst.IC_WAST)) {
					voaBody = ICCommonBusiImpl.filterVoByWhManagerid(curcorp,
							cwarehouseid, cuserid, voaBody);
				}

			}
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
		return voaBody;
	}

	/**
	 * 此处方法说明为根据查询条件获得的条件约束及在固化 的条件语句组成条件语句及该方法中定义的的sql语句 进行组合查询。 创建日期：(2001-7-9
	 * 19:58:37)
	 * 
	 * @return nc.vo.pub.AggregatedValueObject
	 * @param whereString
	 *            java.lang.String
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllHeadData(
			java.lang.String whereString) throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"queryAllHeadData", new Object[] { whereString });
		/** ********************************************************** */
		nc.vo.scm.pub.SCMEnv.out("wo ??" + whereString);
		
		//VMI主子表查询时,由于whereString自动关联了billType = '4I' ,需要去掉
		int mark = whereString.indexOf("'VMI_ONCOND_ITEM_QRY'='VMI_ONCOND_ITEM_QRY'");
		
		if(mark >= 0){
			//1. del:'VMI_ONCOND_ITEM_QRY'='VMI_ONCOND_ITEM_QRY'
			//2. del:billtypecode = '4I'
			
			whereString = whereString.replace("'VMI_ONCOND_ITEM_QRY'='VMI_ONCOND_ITEM_QRY'", "(1=1)");
			
			whereString = whereString.replace("cbilltypecode='4I'", "(1=1)");
			
			/*int i = whereString.indexOf("cbilltypecode") ;  //cbilltypecode的长度为13
			int j = whereString.indexOf("'4I'") ;
			if(i>=0&&j>i){
				//whereString 包含cbilltypecode ， '4I' ，并且二者直接有 =
				String tmp = whereString.substring(i+13,j);
				
				if(tmp.indexOf("=")>0){
					
				}
			}*/
		}
		
		
		// 从voConds中得到关联语句：
		DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
		ConditionVO[] voCondition = GenMethod.getConditionVO(whereString);
		String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
		StringBuffer sbSQL = new StringBuffer("select ");
		sbSQL.append(" distinct ");
		try {
			sbSQL.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,
					"head"));
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
		sbSQL.append(" from ic_general_h head");
		sbSQL
				.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
		// 动态关联：
		if (sUnionSQL != null && sUnionSQL.length() > 0)
			sbSQL.append(sUnionSQL);
		sbSQL.append(" where head.dr=0");
		sbSQL.append(" and body.dr=0 ");
		if (whereString != null && whereString.length() > 0) {
			sbSQL.append(" and (");
			sbSQL.append(whereString + ")");
		}
		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "queryAllHeadData",
				new Object[] { whereString });
		/** ********************************************************** */

		return queryHeadDataBySql(sbSQL.toString());

	}

	/**
	 * 此处方法说明为根据查询条件获得的条件约束及在固化 的条件语句组成条件语句及该方法中定义的的sql语句 进行组合查询。 被205 215
	 * 借入、借出两个单据所调用 //还回单类型 sRetBillTypeCode
	 * 
	 * 创建日期：(2001-7-9 19:58:37)
	 * 
	 * @return nc.vo.pub.AggregatedValueObject
	 * @param whereString
	 *            java.lang.String
	 */
	public nc.vo.pub.CircularlyAccessibleValueObject[] queryAllHeadData(
			java.lang.String whereString, String sRetBillTypeCode,
			Integer bRetBillInOutFlag) throws BusinessException {
		nc.vo.scm.pub.SCMEnv.out("wo ??" + whereString);
		// 自身单据的数量字段名。
		String sMyNumKey = "noutnum", sMyAstNumKey = "noutassistnum";
		// 还回单据的数量字段名。
		String sRetNumKey = "ninnum", sRetAstNumKey = "ninassistnum";
		if (bRetBillInOutFlag != null
				&& bRetBillInOutFlag.intValue() == InOutFlag.OUT) {
			sRetNumKey = "noutnum";
			sRetAstNumKey = "noutassistnum";
			sMyNumKey = "ninnum";
			sMyAstNumKey = "ninassistnum";
		}
		// 从voConds中得到关联语句：
		DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
		ConditionVO[] voCondition = GenMethod.getConditionVO(whereString);
		String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
		StringBuffer sbSQL = new StringBuffer("SELECT ");
		sbSQL.append(" DISTINCT ");
		try {
			sbSQL.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,
					"head"));
			// 注释下面几行，否则会查询出多行表头记录，zhy2005-03-23，可以删掉
			// sbSQL.append("\n ,body.ntranoutnum,body.ntranoutastnum ");
			// sbSQL.append("," + sMyNumKey + "," + sMyAstNumKey + ",");
			// sbSQL.append(" body.nretnum,\n");
			// sbSQL.append(" body.nretastnum\n");
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}
		sbSQL.append(" FROM ic_general_h head");
		sbSQL
				.append(" INNER  JOIN ic_general_b body ON head.cgeneralhid=body.cgeneralhid ");
		// 动态关联：
		if (sUnionSQL != null && sUnionSQL.length() > 0)
			sbSQL.append(sUnionSQL);
		sbSQL.append(" WHERE head.dr=0");
		sbSQL.append(" AND body.dr=0 ");
		if (whereString != null && whereString.length() > 0) {
			sbSQL.append(" AND (");
			sbSQL.append(whereString + ")");
		}
		sbSQL.append(" AND (COALESCE(" + sMyNumKey
				+ ",0.0)-COALESCE(ntranoutnum,0.0)-COALESCE(nretnum,0.0))>0 ");

		return queryHeadDataBySql(sbSQL.toString());

	}

	/**
	 * 创建者：王乃军 功能：检查单据是否已签字（记账）。 参数： 返回：true：已签字 false：未签字 例外： 日期：(2001-6-14
	 * 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public String queryBillCode(String sBillPK) throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getBillStatus",
				new Object[] { sBillPK });
		/** ********************************************************** */
		// 读存货数据
		if (sBillPK == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000201")/*
																				 * @res
																				 * "检查单据是否签字时未传入单据ID."
																				 */);
		// 缺省未签字，。
		String sRet = BillStatus.FREE;
		String sSql = " SELECT vbillcode FROM ic_general_h WHERE dr=0 AND cgeneralhid=?";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql.toString());
			stmt.setString(1, sBillPK.trim());
			rs = stmt.executeQuery();

			if (rs.next()) {
				sRet = rs.getString(1);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "getBillStatus",
				new Object[] { sBillPK });
		/** ********************************************************** */
		return sRet;
	}

	/**
	 * 创建者：余大英 功能：查询指定PK的单据头。 参数： 返回： 例外： 日期：(2001-11-09 09:38:02)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillHeaderVO
	 * @param sHeadPK
	 *            String
	 */
	public GeneralBillHeaderVO queryBillHead(String sHeadPK)
			throws BusinessException {
		if (sHeadPK == null) {
			nc.vo.scm.pub.SCMEnv.out("head pk null");
			return null;
		}
		// set sql
		String sSql = "SELECT "
				// + GeneralSqlString.getSQL_PURE_HEAD_FIELD()
				+ GenMethod.getSelectFields(GeneralBillHeaderVO.class, null)
				+ "  FROM ic_general_h WHERE dr=0 AND cgeneralhid = '"
				+ sHeadPK.trim() + "'";
		// exec query
		GeneralBillHeaderVO[] voaHeader = queryHeadDataBySql(sSql);
		if (voaHeader != null && voaHeader.length > 0)
			return voaHeader[0];
		else
			return null;
	}

	/**
	 * 创建者：王乃军 功能：查ts 参数： 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	public String queryBillHeadTs(String sHeadPK) throws SQLException,
			BusinessException, SystemException {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String sTs = null; // 时间戳
		try {

			con = getConnection();
			stmt = con
					.prepareStatement("select ts  from ic_general_h where dr=0 AND cgeneralhid = ?");
			stmt.setString(1, sHeadPK);
			rs = stmt.executeQuery();
			if (rs.next())
				sTs = rs.getString(1);

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return sTs;
	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的单据行。 参数： 返回： 例外： 日期：(2001-6-12 20:38:02)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public GeneralBillItemVO queryBillItem(String sBodyPK) throws SQLException,
			BusinessException, SystemException {
		if (sBodyPK == null) {
			nc.vo.scm.pub.SCMEnv.out("head pk null");
			return null;
		}

		StringBuffer sbSql = new StringBuffer("SELECT ");
		try {
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					null));
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		sbSql
				.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
		sbSql
				.append(",case when hsl is null then null else (coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) end as nleftastnum");
		sbSql
				.append(",(coalesce(ningrossnum,noutgrossnum,0.0) - coalesce(nretgrossnum,0.0)) as nleftgrsnum");
		sbSql.append(" from ic_general_b body where cgeneralbid='");
		sbSql.append(sBodyPK);
		sbSql.append("'");
		// exec query
		GeneralBillItemVO[] voaBillItem = queryItemDataBySql(sbSql.toString());
		if (voaBillItem != null && voaBillItem.length > 0)
			return voaBillItem[0];
		else
			return null;
	}

	/**
	 * 创建人：刘家清 创建日期：2007-6-26上午11:24:24 创建原因：查询指定PK的单据行。 参数： 返回： 例外：
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param String[]
	 *            sBodyPK
	 */
	public GeneralBillItemVO[] queryBillItem(String[] sBodyPK)
			throws SQLException, BusinessException, SystemException {
		if (sBodyPK == null) {
			nc.vo.scm.pub.SCMEnv.out("head pk null");
			return null;
		}

		StringBuffer sbSql = new StringBuffer("SELECT ");
		try {
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					null));
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		sbSql
				.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
		sbSql
				.append(",case when hsl is null then null else (coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) end as nleftastnum");
		sbSql
				.append(",(coalesce(ningrossnum,noutgrossnum,0.0) - coalesce(nretgrossnum,0.0)) as nleftgrsnum");
		// sbSql.append(" from ic_general_b body where cgeneralbid='");
		sbSql.append(" from ic_general_b body where 1=1");
		sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
				"cgeneralbid", sBodyPK));
		// sbSql.append(sBodyPK);
		// sbSql.append("'");
		// exec query
		GeneralBillItemVO[] voaBillItem = queryItemDataBySql(sbSql.toString());
		if (voaBillItem != null && voaBillItem.length > 0)
			return voaBillItem;
		else
			return null;
	}

	/**
	 * 此处插入方法说明。 查询指定单据的条码 通过单据单据ArrayList 创建日期：(2004-3-24 13:48:01)
	 * 
	 * @param ArrayList
	 *            alBillVO 单据ArrayList *
	 */
	public void queryBillItemBarCode(ArrayList alBillVO) throws Exception {
		ArrayList alBillItem = new ArrayList();
		try {
			if (alBillVO != null && alBillVO.size() > 0) {

				GeneralBillVO billvo = null;
				GeneralBillHeaderVO headervo = null;
				GeneralBillItemVO[] billItemvos = null;

				int iLen = alBillVO.size();
				String[] sHPK = new String[iLen];
				for (int i = 0; i < iLen; i++) {
					billvo = (GeneralBillVO) alBillVO.get(i);
					headervo = (GeneralBillHeaderVO) billvo.getParentVO();
					sHPK[i] = headervo.getPrimaryKey();
					billItemvos = (GeneralBillItemVO[]) billvo.getChildrenVO();
					if (billItemvos != null && billItemvos.length > 0) {
						for (int n = 0; n < billItemvos.length; n++)
							alBillItem.add(billItemvos[n]);
					}
				}

				if (alBillItem != null && alBillItem.size() > 0) {
					GeneralBillItemVO[] billAllItemvos = new GeneralBillItemVO[alBillItem
							.size()];
					alBillItem.toArray(billAllItemvos);
					queryBillItemBarCode(billAllItemvos, sHPK);
				}
			}
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		}

	}

	/**
	 * 此处插入方法说明。 查询指定单据的条码 通过单据表体ID 创建日期：(2004-3-24 13:48:01)
	 * 
	 * @param voaItem
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO[]
	 * @param saBillPK
	 *            java.lang.String[]
	 */
	public void queryBillItemBarCode(nc.vo.ic.pub.IBillItemBarcodeVO[] voaItem)
			throws BusinessException {

		if (voaItem == null || voaItem.length == 0)
			return;

		String[] sBillItemID = new String[voaItem.length];
		for (int i = 0; i < voaItem.length; i++) {
			sBillItemID[i] = voaItem[i].getCgeneralbid();
		}
		nc.bs.ic.pub.bc.BarCodeDMO barCodeDMO = null;
		BarCodeVO[] barcodeVOs;
		try {
			barCodeDMO = new nc.bs.ic.pub.bc.BarCodeDMO();

			barcodeVOs = barCodeDMO.queryAllByBIDs(sBillItemID);
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}

		if (barcodeVOs == null || barcodeVOs.length == 0)
			return;

		Hashtable htbBIDBarcodeItems = new Hashtable();
		String sBID = null;

		// 把查询结果放到Hashtable VO中去
		ArrayList alBarcodeVO = new ArrayList();
		for (int i = 0; i < barcodeVOs.length; i++) {
			sBID = barcodeVOs[i].getCgeneralbid();
			if (sBID == null || sBID.length() == 0)
				continue;
			if (sBID != null && htbBIDBarcodeItems.containsKey(sBID)) {
				alBarcodeVO = (ArrayList) htbBIDBarcodeItems.get(sBID);
				alBarcodeVO.add(barcodeVOs[i]);
			} else {
				alBarcodeVO = new ArrayList();
				alBarcodeVO.add(barcodeVOs[i]);
				htbBIDBarcodeItems.put(sBID, alBarcodeVO);
			}
		}

		// 遍历voaItem，找到结果VO放到billitem中去
		for (int i = 0; i < voaItem.length; i++) {
			sBID = voaItem[i].getCgeneralbid();
			if (sBID != null && htbBIDBarcodeItems.containsKey(sBID)) {
				alBarcodeVO = (ArrayList) htbBIDBarcodeItems.get(sBID);
				if (alBarcodeVO != null && alBarcodeVO.size() > 0) {
					BarCodeVO[] barcodebillitemVOs = new BarCodeVO[alBarcodeVO
							.size()];
					alBarcodeVO.toArray(barcodebillitemVOs);
					voaItem[i].setBarCodeVOs(barcodebillitemVOs);
				}
			}
		}

	}

	/**
	 * 此处插入方法说明。 查询指定单据的条码 通过单据表头ID 创建日期：(2004-3-24 13:48:01)
	 * 
	 * @param voaItem
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO[]
	 * @param saBillPK
	 *            java.lang.String[] 单据表头ID数组
	 */
	public void queryBillItemBarCode(nc.vo.ic.pub.IBillItemBarcodeVO[] voaItem,
			String[] saBillPK) throws Exception {

		if (voaItem == null || voaItem.length == 0 || saBillPK == null
				|| saBillPK.length == 0)
			return;

		nc.bs.ic.pub.bc.BarCodeDMO barCodeDMO = new nc.bs.ic.pub.bc.BarCodeDMO();

		BarCodeVO[] barcodeVOs = barCodeDMO.queryAllByHIDs(saBillPK);

		if (barcodeVOs == null || barcodeVOs.length == 0)
			return;

		Hashtable htbBIDBarcodeItems = new Hashtable();
		String sBID = null;

		// 把查询结果放到Hashtable VO中去
		ArrayList alBarcodeVO = new ArrayList();
		for (int i = 0; i < barcodeVOs.length; i++) {
			sBID = barcodeVOs[i].getCgeneralbid();
			if (sBID == null || sBID.length() == 0)
				continue;
			if (sBID != null && htbBIDBarcodeItems.containsKey(sBID)) {
				alBarcodeVO = (ArrayList) htbBIDBarcodeItems.get(sBID);
				alBarcodeVO.add(barcodeVOs[i]);
			} else {
				alBarcodeVO = new ArrayList();
				alBarcodeVO.add(barcodeVOs[i]);
				htbBIDBarcodeItems.put(sBID, alBarcodeVO);
			}
		}

		// 遍历voaItem，找到结果VO放到billitem中去
		for (int i = 0; i < voaItem.length; i++) {
			sBID = voaItem[i].getCgeneralbid();
			if (sBID != null && htbBIDBarcodeItems.containsKey(sBID)) {
				alBarcodeVO = (ArrayList) htbBIDBarcodeItems.get(sBID);
				if (alBarcodeVO != null && alBarcodeVO.size() > 0) {
					BarCodeVO[] barcodebillitemVOs = new BarCodeVO[alBarcodeVO
							.size()];
					alBarcodeVO.toArray(barcodebillitemVOs);
					voaItem[i].setBarCodeVOs(barcodebillitemVOs);
				}
			}
		}

	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的单据行。 参数： sHeadPK：表体ID boolean bLoadSN:是否读取序列号 boolean
	 * bLoadLocator:是否读取货位 返回： 例外： 日期：(2001-6-12 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public GeneralBillItemVO[] queryBillItemByBillPk(String sHeadPK,
			boolean bLoadSN, boolean bLoadLocator) throws BusinessException {
		if (sHeadPK == null) {
			nc.vo.scm.pub.SCMEnv.out("head pk null");
			return null;
		}
		String saBillPK[] = new String[] { sHeadPK };
		GeneralBillItemVO[] voaRetBillItem = queryPureItemData(saBillPK);

		try {
			if (voaRetBillItem != null && voaRetBillItem.length > 0
					&& (bLoadSN || bLoadLocator)) { // 如果需要读序列号、货位，需要PK数组
				// 构造空头单据。
				GeneralBillVO voTempBill = new GeneralBillVO();
				voTempBill.setChildrenVO(voaRetBillItem);
				// 如果需要读序列号
				if (bLoadSN) {
					// 序列号
					SerialDMO sndmo = new SerialDMO();
					ArrayList alSN = sndmo.queryByBillPK2(sHeadPK);
					voTempBill.setSNs(alSN);
				}
				// 如果需要读货位
				if (bLoadLocator) {
					// 查货位
					LocatorDMO ldmo = new LocatorDMO();
					ArrayList alLocator = ldmo.queryByBillPK2(sHeadPK);
					voTempBill.setLocators(alLocator);
				}
			}
		} catch (Exception e) {
			// 日志异常
			nc.vo.scm.pub.SCMEnv.out(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}

		return voaRetBillItem;
	}

	/**
	 * 创建者：余大英 功能：查询指定PK的单据行(包含bb1,bb2)。 参数：sHeadPK
	 * 
	 * 返回： 例外： 日期：(2001-6-12 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public GeneralBillItemVO[] queryBillItemForCopy(String sHeadPK)
			throws SQLException, BusinessException, Exception {
		GeneralBillItemVO[] voItems = queryBillItemByBillPk(sHeadPK, true, true);
		if (voItems != null && voItems.length > 0) {
			SettlementDMO dmo = new SettlementDMO();
			Hashtable htBB3 = dmo.queryBillItembb3ByBillPK(sHeadPK);
			if (htBB3 != null && htBB3.size() > 0) {
				String bid = null;
				nc.vo.ic.pub.settlement.SettlementVO vbb3 = null;
				for (int i = 0; i < voItems.length; i++) {
					bid = voItems[i].getCgeneralbid();
					if (htBB3.containsKey(bid)) {
						vbb3 = (nc.vo.ic.pub.settlement.SettlementVO) htBB3
								.get(bid);
						voItems[i]
								.setBB3VO(new nc.vo.ic.pub.settlement.SettlementVO[] { vbb3 });

					}

				}

			}
		}

		return voItems;

		// 复制bb3，结算数据
	}

	/**
	 * <p>
	 * 删除母子表的所有内容。
	 * <p>
	 * 创建日期：(2001-5-14)
	 * 
	 * @param key
	 *            String
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public GeneralBillItemVO queryBillItemQtyInfo(String sBodyPK)
			throws SQLException, BusinessException, SystemException {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		GeneralBillItemVO voBillItem = new GeneralBillItemVO();
		try {

			con = getConnection();
			stmt = con
					.prepareStatement("SELECT  noutnum, noutassistnum,  ninnum, ninassistnum FROM ic_general_b WHERE dr=0 AND cgeneralbid = ?");
			stmt.setString(1, sBodyPK);
			rs = stmt.executeQuery();
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();

			if (rs.next())
				gm.setData(rs, voBillItem, 1, 4, new String[] { "noutnum",
						"noutassistnum", "ninnum", "ninassistnum" });

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return voBillItem;
	}

	/**
	 * 此处插入方法说明。 通过单据的表头ID查询表体ID,来源单据ID 创建日期：(2004-4-20 16:28:53)
	 * 
	 * @return java.lang.String
	 * @param sBID
	 *            java.lang.String 单据的表体ID,
	 * @param sSourceID
	 *            java.lang.String来源单据ID
	 */
	public HashMap queryBillItemSourceIDs(String sHIDsubSql,
			String sSourdeBillType) throws Exception {

		HashMap htbItem = new HashMap();
		String sCsourceIDfield = "csourcebillhid";
		if ("4K".equalsIgnoreCase(sSourdeBillType))

		{
			sCsourceIDfield = "csourcebillbid";
		} else {
			sCsourceIDfield = "cfirstbillbid";
		}

		String sql = "select cgeneralbid," + sCsourceIDfield
				+ " from ic_general_b where cgeneralhid in " + sHIDsubSql
				+ " and csourcebillbid is not null  and dr=0";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			rs = stmt.executeQuery();

			String cgeneralbid = null;
			String csourcebillbid = null;
			ArrayList alIDs = null;
			HashMap htbItemKey = new HashMap();
			while (rs.next()) {
				cgeneralbid = rs.getString(1);
				csourcebillbid = rs.getString(2);
				if (cgeneralbid != null && csourcebillbid != null) {
					if (htbItemKey.containsKey(csourcebillbid)) {
						alIDs = (ArrayList) htbItem.get(csourcebillbid);
						alIDs.add(cgeneralbid);
					} else {
						htbItemKey.put(csourcebillbid, csourcebillbid);
						alIDs = new ArrayList();
						alIDs.add(cgeneralbid);
						htbItem.put(csourcebillbid, alIDs);
					}
				}
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return htbItem;
	}

	/**
	 * 
	 * 描述：根据来源单据类型编码和来源单据行号查询库存单据行VO对象
	 * <p>
	 * <b>参数说明</b>
	 * 
	 * @param billType
	 *            库存单据类型，允许为空
	 * @param sourceBillTypeCode
	 *            来源单据类型编码，不能为空
	 * @param sourceBillBID
	 *            来源单据行ID数组，不能为空
	 * @return 库存单据行VO数组
	 * @throws BusinessException
	 *             <p>
	 * @author duy
	 * @time 2008-11-19 下午03:01:45
	 */
	public GeneralBillItemVO[] queryBillItemBySourceBID(String billType,
			String sourceBillTypeCode, String[] sourceBillBID)
			throws BusinessException {
		if (sourceBillTypeCode == null || sourceBillBID == null) {
			nc.vo.scm.pub.SCMEnv
					.out("sourceBillTypeCode or sourceBillBID is null");
			return null;
		}

		StringBuffer sbSql = new StringBuffer("SELECT ");
		try {
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					null));
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		sbSql
				.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
		sbSql
				.append(",case when hsl is null then null else (coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) end as nleftastnum");
		sbSql
				.append(",(coalesce(ningrossnum,noutgrossnum,0.0) - coalesce(nretgrossnum,0.0)) as nleftgrsnum");
		sbSql
				.append(
						" from ic_general_b body where dr = 0 and csourcetype = '")
				.append(sourceBillTypeCode).append("'");
		sbSql.append(" ").append(
				SQLUtil.formInSQL("csourcebillbid", sourceBillBID));
		if (billType != null && billType.length() > 0)
			sbSql.append(" and ").append(IItemKey.cbodybilltypecode).append(
					" = '").append(billType).append("'");

		// exec query
		GeneralBillItemVO[] voaBillItem = queryItemDataBySql(sbSql.toString());
		if (voaBillItem != null && voaBillItem.length > 0)
			return voaBillItem;
		else
			return null;
	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的单据行的ts。 参数： 返回：指定PK的单据行的ts数组
	 * 
	 * 例外： 日期：(2001-6-12 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public GeneralBillItemVO[] queryBillItemTs(String sHeadPK)
			throws SQLException, BusinessException, SystemException {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		// 返回值
		Vector vResult = new Vector();
		GeneralBillItemVO voTemp = null;
		// 表体PK
		String sBodyPK = null;
		// 时间戳
		String sTs = null;
		try {

			con = getConnection();
			stmt = con
					.prepareStatement("select cgeneralbid,ts from ic_general_b where dr=0 AND cgeneralhid = ?");
			stmt.setString(1, sHeadPK);
			rs = stmt.executeQuery();
			while (rs.next()) {
				sBodyPK = rs.getString(1);
				sTs = rs.getString(2);
				// 如果都不为空，置入hashtable
				if (sBodyPK != null && sTs != null) {
					voTemp = new GeneralBillItemVO();
					voTemp.setPrimaryKey(sBodyPK);
					voTemp.setTs(sTs);
					vResult.addElement(voTemp);
				}

			}

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		if (vResult.size() > 0) {
			GeneralBillItemVO voaRet[] = new GeneralBillItemVO[vResult.size()];
			vResult.copyInto(voaRet);
			return voaRet;
		} else
			return null;

	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。 参数： 返回： 例外： 日期：(2001-6-12 20:38:02)
	 * 修改日期，修改人，修改原因，注释标志： 2002-01-16 , 王乃军，移植到oracle
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryBillByPks(String[] pks, boolean isAllItem)
			throws BusinessException {
		if (pks == null || pks.length <= 0)
			return null;
		final String code = "head.cgeneralhid";
		nc.vo.pub.query.ConditionVO[] voaCond = new nc.vo.pub.query.ConditionVO[1];
		voaCond[0] = new nc.vo.pub.query.ConditionVO();
		voaCond[0].setFieldCode(code);
		voaCond[0].setLogic(true);
		voaCond[0].setOperaCode(" in ");

		String insql = GeneralSqlString.formInSQL(code, pks);
		String insqlbak = " 1=1 " + insql;
		insql = insql.trim();
		if (insql.indexOf(code) >= 0)
			insql = insql.substring(insql.indexOf(code) + code.length());

		QryConditionVO qryconvo = new QryConditionVO(insqlbak);

		qryconvo.setParam(QryConditionVO.QRY_CONDITIONVO, voaCond);
		if (isAllItem)
			qryconvo.setIntParam(0, GeneralBillVO.QRY_FULL_BILL);
		else
			qryconvo.setIntParam(0, GeneralBillVO.QRY_HEAD_ONLY_PURE);
		try {
			return queryBills(qryconvo);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}

	public ArrayList queryBillByPks(String[] pks) throws BusinessException {
		return queryBillByPks(pks, false);
	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。 参数： 返回： 例外： 日期：(2001-6-12 20:38:02)
	 * 修改日期，修改人，修改原因，注释标志： 2002-01-16 , 王乃军，移植到oracle
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryBills(QryConditionVO voQryCond)
			throws BusinessException {

		// 处理条件
		UFBoolean boutnumnull = null;
		if (voQryCond != null) {
			if (voQryCond.getParam(33) != null) {
				voQryCond.setIntParam(0, GeneralBillVO.QRY_FULL_BILL_PURE);
				if ("Y".equals(voQryCond.getParam(33)))
					boutnumnull = new UFBoolean(false);
				else

					boutnumnull = new UFBoolean(true);

			}
		}

		// 得到条件,如果有就是合法的，长度不可为零。
		int iQryMode = GeneralBillVO.QRY_FULL_BILL_PURE;
		if (voQryCond != null)
			iQryMode = voQryCond.getIntParam(0);
		ArrayList alRet = null;
		try {
			switch (iQryMode) {
			// add query pure field
			case GeneralBillVO.QRY_HEAD_ONLY_PURE:
				// 在方法内部实现查询条码数据
				alRet = queryPureHeadersAndPartItems(voQryCond);
				break;
			case GeneralBillVO.QRY_ITEM_ONLY_PURE:
				if (voQryCond.getParam(0) == null)
					alRet = null;
				else {
					String saBillPK[] = (String[]) voQryCond.getParam(0);
					GeneralBillItemVO[] voaAllItem = (GeneralBillItemVO[]) queryPureItemData(saBillPK);
					// 实现查询条码数据
					queryBillItemBarCode(voaAllItem, saBillPK);
					alRet = sumVO(saBillPK, voaAllItem);
				}
				break;
			default:
				alRet = queryPureWholeBills(voQryCond);

				// break;
				// default :
				// //没有添加查询条码数据
				// alRet = queryWholeBills(voQryCond);
			}
			long lTime33 = System.currentTimeMillis();
			nc.vo.scm.pub.SCMEnv.out("-----send......." + lTime33);
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		if (boutnumnull != null && alRet != null) {
			ArrayList alNew = null;
			boolean isNull = boutnumnull.booleanValue();
			GeneralBillVO voBill = null;
			GeneralBillItemVO[] voItems = null;
			int count = 0;
			for (int i = 0; i < alRet.size(); i++) {
				voBill = (GeneralBillVO) alRet.get(i);
				voItems = voBill.getItemVOs();
				count = 0;
				for (int j = 0; j < voItems.length; j++) {
					if (isNull && voItems[j].getNoutnum() == null)
						count++;

					if (!isNull && voItems[j].getNoutnum() != null)
						count++;

				}
				if (count == voItems.length) {
					if (alNew == null)
						alNew = new ArrayList();
					alNew.add(voBill);

				}

			}
			alRet = alNew;

		}

		return alRet;
	}

	/**
	 * 生产制造接口使用方法. 功能：通过表体的来源单据Bid, 得到多张单据的Hid, 操作员ID, 公司ID 参数： 返回： 例外：
	 * 日期：(2001-10-18 12:44:36) 修改日期，修改人，修改原因，注释标志：
	 */
	public ArrayList queryBillsBySourceBIDs(String[] sourceHeadIDs)
			throws SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO",
				"queryBillsBySourceBIDs", new Object[] { sourceHeadIDs });
		/** ********************************************************** */
		if (sourceHeadIDs == null || sourceHeadIDs.length == 0) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return null;
		}
		StringBuffer sql = new StringBuffer(
				"select distinct h.cgeneralhid, coperatorid,h.pk_corp from ic_general_h h inner join ic_general_b b on(h.cgeneralhid = b.cgeneralhid) where b.dr=0 AND h.dr=0 AND b.csourcebillbid in(");
		for (int i = 0; i < sourceHeadIDs.length; i++) {
			sql.append("'").append(sourceHeadIDs[i]).append("' ");
			if (i != sourceHeadIDs.length - 1)
				sql.append(" , ");
		}
		sql.append(")");

		String[] aryResult = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		ArrayList alResult = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			// stmt.setString(1, sourceHeadID);
			rs = stmt.executeQuery();
			alResult = new ArrayList();
			//
			while (rs.next()) {
				aryResult = new String[3];
				aryResult[0] = rs.getString(1);
				aryResult[1] = rs.getString(2);
				aryResult[2] = rs.getString(3);
				alResult.add(aryResult);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBillsBySourceBIDs",
				new Object[] { sourceHeadIDs });
		/** ********************************************************** */
		return alResult;
	}

	/**
	 * 生产制造接口使用方法. 功能：通过表体的来源单据Hid, 得到多张单据的Hid, 操作员ID, 公司ID 参数： 返回： 例外：
	 * 日期：(2001-10-18 12:44:36) 修改日期，修改人，修改原因，注释标志：
	 */
	public ArrayList queryBillsBySourceHID(String sourceHeadID)
			throws SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBySourceHID",
				new Object[] { sourceHeadID });
		/** ********************************************************** */
		if (sourceHeadID == null) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return null;
		}
		String sql = "select distinct h.cgeneralhid, coperatorid,h.pk_corp from ic_general_h h inner join ic_general_b b on(h.cgeneralhid = b.cgeneralhid) where b.dr=0 AND h.dr=0 AND b.csourcebillhid = ? ";

		String[] aryResult = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		ArrayList alResult = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sourceHeadID);
			rs = stmt.executeQuery();
			alResult = new ArrayList();
			//
			while (rs.next()) {
				aryResult = new String[3];
				aryResult[0] = rs.getString(1);
				aryResult[1] = rs.getString(2);
				aryResult[2] = rs.getString(3);
				alResult.add(aryResult);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.settlement.SettlementDMO",
				"findByPrimaryKey", new Object[] { sourceHeadID });
		/** ********************************************************** */

		return alResult;
	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。 参数： 返回： 例外： 日期：(2001-6-12 20:38:02)
	 * 修改日期，修改人，修改原因，注释标志： 2002-01-16 , 王乃军，移植到oracle
	 * 
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryBillsForCostOject(QryConditionVO voQryCond)
			throws SQLException, BusinessException, Exception {
		return queryBills(voQryCond);

	}

	/**
	 * 销售接口使用方法. 功能：通过表体的来源单据Hid, 得到单据的Hid, 操作员ID, 公司ID 参数： 返回： 例外：
	 * 日期：(2001-10-18 12:44:36) 修改日期，修改人，修改原因，注释标志：
	 */
	public String[] queryBySourceHID(String sourceHeadID) throws SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.ic211.GeneralHDMO", "queryBySourceHID",
				new Object[] { sourceHeadID });
		/** ********************************************************** */
		if (sourceHeadID == null) {
			nc.vo.scm.pub.SCMEnv
					.out("can not find the sourcehid from the parameter");
			return null;
		}
		String sql = "select distinct h.cgeneralhid, coperatorid,h.pk_corp from ic_general_h h inner join ic_general_b b on(h.cgeneralhid = b.cgeneralhid) where b.dr=0 AND h.dr=0 AND b.csourcebillhid = ? ";

		String[] aryResult = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, sourceHeadID);
			rs = stmt.executeQuery();
			//
			if (rs.next()) {
				aryResult = new String[3];
				aryResult[0] = rs.getString(1);
				aryResult[1] = rs.getString(2);
				aryResult[2] = rs.getString(3);
			}
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.settlement.SettlementDMO",
				"findByPrimaryKey", new Object[] { sourceHeadID });
		/** ********************************************************** */

		return aryResult;
	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。 参数： String sSql, int iHeadItemNum, int iBodyItemNum
	 * 
	 * 返回： 例外： 日期：(2001-6-12 20:38:02) 修改日期，修改人，修改原因，注释标志： 2002-01-16 ,
	 * 王乃军，移植到oracle
	 * 
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	protected ArrayList queryBySql(String sSql, int iHeadFieldNum,
			int iBodyFieldNum) throws Exception {

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		ArrayList alResultData = new ArrayList(); // 结果暂存
		iBodyFieldNum += 2;

		try {

			con = getConnection();

			stmt = con.prepareStatement(sSql);

			rs = stmt.executeQuery();
			Vector vResultItemData = null;
			GeneralBillVO voBill = null;
			GeneralBillHeaderVO voBillHead = null;
			GeneralBillItemVO voBillItem = null;
			GeneralBillItemVO[] voaTempBillItem = null;

			String sHeadPK = null, sCurHeadPK = null; // 拆单用的表头PK
			int ooo = 0;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();

			ResultSetMetaData meta = rs.getMetaData();

			while (rs.next()) {
				sCurHeadPK = rs.getString("cgeneralhid");
				// nc.vo.scm.pub.SCMEnv.out(sCurHeadPK);
				// 又一张新单据
				if (sCurHeadPK != null && !sCurHeadPK.equals(sHeadPK)) {
					// 不是空，则写入。
					if (voBill != null) {
						voBillHead.setPrimaryKey(sHeadPK);
						voBill.setParentVO(voBillHead);
						if (vResultItemData.size() < 1) {
							nc.vo.scm.pub.SCMEnv.out(voBillHead.getPrimaryKey()
									+ "bill has no item ERROR!");
							return null;
						}
						voaTempBillItem = new GeneralBillItemVO[vResultItemData
								.size()];
						vResultItemData.copyInto(voaTempBillItem);
						voBill.setChildrenVO(voaTempBillItem);
						alResultData.add(voBill);
					}
					voBill = new GeneralBillVO();
					voBillHead = new GeneralBillHeaderVO();
					vResultItemData = new Vector();
					// 表头数据，每个单据只读一次。
					gm.setData(rs, voBillHead, meta, 2, iHeadFieldNum);
					sHeadPK = sCurHeadPK;
				}
				//
				// 表体数据
				// nc.vo.scm.pub.SCMEnv.out("line "+ooo);
				ooo++;
				voBillItem = new GeneralBillItemVO();
				gm.setData(rs, voBillItem, meta, iHeadFieldNum + 1,
						iHeadFieldNum + iBodyFieldNum);
				// ////计算剩余待还数量
				// caculateLeftQty(voBillItem, sNumKey, sAstNumKey);
				vResultItemData.addElement(voBillItem);
			}
			// 最后一张
			if (voBill != null) {
				voBillHead.setPrimaryKey(sCurHeadPK);
				voBill.setParentVO(voBillHead);
				if (vResultItemData.size() < 1) {
					nc.vo.scm.pub.SCMEnv.out(voBillHead.getPrimaryKey()
							+ "bill has no item ERROR!");
					return null;
				}
				voaTempBillItem = new GeneralBillItemVO[vResultItemData.size()];
				vResultItemData.copyInto(voaTempBillItem);
				voBill.setChildrenVO(voaTempBillItem);
				alResultData.add(voBill);
			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		// nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
		// gm.setFreeItemVO(alResultData);
		// 过滤多余的辅计量单位
		filterUselessUOM(alResultData);
		// 查自由项
		alResultData = getFreeItemData(alResultData);

		return alResultData;

	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的子单据信息 参数： sParentBillPK：单据ID 返回： 例外： 日期：(2001-6-12
	 * 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryChildrenBillInfo(String sParentBillPK)
			throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		// return value
		ArrayList alRetValue = new ArrayList();
		// 返回值element
		String saBillInfo[] = null;
		try {
			con = getConnection();
			stmt = con
					.prepareStatement("SELECT DISTINCT h.cgeneralhid,bt.billtypename,h.vbillcode FROM ic_general_h h INNER JOIN ic_general_b b ON h.cgeneralhid=b.cgeneralhid \n LEFT OUTER JOIN bd_billtype bt ON h.cbilltypecode=bt.pk_billtypecode WHERE b.dr=0 AND h.dr=0 AND b.csourcebillhid=?");
			stmt.setString(1, sParentBillPK);
			rs = stmt.executeQuery();

			while (rs.next()) {
				saBillInfo = new String[3];
				// 表头ID
				saBillInfo[0] = rs.getString(1);
				// 单据类型
				saBillInfo[1] = rs.getString(2);
				// 单据号
				saBillInfo[2] = rs.getString(3);
				// OK !
				alRetValue.add(saBillInfo);
			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return alRetValue;
	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的子单据PK 参数： sParentBillPK：单据ID 返回： 例外： 日期：(2001-6-12
	 * 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public String[] queryChildrenBillPK(String sParentBillPK) throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String[] saRet = null;
		try {

			con = getConnection();
			stmt = con
					.prepareStatement("SELECT DISTINCT h.cgeneralhid FROM ic_general_h h INNER JOIN ic_general_b b ON h.cgeneralhid=b.cgeneralhid WHERE h.dr=0 AND b.dr=0 AND  b.csourcebillhid=?");
			stmt.setString(1, sParentBillPK);
			rs = stmt.executeQuery();
			Vector vRet = new Vector();
			String sValue = null;
			while (rs.next()) {
				sValue = rs.getString("cgeneralhid");
				if (sValue != null && sValue.trim().length() > 0)
					vRet.add(sValue);
			}
			if (vRet.size() > 0) {
				saRet = new String[vRet.size()];
				vRet.copyInto(saRet);
			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return saRet;
	}

	/**
	 * 创建者：王乃军 功能：查ts 参数： 返回： 例外： 日期：(2001-10-18 11:46:08) 修改日期，修改人，修改原因，注释标志：
	 */
	public Hashtable queryHashHeadTs(ArrayList alhid) throws Exception {
		Hashtable ht = new Hashtable();
		if (alhid == null || alhid.size() == 0)
			return ht;

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String sTs = null; // 时间戳
		try {

			con = getConnection();
			String sql = "select cgeneralhid,ts  from ic_general_h where dr=0 ";
			sql = sql + GeneralSqlString.formInSQL("cgeneralhid", alhid);
			stmt = con.prepareStatement(sql);
			rs = stmt.executeQuery();
			String hid = null;

			while (rs.next()) {
				hid = rs.getString(1);
				sTs = rs.getString(2);
				if (hid != null && sTs != null)
					ht.put(hid.trim(), sTs.trim());
			}

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return ht;
	}

	/**
	 * 此处方法说明为根据查询条件获得的条件约束及在固化 的条件语句组成条件语句及该方法中定义的的sql语句 进行组合查询。
	 * 
	 * //还回单类型 sRetBillTypeCode
	 * 
	 * 创建日期：(2001-7-9 19:58:37)
	 * 
	 * @return nc.vo.pub.AggregatedValueObject
	 * @param whereString
	 *            java.lang.String
	 */
	public GeneralBillHeaderVO[] queryHeadDataBySql(String sSql)
			throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"queryHeadDataBySql", new Object[] { sSql });
		/** ********************************************************** */

		GeneralBillHeaderVO voaHeader[] = null;
		Connection con = null;
		PreparedStatement stmt = null;
		Vector vResult = new Vector();
		GeneralBillHeaderVO voBillHeader = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql);
			rs = stmt.executeQuery();
			long begin = System.currentTimeMillis();
			ResultSetMetaData meta = rs.getMetaData();
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			while (rs.next()) {
				// 置入读出的结果
				voBillHeader = new GeneralBillHeaderVO();
				gm.setData(rs, voBillHeader, meta);
				vResult.addElement(voBillHeader);
			}
			long end = System.currentTimeMillis();
			nc.vo.scm.pub.SCMEnv.out("---------------set value use time is "
					+ (end - begin));
		} catch (SQLException e) {
			Logger.error(e.getMessage(), e);
			throw new BusinessRuntimeException(e.getMessage());
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		if (vResult.size() > 0) {
			voaHeader = new GeneralBillHeaderVO[vResult.size()];
			vResult.copyInto(voaHeader);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"queryHeadDataBySql", new Object[] { sSql });
		/** ********************************************************** */
		return voaHeader;
	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。 参数： 返回： 例外： 日期：(2001-6-12 20:38:02)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public GeneralBillVO[] queryInitBills(String sCorpID) throws SQLException,
			BusinessException, Exception {
		if (sCorpID == null || sCorpID.trim().length() == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000209")/*
																				 * @res
																				 * "查询期初单据时参数公司为空。"
																				 */);
		// 查期初单据
		ArrayList alRet = queryBills(new QryConditionVO(
				" head.pk_corp='"
						+ sCorpID
						+ "' AND (head.fbillflag="
						+ BillStatus.SIGNED
						+ " OR head.fbillflag="
						+ BillStatus.AUDITED
						+ ") \n AND (head.cbilltypecode ='"
						+ nc.vo.ic.pub.BillTypeConst.m_initIn
						+ "') and head.cwarehouseid in (select pk_stordoc from bd_stordoc where pk_corp='"
						+ sCorpID + "' and iscalculatedinvcost='Y') \n "));
		// 返回数组
		GeneralBillVO[] voaRet = null;
		// 转换为数组
		if (alRet != null && alRet.size() > 0) {
			voaRet = new GeneralBillVO[alRet.size()];
			for (int i = 0; i < alRet.size(); i++)
				voaRet[i] = (GeneralBillVO) alRet.get(i);
		}
		return voaRet;
	}

	/**
	 * 创建者：王乃军 功能：读指定单据PK的单据行数据，无还回等数据 参数： String saBillPK[]，单据pk
	 * 
	 * 
	 * 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO[] queryItemData(String saBillPK[])
			throws BusinessException {
		if (saBillPK == null || saBillPK.length == 0 || saBillPK[0] == null
				|| saBillPK[0].trim().length() == 0)
			return null;

		// StringBuffer sbSql = new StringBuffer("SELECT * \n");
		// sbSql.append(" FROM (SELECT DISTINCT cgeneralhid,\n");
		// sbSql.append(GeneralSqlString.SQL_ALL_BODY_FIELD);
		// sbSql.append(" FROM ic_general_b body ");
		// sbSql.append(GeneralSqlString.SQL_JOIN_ALL_BODY);
		// //------- where -------------
		// sbSql.append("\n WHERE body.dr=0 AND " +
		// GeneralSqlString.leftOuterJoinConvert("conv", "conv102"));
		//
		// //使用临时表
		// sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("body.cgeneralhid",
		// saBillPK));
		//
		// sbSql.append(") bb ORDER BY cgeneralhid,cinventorycode \n");
		// // order by cgeneralhid is necessary !
		//
		// //return value
		// GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
		// //------
		// try {
		// voaItem = getFreeItemData(voaItem);
		// } catch (Exception e) {
		// throw new SQLException(e.getMessage());
		// }
		//
		// return voaItem;
		GeneralBillItemVO voaItem[] = null;
		try {
			voaItem = queryPureItemData(saBillPK);
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
		return voaItem;
	}

	/**
	 * 创建者：王乃军 功能：读指定单据PK的单据行数据，无还回等数据 参数： sql string
	 * 
	 * 返回： 例外： 日期：(2001-6-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO[] queryItemDataBySql(String sSql)
			throws BusinessException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"queryItemDataBySql", new Object[] { sSql });
		/** ********************************************************** */

		GeneralBillItemVO voaBody[] = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Vector vResult = new Vector();
		GeneralBillItemVO voItem = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sSql);
			rs = stmt.executeQuery();
			//
			ResultSetMetaData meta = rs.getMetaData();
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();

			while (rs.next()) {
				// 置入读出的结果
				voItem = new GeneralBillItemVO();
				gm.setData(rs, voItem, meta);
				vResult.addElement(voItem);
			}
			if (vResult.size() > 0) {
				voaBody = new GeneralBillItemVO[vResult.size()];
				vResult.copyInto(voaBody);
			}
		} catch (SQLException e) {
			Logger.error(e.getMessage(), e);
			throw new BusinessRuntimeException(e.getMessage());
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		// 过滤多余的辅计量单位
		filterUselessUOM(voaBody);

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"queryItemDataBySql", new Object[] { sSql });
		/** ********************************************************** */

		return voaBody;
	}

	/**
	 * 此处插入方法说明。 功能： 参数： 返回： 例外： 日期：(2002-5-13 11:40:52) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return java.util.ArrayList
	 * @param cgeneralbid
	 *            java.lang.String
	 * @exception nc.vo.pub.BusinessException
	 *                异常说明。
	 */
	public Hashtable queryItemForATP(String cgeneralhid)
			throws nc.vo.pub.BusinessException {
		Hashtable ht = new Hashtable();
		if (cgeneralhid == null)
			return ht;

		StringBuffer sql = new StringBuffer(
				"select h.pk_corp,h.pk_calbody,b.cinventoryid,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,dbizdate,h.dbilldate,ninnum,noutnum,b.cgeneralbid,flargess ,csourcetype from ic_general_b b inner join ic_general_h h on b.cgeneralhid=h.cgeneralhid where h.cgeneralhid=? and b.cgeneralhid=? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		ArrayList alRet = null;
		UFDouble num = new UFDouble(0);
		UFBoolean uftrue = new UFBoolean(true);
		UFBoolean uffalse = new UFBoolean(false);
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			stmt.setString(1, cgeneralhid);
			stmt.setString(2, cgeneralhid);
			rs = stmt.executeQuery();
			//
			while (rs.next()) {
				alRet = new ArrayList();
				String pk_corp = rs.getString(1);
				alRet.add(pk_corp == null ? null : pk_corp.trim());
				String pk_calbody = rs.getString(2);
				alRet.add(pk_calbody == null ? null : pk_calbody.trim());
				String cinventoryid = rs.getString(3);
				alRet.add(cinventoryid == null ? null : cinventoryid.trim());
				String[] freeitems = new String[10];
				freeitems[0] = rs.getString(4);
				freeitems[1] = rs.getString(5);
				freeitems[2] = rs.getString(6);
				freeitems[3] = rs.getString(7);
				freeitems[4] = rs.getString(8);
				freeitems[5] = rs.getString(9);
				freeitems[6] = rs.getString(10);
				freeitems[7] = rs.getString(11);
				freeitems[8] = rs.getString(12);
				freeitems[9] = rs.getString(13);
				boolean isNull = true;
				for (int i = 0; i < 10; i++) {
					if (freeitems[i] != null
							&& freeitems[i].trim().length() > 0) {
						freeitems[i] = freeitems[i].trim();
						isNull = false;

					} else
						freeitems[i] = null;

				}
				if (isNull)
					alRet.add(null);
				else
					alRet.add(freeitems);
				String dbizdate = rs.getString(14);
				String dbilldate = rs.getString(15);
				if (dbizdate == null)
					dbizdate = dbilldate == null ? null : dbilldate.trim();
				else
					dbizdate = dbizdate.trim();
				alRet.add(dbizdate);

				BigDecimal ninnum = rs.getBigDecimal(16);
				BigDecimal noutnum = rs.getBigDecimal(17);
				if (ninnum != null)
					num = new UFDouble(ninnum);
				else if (noutnum != null)
					num = new UFDouble(noutnum);

				alRet.add(num);

				String bid = rs.getString(18);
				String flargess = rs.getString(19);
				String csourcetype = rs.getString(20);
				alRet.add(uffalse);

				alRet.add(uffalse);
				if (flargess != null && flargess.equalsIgnoreCase("Y")) {
					if (csourcetype != null
							&& (csourcetype.equals("21") || csourcetype
									.equals("23"))) {

						alRet.set(7, uftrue);
					}
				}

				if (bid != null && alRet != null)
					ht.put(bid, alRet);

			}
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
			}
		}

		return ht;

	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-7-6 11:05:27) 查询非货位仓库辅计量管理的存货是否数量同时为0
	 */
	private Hashtable queryNotAllZero(GeneralBillVO voBill)
			throws BusinessException {

		if (voBill == null || voBill.getItemVOs() == null
				|| voBill.getItemVOs().length == 0) {
			nc.vo.scm.pub.SCMEnv.out("++++++++|||||||||有空值");
			return null;
		}

		ArrayList alData = new ArrayList();

		GeneralBillItemVO[] voItems = voBill.getItemVOs();
		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i].getCastunitid() != null
					&& voItems[i].getAttributeValue("autobalancemeas") != null
					&& ((UFBoolean) voItems[i]
							.getAttributeValue("autobalancemeas"))
							.booleanValue())
				alData.add(voItems[i].getCinventoryid());

		}

		if (alData.size() == 0)
			return null;

		Hashtable ht = new Hashtable();
		StringBuffer sql = new StringBuffer(
				"select cinventoryid,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,vbatchcode,castunitid ");
		sql.append(",cvendorid,hsl");
		sql
				.append(",isnull(num,0) as ninnum,isnull(assistnum,0) as ninassistnum from ");
		sql
				.append(" (select cinventoryid,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,vlot as vbatchcode,castunitid,");
		sql.append(" cvendorid,hsl,");
		sql
				.append(" sum(isnull(nonhandnum,0)) as num, sum(isnull(nonhandastnum,0)) as assistnum ");
		sql.append(" from " + GeneralSqlString.V_IC_ONHANDNUM + " onhand ");
		sql.append(" where cwarehouseid=? ");
		sql.append(GeneralSqlString.formInSQL("cinventoryid", alData));// and
																		// cinventoryid
																		// in ")
		// .append(" (select cinventoryid from ic_general_b where cgeneralhid=?
		// and castunitid is not null and dr=0)")
		sql
				.append(" group by cinventoryid,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,vlot,castunitid");
		sql.append(",cvendorid,hsl");
		sql.append(" ) a ");
		sql
				.append(" where (num=0 and assistnum<>0) or (num<>0 and assistnum=0)");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {

			StringBuffer key = null;

			GeneralBillItemVO voItem = null;

			ResultSetMetaData meta = null;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			stmt.setString(1, voBill.getHeaderVO().getCwarehouseid());
			// stmt.setString(2,cgeneralhid);

			rs = stmt.executeQuery();
			meta = rs.getMetaData();
			//
			while (rs.next()) {
				voItem = new GeneralBillItemVO();
				gm.setData(rs, voItem, meta);
				key = new StringBuffer();
				key.append(voItem.getCinventoryid()).append(voItem.getVfree1())
						.append(voItem.getVfree2()).append(voItem.getVfree3())
						.append(voItem.getVfree4()).append(voItem.getVfree5())
						.append(voItem.getVfree6()).append(voItem.getVfree7())
						.append(voItem.getVfree8()).append(voItem.getVfree9())
						.append(voItem.getVfree10()).append(
								voItem.getVbatchcode()).append(
								voItem.getCastunitid()).append(
								voItem.getCvendorid());
				if (voItem.getHsl() != null) {
					UFDouble hsl = voItem.getHsl();
					hsl.setTrimZero(true);// zhy 忽略小数位数
					key.append(hsl.toString());
				} else
					key.append(sNULL);

				ht.put(key.toString(), voItem);

			}

		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}

		}

		return ht;

	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-7-6 11:05:27) 查询货位仓库辅计量管理的存货是否数量同时为0
	 */
	private Hashtable queryNotAllZeroCargo(GeneralBillVO voBill)
			throws Exception {

		if (voBill == null || voBill.getItemVOs() == null
				|| voBill.getItemVOs().length == 0) {
			nc.vo.scm.pub.SCMEnv.out("++++++++|||||||||有空值");
			return null;
		}

		ArrayList alData = new ArrayList();
		ArrayList alrow = null;
		GeneralBillItemVO[] voItems = voBill.getItemVOs();
		HashMap hm = new HashMap();
		String key1 = null;
		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i].getCastunitid() != null
					&& voItems[i].getAttributeValue("autobalancemeas") != null
					&& ((UFBoolean) voItems[i]
							.getAttributeValue("autobalancemeas"))
							.booleanValue()) {

				if (voItems[i].getLocator() != null) {

					LocatorVO[] voLocs = voItems[i].getLocator();

					for (int j = 0; j < voLocs.length; j++) {
						key1 = voItems[i].getCinventoryid()
								+ voLocs[j].getCspaceid();
						if (hm.containsKey(key1))
							continue;

						hm.put(key1, "0");
						alrow = new ArrayList();
						alrow.add(voItems[i].getCinventoryid());
						alrow.add(voLocs[j].getCspaceid());
						alData.add(alrow);
					}

				}

			}

		}

		if (alData.size() == 0)
			return null;

		String tmpTable = null;

		nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
		tmpTable = dmo.getTempStringTable(getConnection(),
				"ic_tmp_invspace_castunit", new String[] { "cinvmanid",
						"cspaceid" }, new String[] { "char(20) not null ",
						"char(20) " }, null, alData);
		if (tmpTable == null)
			throw new BusinessException(" tmpTable failed ");

		Hashtable ht = new Hashtable();
		StringBuffer sql = new StringBuffer(
				"select cinventoryid,vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,vbatchcode,castunitid ,cspaceid")
				.append(",cvendorid,hsl")
				.append(
						",isnull(num,0) as ninnum,isnull(assistnum,0) as ninassistnum from ")
				.append(
						" (select cinventoryidb as cinventoryid,vfreeb1 as vfree1,vfreeb2 as vfree2,vfreeb3 as vfree3,vfreeb4 as vfree4,vfreeb5 as vfree5,vfreeb6 as vfree6,vfreeb7 as vfree7,vfreeb8 as vfree8,vfreeb9 as vfree9,vfreeb10 as vfree10,vlotb as vbatchcode,castunitidb as castunitid,onhandnumb.cspaceid as cspaceid ")
				.append(" ,onhandnumb.cvendorid,onhandnumb.hsl,")
				.append(
						" sum(isnull(nnum,0)) as num, sum(isnull(nastnum,0)) as assistnum ")
				.append(
						" from " + GeneralSqlString.V_IC_ONHANDNUM_B
								+ " onhandnumb ," + tmpTable + " tmpb ")
				.append(
						" where onhandnumb.cinventoryidb=tmpb.cinvmanid and onhandnumb.cspaceid=tmpb.cspaceid  ")
				// .append(" and cspaceid in (select cspaceid from
				// ic_general_bb1 where cgeneralbid in (select cgeneralbid from
				// ic_general_b where cgeneralhid=? and dr=0 ) and dr=0 ) ")
				// .append(" and cinventoryidb in (select cinventoryid from
				// ic_general_b where cgeneralhid=? and castunitid is not
				// null)")
				.append(
						" group by cinventoryidb,vfreeb1,vfreeb2,vfreeb3,vfreeb4,vfreeb5,vfreeb6,vfreeb7,vfreeb8,vfreeb9,vfreeb10,vlotb,castunitidb,onhandnumb.cspaceid ")
				.append(" ,onhandnumb.cvendorid,onhandnumb.hsl ")
				.append(" ) a ")
				.append(
						" where (num=0 and assistnum<>0) or (num<>0 and assistnum=0)");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			StringBuffer key = null;
			GeneralBillItemVO voItem = null;
			ResultSetMetaData meta = null;
			nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			// stmt.setString(1,cwarehouseid);
			// stmt.setString(2,cgeneralhid);
			// stmt.setString(3,cgeneralhid);

			rs = stmt.executeQuery();
			meta = rs.getMetaData();
			//
			while (rs.next()) {
				voItem = new GeneralBillItemVO();
				gm.setData(rs, voItem, meta);
				key = new StringBuffer();
				key.append(voItem.getCinventoryid()).append(voItem.getVfree1())
						.append(voItem.getVfree2()).append(voItem.getVfree3())
						.append(voItem.getVfree4()).append(voItem.getVfree5())
						.append(voItem.getVfree6()).append(voItem.getVfree7())
						.append(voItem.getVfree8()).append(voItem.getVfree9())
						.append(voItem.getVfree10()).append(
								voItem.getVbatchcode()).append(
								voItem.getCastunitid()).append(
								voItem.getCvendorid());
				if (voItem.getHsl() != null) {
					UFDouble hsl = voItem.getHsl();
					hsl.setTrimZero(true);// zhy 忽略小数位数
					key.append(hsl.toString());
				} else
					key.append(sNULL);
				key.append(voItem.getCspaceid());
				ht.put(key.toString(), voItem);

			}

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}

		}

		return ht;

	}

	/**
	 * 方法说明：查询纯的单据字段，用动态关联表查询。 创建日期：(2003-1-15 9:57:19) 作者：程起伍 修改日期： 修改人： 修改原因：
	 * 算法说明：
	 * 
	 * @return GeneralBillVO[]
	 * @param param
	 *            nc.vo.pub.query.ConditionVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	protected ArrayList queryPureHeadersAndPartItems(QryConditionVO voQryCond)
			throws Exception {
		ArrayList alRet = null; // 返回值
		alRet = queryPureHeadersPartItems(voQryCond, false);
		return alRet;
	}

	/**
	 * 功能： 创建人：zhanghaiyan 创建日期：2005-3-2 备注：
	 * 
	 * @param vo
	 * @param isWhole
	 * @return
	 */
	ArrayList queryPureHeadersPartItems(QryConditionVO voQryCond,
			boolean isWhole) throws BusinessException {
		ArrayList alRet = null; // 返回值
		try {
			// 从voQryCond中得到ConditionVO
			ConditionVO[] voConds = (ConditionVO[]) voQryCond
					.getParam(QryConditionVO.QRY_CONDITIONVO);

			// 从voConds中得到关联语句：
			DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
			String sUnionSQL = dynamicSQL.getUnionSQL(voConds);
			// 条码是否关闭
			boolean isSearchBCOpen = isSearchBarCodeOpen(voConds);

			// 判断条件语句中有没有body.字段,如果有则要加上关联辅表的语句
			boolean isJoin = false;
			// 判断条件语句中有没有bb2.字段，如果有则要加上关联bb2表的语句
			boolean isJoinBB2 = false;

			// 从查询条件中得到是否需要关联辅表。cqw2003-07-01
			isJoin = dynamicSQL.isJoinBody(voConds, voQryCond.getQryCond());

			isJoinBB2 = dynamicSQL.isJoinBB2(voConds);

			if (sUnionSQL != null && sUnionSQL.length() > 0
					&& sUnionSQL.indexOf("body.") != -1)
				isJoin = true;
			if (isWhole)
				isJoin = true;
			StringBuffer sbSQL = new StringBuffer("SELECT ");
			if (isJoin || isJoinBB2)
				sbSQL.append(" DISTINCT ");
			// sbSQL.append(GeneralSqlString.SQL_PURE_HEAD_FIELD_ALIAS_HEAD);
			sbSQL.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,
					"head"));
			sbSQL.append(" FROM ic_general_h head");
			// 是否需要关联辅表：
			// zhy 2005-03-07

			if (isJoin || isJoinBB2)
				sbSQL
						.append(" INNER  JOIN ic_general_b body ON head.cgeneralhid=body.cgeneralhid ");

			if (isJoinBB2)
				sbSQL
						.append(" INNER  JOIN ic_general_bb2 bb2 ON (body.cgeneralbid = bb2.cgeneralbid or body.cgeneralbid = bb2.coutbillbodyid) ");

			// 动态关联：
			if (sUnionSQL != null && sUnionSQL.length() > 0)
				sbSQL.append(sUnionSQL);
			sbSQL.append(" WHERE head.dr=0");
			if (isJoin)
				sbSQL.append(" AND body.dr=0 ");

			if (isSearchBCOpen == true) {
				// sbSQL.append(" AND body.cinventoryid in (select pk_invmandoc
				// from bd_invmandoc where isprimarybarcode='Y' or
				// issecondarybarcode='Y')");
				sbSQL
						.append(" AND exists (select pk_invmandoc from bd_invmandoc where pk_invmandoc = body.cinventoryid and (isprimarybarcode='Y' or issecondarybarcode='Y'))");
			}
			// 动态关联结束
			if (voQryCond.getQryCond() != null
					&& voQryCond.getQryCond().trim().length() > 0) {
				sbSQL.append(" AND ");
				// 如果关联了B表，则将公司pk条件放到b表上
				if (isJoin) {
					String qrCond = voQryCond.getQryCond().replaceAll(
							"head.pk_corp", "body.pk_corp");
					sbSQL.append(qrCond);
				} else
					sbSQL.append(voQryCond.getQryCond());
			}
			
			sbSQL.append(dynamicSQL.getPkcorpWhereSQL(voConds, (String)voQryCond.getParam(voQryCond.QRY_LOGCORPID)));

			// 测试时间：
			Timer t = new Timer();
			t.start();
			GeneralBillHeaderVO[] voaHeader = (GeneralBillHeaderVO[]) queryHeadDataBySql(sbSQL
					.toString());

			GeneralBillVO voTemp = null;

			if (voaHeader != null && voaHeader.length > 0) {
				// 需要读表体的数量
				// added by zhy 2005-03-02 isWhole作为开关，决定表体记录全查还是只查部分单据
				int iNeedItemNum = 0;
				if (!isWhole)
					iNeedItemNum = Math.min(GeneralBillVO.QRY_FIRST_ITEM_NUM,
							voaHeader.length);
				else
					iNeedItemNum = voaHeader.length;

				alRet = new ArrayList();
				// query first bill's items
				int bill = 0;
				String saBillPK[] = new String[iNeedItemNum];
				for (int i = 0; i < iNeedItemNum; i++)
					saBillPK[i] = voaHeader[i].getPrimaryKey();
				
				 GeneralBillItemVO[] voaAllItem = null;
			      if(voQryCond.getParam(QryConditionVO.QRY_ITEM_ONCOND_VMI)!=null&&voQryCond.getParam(QryConditionVO.QRY_ITEM_ONCOND_VMI).equals("VMI_ONCOND_ITEM_QRY")){
			    	//在vmi汇总时需要查询特定的单据 ，但单据是按照表体数据汇总的 ，所以增加这个参数使查询时过滤表体 add by qinchao
			    	  voaAllItem = (GeneralBillItemVO[]) queryPureItemDataForVMI(saBillPK,voQryCond);
			      }else{
			      //GeneralBillItemVO[] voaAllItem = (GeneralBillItemVO[]) queryPureItemData(saBillPK);
			    	  voaAllItem = (GeneralBillItemVO[]) queryPureItemData(saBillPK);
			      }
			      
			      
				voaAllItem[0].getCgeneralhid();
				// ###################################
				// 查询条码数据 add by hanwei 2004-04-29
				queryBillItemBarCode(voaAllItem, saBillPK);
				// ###################################

				ArrayList alItem = sumVO(saBillPK, voaAllItem);
				if (alItem != null && alItem.size() == iNeedItemNum) {
					for (bill = 0; bill < iNeedItemNum; bill++) {
						voTemp = (GeneralBillVO) alItem.get(bill);
						voTemp.setParentVO(voaHeader[bill]);
						alRet.add(voTemp);
					}
				}

				// start from 1
				for (int i = bill; i < voaHeader.length; i++) {
					voTemp = new GeneralBillVO();
					voTemp.setParentVO(voaHeader[i]);
					alRet.add(voTemp);
				}
			}
			t.stop();
			t.showTime("指定单据查询");
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		}
		return alRet;
	}
	
	/**
	 * VMI查询单据单表显示时  ， 需要过滤表体个别数据 qinchao
	 * @param cbilltype
	 * @param sheadsql
	 * @param sbodysql
	 * @param sdmoclassname
	 * @param keyname
	 * @param bodyclassname
	 * @return
	 * @throws RemoteException
	 */
	public Object[] queryAllBillDatasVMI(String cbilltype ,String sheadsql,String sbodysql,String sdmoclassname,String keyname,String bodyclassname) throws RemoteException
	{
		
		//PfUtilTools._printMessage("*****查询单据数据开始*****");
		try {
//			if (sdmoclassname == null || sdmoclassname.equals("")) {
//				PfUtilTools._printMessage("未注册实现查询数据的Dmo端类文件");
//				throw new RemoteException("未注册实现查询数据的Dmo端类文件");
//			}

			//Class c = PfUtilTools.instantizeObject("5C",sdmoclassname.trim());//Class.forName(sdmoclassname.trim());
			Object dmo = PfUtilTools.instantizeObject(cbilltype,sdmoclassname.trim());//c.newInstance();
			//ArrayList retlist = new ArrayList(); 
			
			if(dmo instanceof IRedunSource){
				return ((IRedunSource)dmo).queryAllBillDatas(sheadsql,sbodysql);
			}
			
			CircularlyAccessibleValueObject[] headvos = ((IQueryData)dmo).queryAllHeadData(sheadsql);
			if(headvos==null || headvos.length<=0)
				return null;
			
			String[] keys = new String[headvos.length];
			for(int i=0;i<keys.length;i++)
				keys[i] = headvos[i].getPrimaryKey();
						
			boolean issmartvo = false;
			Class bodyvoclass = null;
			Object bodyvo = null; 
			if(bodyclassname!=null && bodyclassname.length()>0){
				bodyvoclass = Class.forName(bodyclassname.trim());
				bodyvo = bodyvoclass.newInstance();
				issmartvo = bodyvo instanceof SmartVO;
			}
			
			CircularlyAccessibleValueObject[] bodyvos = null;
			String shintmsg = null;
			
			issmartvo = false;  //不走if ， 走else   qinchao
			if(issmartvo){
				String snewbodysql = null;
				if(sbodysql==null || sbodysql.trim().length()<=0){
					snewbodysql = " 1=1 "+SQLUtil.formInSQL(keyname,keys);
				}else{
					if(sbodysql.trim().startsWith("and") || sbodysql.trim().startsWith("AND"))
						snewbodysql = " 1=1 "+sbodysql+SQLUtil.formInSQL(keyname,keys);
					else
						snewbodysql = sbodysql+SQLUtil.formInSQL(keyname,keys);
				}
				bodyvos = (new SmartDMO()).selectBy(bodyvoclass,((CircularlyAccessibleValueObject)bodyvo).getAttributeNames(),snewbodysql);
			}else{
//				if(dmo instanceof IQueryData2)
//					bodyvos = ((IQueryData2)dmo).queryAllBodyData(null,sbodysql);
//				else{
					ArrayList bodyvolist = new ArrayList();
					for(int i=0,loop=keys.length;i<loop;i++){
						CircularlyAccessibleValueObject[] tmpboydvos = null;
						if(dmo instanceof IQueryData2)
							tmpboydvos = ((IQueryData2)dmo).queryAllBodyData(keys[i],sbodysql);
						else
							tmpboydvos = ((IQueryData)dmo).queryAllBodyData(keys[i]);
						
						if(tmpboydvos!=null && tmpboydvos.length>0){
							for(int k=0,loopk=tmpboydvos.length;k<loopk;k++)
								bodyvolist.add(tmpboydvos[k]);
						}
						if(bodyvolist.size()>RedunUtil.MAXREC){
							shintmsg = "本次查询数据量太大，只能返回前"+RedunUtil.MAXREC+"行数据";
							break;
						}
					}
					if(bodyvolist.size()>0)
						bodyvos = (CircularlyAccessibleValueObject[])bodyvolist.toArray((CircularlyAccessibleValueObject[])Array.newInstance(bodyvoclass,bodyvolist.size()));
//				}
			}
			
			if(bodyvos!=null && bodyvos.length>RedunUtil.MAXREC){
				CircularlyAccessibleValueObject[] oldbodyvos = bodyvos;
				bodyvos =(CircularlyAccessibleValueObject[])Array.newInstance(bodyvoclass,RedunUtil.MAXREC); 
				//	new CircularlyAccessibleValueObject[RedunSourceDMO.maxrec];
				System.arraycopy(oldbodyvos,0,bodyvos,0,bodyvos.length);
				shintmsg = "本次查询数据量太大，只能返回前"+RedunUtil.MAXREC+"行数据";
			}
			
			Object[] retObjs = new Object[3];
			retObjs[0] = headvos;
			retObjs[1] = bodyvos;
			retObjs[2] = shintmsg;
			return retObjs;
			
		}catch (RemoteException ex) {
			throw ex;
		}catch (Exception ex) {
			throw new RemoteException("ReCall:", ex);
		}
		
	}	

	/**
	 * 创建者：程起伍 功能：读指定单据PK的单据行数据 参数： String saBillPK[]，单据pk
	 * 
	 * 
	 * 返回： 例外： 日期：(2003-2-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO[] queryPureItemData(String saBillPK[])
			throws BusinessException {
		if (saBillPK == null || saBillPK.length == 0 || saBillPK[0] == null
				|| saBillPK[0].trim().length() == 0)
			return null;
		try {
			StringBuffer sbSql = new StringBuffer("SELECT ");
			// sbSql.append(GeneralSqlString.getSQL_PURE_BODY_FIELD());
			sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
					null));
			sbSql
					.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
			sbSql
					.append(",case when hsl is null then null else (coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) end as nleftastnum");
			sbSql
					.append(",(coalesce(ningrossnum,noutgrossnum,0.0) - coalesce(nretgrossnum,0.0)) as nleftgrsnum ");
			sbSql.append(" from ic_general_b body where ");
			if (saBillPK.length == 1) {
				sbSql.append("body.cgeneralhid='");
				sbSql.append(saBillPK[0]);
				sbSql.append("' ");
			} else {
				sbSql.append("1=1 ");
				// 使用临时表
				sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
						"body.cgeneralhid", saBillPK));
			}
			// 使用临时表
			sbSql
					.append(" AND body.dr=0 ORDER BY body.cgeneralhid,cast(body.crowno as numeric(20,8)) \n");

			// return value
			GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
			return voaItem;
		} catch (Exception e) {
			if (e instanceof BusinessException)
				throw (BusinessException) e;
			else
				throw new BusinessException("Caused by:", e);
		}

	}

	/**
	 * 创建者：程起伍 功能：读指定单据PK的单据行数据[主要用于平台上下游单据查询。] 参数： String saBillPK[]，单据pk
	 * String sBodyWhere
	 * 
	 * 返回： 例外： 日期：(2003-2-14 9:07:50) 修改日期，修改人，修改原因，注释标志：
	 */
	public GeneralBillItemVO[] queryPureItemData(String saBillPK[],
			String sBodyWhere) throws Exception {
		if (saBillPK == null || saBillPK.length == 0 || saBillPK[0] == null
				|| saBillPK[0].trim().length() == 0)
			return null;
		// 从voConds中得到关联语句：
		DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
		ConditionVO[] voCondition = GenMethod.getConditionVO(sBodyWhere);
		String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);

		StringBuffer sbSql = new StringBuffer("SELECT ");
		// sbSql.append(GeneralSqlString.getSQL_PURE_BODY_FIELD());
		sbSql
				.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
						"body"));
		sbSql
				.append(",(coalesce(ninnum,noutnum,0.0) - coalesce(nretnum,0.0) - coalesce(ntranoutnum,0.0)) as nleftnum");
		sbSql
				.append(",case when hsl is null then null else (coalesce(ninassistnum,noutassistnum,0.0) - coalesce(nretastnum,0.0) - coalesce(ntranoutastnum,0.0)) end as nleftastnum");
		sbSql
				.append(",(coalesce(ningrossnum,noutgrossnum,0.0) - coalesce(nretgrossnum,0.0)) as nleftgrsnum");
		sbSql.append(" from ic_general_b body ");
		// 动态关联：
		if (sUnionSQL != null && sUnionSQL.length() > 0)
			sbSql.append(sUnionSQL);
		sbSql.append("where ");
		if (saBillPK.length == 1) {
			sbSql.append("body.cgeneralhid='");
			sbSql.append(saBillPK[0]);
			sbSql.append("' ");
		} else {
			sbSql.append("1=1 ");
			// 使用临时表
			sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
					"body.cgeneralhid", saBillPK));
		}
		if (sBodyWhere != null) {
			if (!(sBodyWhere.trim().toLowerCase().startsWith("and")))
				sbSql.append(" and ");
			sbSql.append(sBodyWhere);
		}
		sbSql
				.append(" AND body.dr=0 ORDER BY body.cgeneralhid,cast(body.crowno as numeric(20,8)) \n");

		// return value
		GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
		return voaItem;
	}
	
	
	

	/**
	 * 秦朝 添加  为vmi查询单据用  
	 * 因为vmi查询单据需要过滤汇总的表体数据
	 * @param saBillPK
	 * @param voQryCond
	 * @return
	 * @throws Exception
	 */
	public GeneralBillItemVO[] queryPureItemDataForVMI(String saBillPK[],QryConditionVO voQryCond) throws Exception {
		  if (saBillPK == null || saBillPK.length == 0 || saBillPK[0] == null || saBillPK[0].trim().length() == 0)
		    return null;
		  
		  //从voQryCond中得到ConditionVO
		    ConditionVO[] voConds = (ConditionVO[]) voQryCond.getParam(QryConditionVO.QRY_CONDITIONVO);

		    //从voConds中得到关联语句：
		    DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
		    String sUnionSQL = dynamicSQL.getUnionSQL(voConds);
		    //条码是否关闭
		    boolean isSearchBCOpen = isSearchBarCodeOpen(voConds);

		    //判断条件语句中有没有body.字段,如果有则要加上关联辅表的语句
		    boolean isJoin = false;
		    //判断条件语句中有没有bb2.字段，如果有则要加上关联bb2表的语句
		    boolean isJoinBB2 = false;

		    //从查询条件中得到是否需要关联辅表。cqw2003-07-01
		    isJoin = dynamicSQL.isJoinBody(voConds,voQryCond.getQryCond());
		    
		    isJoinBB2 = dynamicSQL.isJoinBB2(voConds);

		    if (sUnionSQL != null && sUnionSQL.length() > 0 && sUnionSQL.indexOf("body.") != -1)
		      isJoin = true;
		    
		  StringBuffer sbSql = new StringBuffer("SELECT ");
		  //if (isJoin || isJoinBB2)
			 // sbSql.append(" DISTINCT ");
		  //sbSql.append(GeneralSqlString.getSQL_PURE_BODY_FIELD());
		  sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,"body"));
		  sbSql.append(",(coalesce(body.ninnum,body.noutnum,0.0) - coalesce(body.nretnum,0.0) - coalesce(body.ntranoutnum,0.0)) as nleftnum");
		  sbSql.append(", case when hsl is null then null else (coalesce(body.ninassistnum,body.noutassistnum,0.0) - coalesce(body.nretastnum,0.0) - coalesce(body.ntranoutastnum,0.0)) end as nleftastnum");
		  sbSql.append(",(coalesce(body.ningrossnum,body.noutgrossnum,0.0) - coalesce(body.nretgrossnum,0.0)) as nleftgrsnum");
		  sbSql.append(" from ic_general_h head ");
		  sbSql.append(" INNER  JOIN ic_general_b body ON head.cgeneralhid=body.cgeneralhid ");
		    
		    if (isJoinBB2)
		    	sbSql.append(" INNER  JOIN ic_general_bb2 bb2 ON (body.cgeneralbid = bb2.cgeneralbid or body.cgeneralbid = bb2.coutbillbodyid) ");

		  
		  //动态关联：
		    if (sUnionSQL != null && sUnionSQL.length() > 0)
		    	sbSql.append(sUnionSQL);
		    sbSql.append(" WHERE head.dr=0");
		    if (isJoin)
		    	sbSql.append(" AND body.dr=0 ");
		    
		  //动态关联结束
		    if (voQryCond.getQryCond() != null && voQryCond.getQryCond().trim().length() > 0) {
		    	sbSql.append(" AND ");
		      // 如果关联了B表，则将公司pk条件放到b表上
		      if (isJoin) {
		    	  String qrCond = voQryCond.getQryCond().replaceAll("head.pk_corp", "body.pk_corp");
		    	  sbSql.append(qrCond);
		      }
		      else
		    	  sbSql.append(voQryCond.getQryCond());
		    }  
		     
		  if(saBillPK.length ==1){
		    sbSql.append("and body.cgeneralhid='");
		    sbSql.append(saBillPK[0]);
		    sbSql.append("' ");
		  }else{
		    //使用临时表
		    sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("body.cgeneralhid", saBillPK));
		  }
		 

		  //return value
		  GeneralBillItemVO voaItem[] = queryItemDataBySql(sbSql.toString());
		  return voaItem;
		}
		
		
		
		
		

	/**
	 * 创建者：程起伍 功能：按指定条件查询单据。 参数： 返回： 例外： 日期：(2003-2-17 11:38:02)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryPureWholeBills(QryConditionVO voQryCond)
			throws BusinessException {

		// modified by zhy 2005-03-02
		if (voQryCond.getIntParam(2) == 0) {
			// 需要查询序列号和货位
			ArrayList albill = queryPureHeadersPartItems(voQryCond, true);
			if (albill != null && albill.size() > 0) {
				int ilen = albill.size();
				ArrayList alBid = new ArrayList();
				ArrayList alHid = new ArrayList();
				for (int i = 0; i < ilen; i++) {
					int bsize = ((GeneralBillVO) albill.get(i)).getItemCount();
					for (int j = 0; j < bsize; j++)
						alBid
								.add(((GeneralBillVO) albill.get(i))
										.getItemVOs()[j].getCgeneralbid());
					alHid.add(((GeneralBillVO) albill.get(i)).getHeaderVO()
							.getCgeneralhid());
				}
				Hashtable htLocator = null;
				Hashtable htSn = null;
				try {
					LocatorDMO locatordmo = new LocatorDMO();
					htLocator = locatordmo.queryByBodyPKs(alBid);
					SerialDMO sndmo = new SerialDMO();
					htSn = sndmo.queryByBillPKs(alHid);
				} catch (Exception e) {
					// 日志异常
					nc.vo.scm.pub.SCMEnv.out(e);
					// 库存组异常抛出规范
					throw nc.bs.ic.pub.GenMethod.handleException(
							e.getMessage(), e);
				}
				GeneralBillVO voBill = null;
				GeneralBillItemVO[] voaItem = null;
				String cgeneralbid = null;
				ArrayList alLocator = null;
				ArrayList alSn = null;
				LocatorVO[] voaLocator = null;
				SerialVO[] voaSn = null;
				for (int i = 0; i < ilen; i++) {
					voBill = (GeneralBillVO) albill.get(i);
					voaItem = voBill.getItemVOs();
					int bsize = voaItem.length;
					for (int j = 0; j < bsize; j++) {
						cgeneralbid = voaItem[j].getCgeneralbid();
						if (null != htLocator
								&& htLocator.containsKey(cgeneralbid)) {
							alLocator = (ArrayList) htLocator.get(cgeneralbid);
							if (alLocator != null) {
								voaLocator = new LocatorVO[alLocator.size()];
								alLocator.toArray(voaLocator);
								voaItem[j].setLocator(voaLocator);
								if (voaLocator.length == 1) {
									voaItem[j].setCspaceid(voaLocator[0]
											.getCspaceid());
									voaItem[j].setVspacename(voaLocator[0]
											.getVspacename());
								}
							}
						}
						if (null != htSn && htSn.containsKey(cgeneralbid)) {
							alSn = (ArrayList) htSn.get(cgeneralbid);
							if (alSn != null) {
								voaSn = new SerialVO[alSn.size()];
								alSn.toArray(voaSn);
								voaItem[j].setSerial(voaSn);
							}
						}
					}
				}

			}
			return albill;
		} else {
			return queryPureHeadersPartItems(voQryCond, true);
		}

		// //WHERE 条件
		// String sWhere = null;
		// //得到条件,如果有就是合法的，长度不可为零。
		// if (voQryCond != null) {
		// if (voQryCond.getQryCond() != null
		// && voQryCond.getQryCond().trim().length() > 0)
		// sWhere = voQryCond.getQryCond().trim();
		// }
		//
		// //组织SQL：
		// StringBuffer sbSql = new StringBuffer("SELECT ");
		// sbSql.append(GenMethod.getSelectFields(GeneralBillHeaderVO.class,"head"));
		// sbSql.append(",");
		// sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,"body"));
		// sbSql.append(
		// " FROM ic_general_h head INNER JOIN ic_general_b body ON
		// head.cgeneralhid=body.cgeneralhid ");
		// //从voQryCond中得到ConditionVO
		// ConditionVO[] voConds =
		// (ConditionVO[]) voQryCond.getParam(QryConditionVO.QRY_CONDITIONVO);
		// //从voConds中得到关联语句：
		// DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
		// String sUnionSQL = dynamicSQL.getUnionSQL(voConds);
		// if (sUnionSQL != null && sUnionSQL.length() > 0)
		// sbSql.append(sUnionSQL);
		// sbSql.append(" WHERE head.dr=0 AND body.dr=0 ");
		// //动态关联结束
		// sbSql.append(" AND ");
		// if (sWhere != null && sWhere.length() > 0)
		// sbSql.append(sWhere);
		// //11/08 erase it ! 查出的数据本来是按id,排序的
		// sbSql.append(" ORDER BY head.cgeneralhid, cast(body.crowno as
		// numeric(20,8)) \n");
		// return queryBySql(
		// sbSql.toString(),
		// GenMethod.getDbFieldsNum(GeneralBillHeaderVO.class),
		// GenMethod.getDbFieldsNum(GeneralBillItemVO.class));

	}

	/**
	 * 创建者：王乃军 功能：查询指定PK的相关单据信息 参数： sRelatedBillPK：单据ID 返回： 例外： 日期：(2001-6-12
	 * 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryRelatedBillInfo(String sRelatedBillPK)
			throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		// return value
		ArrayList alRetValue = new ArrayList();
		// 返回值element
		String saBillInfo[] = null;
		try {
			con = getConnection();
			stmt = con
					.prepareStatement("SELECT DISTINCT h.cgeneralhid,bt.billtypename,h.vbillcode \n   FROM ic_general_h h INNER JOIN ic_general_b b ON h.cgeneralhid=b.cgeneralhid \n LEFT OUTER JOIN bd_billtype bt ON h.cbilltypecode=bt.pk_billtypecode \n   WHERE b.dr=0 AND h.dr=0 AND (b.csourcebillhid=? OR b.ccorrespondhid=?)");
			stmt.setString(1, sRelatedBillPK);
			stmt.setString(2, sRelatedBillPK);
			rs = stmt.executeQuery();

			while (rs.next()) {
				saBillInfo = new String[3];
				// 表头ID
				saBillInfo[0] = rs.getString(1);
				// 单据类型
				saBillInfo[1] = rs.getString(2);
				// 单据号
				saBillInfo[2] = rs.getString(3);
				// OK !
				alRetValue.add(saBillInfo);
			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return alRetValue;
	}

	/**
	 * 创建者：王乃军 功能：查询指定表体PK的相关单据信息 参数： sBillBodyPK：单据ID 返回： 例外： 日期：(2001-6-12
	 * 20:38:02) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryRelatedBillInfoByBodyPK(String sBillPK,
			String sBillBodyPK) throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		// return value
		ArrayList alRetValue = new ArrayList();
		// 返回值element
		String saBillInfo[] = null;
		try {
			con = getConnection();
			stmt = con
					.prepareStatement("SELECT DISTINCT h.cgeneralhid,bt.billtypename,h.vbillcode \n   FROM ic_general_h h INNER JOIN ic_general_b b ON h.cgeneralhid=b.cgeneralhid \n     LEFT OUTER JOIN bd_billtype bt ON h.cbilltypecode=bt.pk_billtypecode \n       WHERE b.dr=0 AND h.dr=0 AND ((b.csourcebillbid=? AND b.csourcebillhid = ? ) OR (b.ccorrespondbid=? AND b.ccorrespondhid = ? ))");
			stmt.setString(1, sBillBodyPK);
			stmt.setString(2, sBillPK);
			stmt.setString(3, sBillBodyPK);
			stmt.setString(4, sBillPK);
			rs = stmt.executeQuery();

			while (rs.next()) {
				saBillInfo = new String[3];
				// 表头ID
				saBillInfo[0] = rs.getString(1);
				// 单据类型
				saBillInfo[1] = rs.getString(2);
				// 单据号
				saBillInfo[2] = rs.getString(3);
				// OK !
				alRetValue.add(saBillInfo);
			}

		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw e;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (Exception e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (Exception e) {

			}
		}
		return alRetValue;
	}

	/**
	 * 此处插入方法说明。 通过单据的表体ID,来源单据查找直接转库单、直接调拨单 的表头ID 创建日期：(2004-4-20 16:28:53)
	 * 
	 * @return java.lang.String
	 * @param sBID
	 *            java.lang.String 单据的表体ID,
	 * @param sSourceID
	 *            java.lang.String来源单据ID
	 */
	public String querySourceHID(String sBID, String sSourceID)
			throws Exception {

		String sql = "select  cgeneralhid from ic_general_b where csourcebillbid =? and cgeneralbid<>?";

		String sCgeneralhid = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			if (sBID != null)
				stmt.setString(1, sSourceID);
			else
				stmt.setNull(1, Types.CHAR);
			if (sSourceID != null)
				stmt.setString(2, sBID);
			else
				stmt.setNull(2, Types.CHAR);

			rs = stmt.executeQuery();

			if (rs.next()) {
				sCgeneralhid = rs.getString(1);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return sCgeneralhid;
	}

	/**
	 * 此处插入方法说明。 通过单据的表体ID,来源单据查找转库单、调拨单对应的多个的表头ID 创建日期：(2004-4-20 16:28:53)
	 * 
	 * @return ArrayList
	 * @param sBID
	 *            java.lang.String 单据的表体ID,
	 * @param sSourceID
	 *            java.lang.String来源单据ID bHasBID:当前表体是否有ID,false表示新增情况的的单据
	 *            sCsourceType:来源单据类型 如果为： 4K 转库单从来源单据字段查询 否则 从源头单据字段查询
	 * 
	 */
	public ArrayList querySourceHIDs(String sSourceID, String sBilltypecode,
			String sCsourceType) throws Exception {

		String sql = null;
		String sCsourceIDfield = null;
		if ("4K".equalsIgnoreCase(sCsourceType))

		{
			sCsourceIDfield = "csourcebillhid";
		} else {
			sCsourceIDfield = "cfirstbillhid";
		}
		sql = "select distinct h.cgeneralhid from ic_general_b b,ic_general_h h where h.cgeneralhid=b.cgeneralhid and b."
				+ sCsourceIDfield
				+ " =?  and h.cbilltypecode<>'"
				+ sBilltypecode + "'   and b.dr=0  and h.dr=0";

		String sCgeneralhid = null;
		ArrayList alResult = new ArrayList();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			if (sSourceID != null)
				stmt.setString(1, sSourceID);
			else
				stmt.setNull(1, Types.CHAR);

			rs = stmt.executeQuery();

			while (rs.next()) {
				sCgeneralhid = rs.getString(1);
				alResult.add(sCgeneralhid);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return alResult;
	}

	/**
	 * 此处插入方法说明。 通过单据的表体ID,来源单据查找转库单、调拨单对应的多个的表头ID 创建日期：(2004-4-20 16:28:53)
	 * 
	 * @return ArrayList
	 * @param sBID
	 *            java.lang.String 单据的表体ID,
	 * @param sSourceID
	 *            java.lang.String来源单据ID bHasBID:当前表体是否有ID,false表示新增情况的的单据
	 *            sCsourceType:来源单据类型 如果为： 4K 转库单从来源单据字段查询 否则 从源头单据字段查询
	 * 
	 */
	public ArrayList querySourceHIDs(String[] sSourceID, String sBilltypecode,
			String sCsourceType) throws Exception {

		String sql = null;
		String sCsourceIDfield = null;
		if ("4K".equalsIgnoreCase(sCsourceType))

		{
			sCsourceIDfield = "csourcebillhid";
		} else {
			sCsourceIDfield = "cfirstbillhid";
		}
		sql = "select distinct h.cgeneralhid from ic_general_b b,ic_general_h h where h.cgeneralhid=b.cgeneralhid and h.cbilltypecode<>'"
				+ sBilltypecode
				+ "'   and b.dr=0  and h.dr=0"
				+ GeneralSqlString.formInSQL("b." + sCsourceIDfield, sSourceID);

		String sCgeneralhid = null;
		ArrayList alResult = new ArrayList();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			// if (sSourceID != null)
			// stmt.setString(1, sSourceID);
			// else
			// stmt.setNull(1, Types.CHAR);

			rs = stmt.executeQuery();

			while (rs.next()) {
				sCgeneralhid = rs.getString(1);
				alResult.add(sCgeneralhid);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return alResult;
	}

	/**
	 * 此处插入方法说明。 功能描述: noutnum+onhandnum<0 ninnum-num>0 时，本行数量直接销减
	 * 
	 * noutnum+onhandnum>0 ninnum-num<0 时，本行数量不够，需要多次销减
	 * 
	 * 输入参数: 返回值: 异常处理: 作者:王乃军 日期:
	 * 
	 * @param voItemCur
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO
	 * @param voItemChanged
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO
	 */
	private void relation(GeneralBillItemVO voNewItem,
			GeneralBillItemVO voChangedItem) {

		UFDouble num = voChangedItem.getNinnum();
		UFDouble assistnum = voChangedItem.getNinassistnum();
		UFDouble nTmp = null;
		UFDouble ZERO = new UFDouble(0);
		boolean isEnough = false;
		// 入库单据
		if (voNewItem.getNinnum() != null) {

			if (num != null && num.compareTo(ZERO) != 0.0) {
				nTmp = voNewItem.getNinnum().sub(num);
				// 本行够销减
				if (voNewItem.getNinnum().multiply(nTmp).compareTo(ZERO) >= 0)
					isEnough = true;
				else
					isEnough = false;
				if (isEnough) {
					voNewItem.setNinnum(nTmp);
					voChangedItem.setNinnum(null);
				} else {
					voChangedItem.setNinnum(num.sub(voNewItem.getNinnum()));
					voNewItem.setNinnum(ZERO);
				}

			} else if (assistnum != null && assistnum.compareTo(ZERO) != 0.0) {
				nTmp = voNewItem.getNinassistnum().sub(assistnum);
				// 本行够销减
				if (voNewItem.getNinassistnum().multiply(nTmp).compareTo(ZERO) >= 0)
					isEnough = true;
				else
					isEnough = false;
				if (isEnough) {
					voNewItem.setNinassistnum(nTmp);
					voChangedItem.setNinassistnum(null);
				} else {
					voChangedItem.setNinassistnum(assistnum.sub(voNewItem
							.getNinassistnum()));
					voNewItem.setNinassistnum(ZERO);
				}

			}
		}
		// 出库单据
		else if (voNewItem.getNoutnum() != null) {

			if (num != null && num.compareTo(ZERO) != 0.0) {
				nTmp = voNewItem.getNoutnum().add(num);
				// 本行够销减
				if (voNewItem.getNoutnum().multiply(nTmp).compareTo(ZERO) >= 0)
					isEnough = true;
				else
					isEnough = false;

				if (isEnough) {
					voNewItem.setNoutnum(nTmp);
					voChangedItem.setNinnum(null);
				} else {
					voChangedItem.setNinnum(num.add(voNewItem.getNoutnum()));
					voNewItem.setNoutnum(ZERO);
				}

			} else if (assistnum != null && assistnum.compareTo(ZERO) != 0.0) {
				nTmp = voNewItem.getNoutassistnum().add(assistnum);
				// 本行够销减
				if (voNewItem.getNoutassistnum().multiply(nTmp).compareTo(ZERO) >= 0)
					isEnough = true;
				else
					isEnough = false;

				if (isEnough) {
					voNewItem.setNoutassistnum(nTmp);
					voChangedItem.setNinassistnum(null);
				} else {
					voChangedItem.setNinassistnum(assistnum.add(voNewItem
							.getNoutassistnum()));
					voNewItem.setNoutassistnum(ZERO);
				}

			}

		}
		voNewItem.calculateMny();
	}

	/**
	 * 此处插入方法说明。 功能描述: //如果入库单，并且入库业务6， 结存值>=o 5, 6,5 本行够，
	 * 如果ninnum-num>=0,ninnum-num(6-5),ninspacenum(6)-num(5),voChangedItem
	 * .ninnum=0; 6,8 本行不够 如果ninnum-num<0,ninnum=0,ninspacenum=0,voChangedItem.ninnum=num(8)-ninnum(6)
	 * 结存值<o, 6,-5;6,-8
	 * ninnum(6)-num(-5),ninspacenum(6)-num(-5),voChangedItem.ninnum=0
	 * 
	 * 
	 * //如果入库单，并且出库业务-6， 结存值<o, -6,-5 本行够， 如果ninnum-num<=0,ninnum(-6)-num(-5),noutspacenum(6)+num(-5),voChangedItem
	 * .ninnum=0; -6,-8 本行不够
	 * 如果ninnum-num>0,ninnum=0,noutspacenum=0,voChangedItem.ninnum=num(-8)-ninnum(-6)
	 * 结存值>0, -6,5;-6,8 ninnum-num,noutspacenum+num;voChangedItem.ninnum=0
	 * 
	 * 
	 * //如果出库库单，并且入库业务-6， 结存值>=o -6,5, 如果noutnum+num<=0,noutnum+num(-6+(5)),ninspacenum(6)-num(5),voChangedIem.ninnum=0;
	 * -6,8
	 * 如果noutnum+num>0,noutnum=0,ninspacenum=0,voCHangedItem.ninnum=noutnum+num
	 * 结存值<0 noutnum+num,ninspacenum-num,voChangedItem.ninnum=0;
	 * 
	 * 
	 * 
	 * //如果出库单，并且出库业务6， 结存值<=o 6,-5,
	 * 如果noutnum+num>=0,noutnum+num(6+(-5)),noutspacenum(6)+num(-5),voChangedIem.ninnum=0;
	 * -6,8 如果noutnum+num<0,noutnum=0,noutspacenum=0,voCHangedItem.ninnum=noutnum+num
	 * 结存值>0 noutnum+num,noutspacenum+num,voChangedItem.ninnum=0;
	 * 
	 * 
	 * 
	 * 
	 * 输入参数: 返回值: 异常处理: 作者:余大英 日期:
	 * 
	 * @param voItemCur
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO
	 * @param voItemChanged
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO
	 */
	private void relation2(GeneralBillItemVO voNewItem,
			GeneralBillItemVO voChangedItem, LocatorVO voLoc) {

		UFDouble num = voChangedItem.getNinnum();
		UFDouble assistnum = voChangedItem.getNinassistnum();

		UFDouble ZERO = new UFDouble(0);

		if ((num == null || num.doubleValue() == 0.0)
				&& (assistnum == null || assistnum.doubleValue() == 0.0))
			return;

		if (num == null)
			num = ZERO;
		if (assistnum == null)
			assistnum = ZERO;

		// 入库单据,入库业务
		if (voNewItem.getNinnum() != null && voLoc.getNinspacenum() != null) {
			// 结存>=0
			if (num != null && num.compareTo(ZERO) >= 0) {
				// 如果ninnum-num>=0,ninnum-num(6-5),ninspacenum(6)-num(5),voChangedItem
				// .ninnum=0;
				if (voNewItem.getNinnum().sub(num).compareTo(ZERO) >= 0) {
					voNewItem.setNinnum(voNewItem.getNinnum().sub(num));
					voLoc.setNinspacenum(voLoc.getNinspacenum().sub(num));
					voChangedItem.setNinnum(ZERO);
				}
				// 如果ninnum-num<0,ninnum=0,ninspacenum=0,voChangedItem.ninnum=num(8)-ninnum(6)
				else {
					voChangedItem.setNinnum(num.sub(voNewItem.getNinnum()));
					voNewItem.setNinnum(ZERO);
					voLoc.setNinspacenum(ZERO);

				}

			}
			// 结存<0
			else {
				// ninnum(6)-num(-5),ninspacenum(6)-num(-5),voChangedItem.ninnum=0
				voNewItem.setNinnum(voNewItem.getNinnum().sub(num));
				voLoc.setNinspacenum(voLoc.getNinspacenum().sub(num));
				voChangedItem.setNinnum(ZERO);

			}

			// 辅数量结存>=0
			if (assistnum != null && assistnum.compareTo(ZERO) >= 0) {
				if (voLoc.getNinspaceassistnum() == null)
					voLoc.setNinspaceassistnum(ZERO);
				// 如果ninassistnum-assistnum>=0,ninassistnum-assistnum(6-5),ninspaceassistnum(6)-assistnum(5),voChangedItem
				// .ninassistnum=0;
				if (voNewItem.getNinassistnum().sub(assistnum).compareTo(ZERO) >= 0) {
					voNewItem.setNinassistnum(voNewItem.getNinassistnum().sub(
							assistnum));
					voLoc.setNinspaceassistnum(voLoc.getNinspaceassistnum()
							.sub(assistnum));
					voChangedItem.setNinassistnum(ZERO);
				}
				// 如果ninassistnum-assistnum<0,ninassistnum=0,ninspaceassistnum=0,voChangedItem.ninassistnum=assistnum(8)-ninassistnum(6)
				else {
					voChangedItem.setNinassistnum(assistnum.sub(voNewItem
							.getNinassistnum()));
					voNewItem.setNinassistnum(ZERO);
					voLoc.setNinspaceassistnum(ZERO);

				}

			}
			// 辅数量结存<0
			else {
				if (voLoc.getNinspaceassistnum() == null)
					voLoc.setNinspaceassistnum(ZERO);
				// ninassistnum(6)-assistnum(-5),ninspaceassistnum(6)-assistnum(-5),voChangedItem.ninassistnum=0
				voNewItem.setNinassistnum(voNewItem.getNinassistnum().sub(
						assistnum));
				voLoc.setNinspaceassistnum(voLoc.getNinspaceassistnum().sub(
						assistnum));
				voChangedItem.setNinassistnum(ZERO);

			}

		}
		// 入库单据,出库业务
		if (voNewItem.getNinnum() != null && voLoc.getNoutspacenum() != null) {
			// 结存值<o,

			if (num != null && num.compareTo(ZERO) <= 0) {
				// 如果ninnum-num<=0,ninnum(-6)-num(-5),noutspacenum(6)+num(-5),voChangedItem
				// .ninnum=0;
				if (voNewItem.getNinnum().sub(num).compareTo(ZERO) <= 0) {
					voNewItem.setNinnum(voNewItem.getNinnum().sub(num));
					voLoc.setNoutspacenum(voLoc.getNoutspacenum().add(num));
					voChangedItem.setNinnum(ZERO);
				}
				// 如果ninnum-num>0,ninnum=0,noutspacenum=0,voChangedItem.ninnum=num(-8)-ninnum(-6)
				else {
					voChangedItem.setNinnum(num.sub(voNewItem.getNinnum()));
					voNewItem.setNinnum(ZERO);
					voLoc.setNoutspacenum(ZERO);

				}

			}
			// 结存>0
			else {
				// ninnum-num,noutspacenum+num;voChangedItem.ninnum=0

				voNewItem.setNinnum(voNewItem.getNinnum().sub(num));
				voLoc.setNoutspacenum(voLoc.getNoutspacenum().add(num));
				voChangedItem.setNinnum(ZERO);

			}

			// 辅数量结存值<o,

			if (assistnum != null && assistnum.compareTo(ZERO) <= 0) {
				if (voLoc.getNoutspaceassistnum() == null)
					voLoc.setNoutspaceassistnum(ZERO);
				// 如果ninassistnum-assistnum<=0,ninassistnum(-6)-assistnum(-5),noutspaceassistnum(6)+assistnum(-5),voChangedItem
				// .ninassistnum=0;
				if (voNewItem.getNinassistnum().sub(assistnum).compareTo(ZERO) <= 0) {
					voNewItem.setNinassistnum(voNewItem.getNinassistnum().sub(
							assistnum));
					voLoc.setNoutspaceassistnum(voLoc.getNoutspaceassistnum()
							.add(assistnum));
					voChangedItem.setNinassistnum(ZERO);
				}
				// 如果ninassistnum-assistnum>0,ninassistnum=0,noutspaceassistnum=0,voChangedItem.ninassistnum=assistnum(-8)-ninassistnum(-6)
				else {

					voChangedItem.setNinassistnum(assistnum.sub(voNewItem
							.getNinassistnum()));
					voNewItem.setNinassistnum(ZERO);
					voLoc.setNoutspaceassistnum(ZERO);

				}

			}
			// 辅数量结存>0
			else {
				if (voLoc.getNoutspaceassistnum() == null)
					voLoc.setNoutspaceassistnum(ZERO);
				// ninassistnum-assistnum,noutspaceassistnum+assistnum;voChangedItem.ninassistnum=0

				voNewItem.setNinassistnum(voNewItem.getNinassistnum().sub(
						assistnum));
				voLoc.setNoutspaceassistnum(voLoc.getNoutspaceassistnum().add(
						assistnum));
				voChangedItem.setNinassistnum(ZERO);

			}

		}
		// 出库单据,入库业务
		if (voNewItem.getNoutnum() != null && voLoc.getNinspacenum() != null) {
			// 结存>=0
			if (num != null && num.compareTo(ZERO) >= 0) {
				// 如果noutnum+num<=0,noutnum+num(-6+(5)),ninspacenum(6)-num(5),voChangedIem.ninnum=0;
				if (voNewItem.getNoutnum().add(num).compareTo(ZERO) <= 0) {
					voNewItem.setNoutnum(voNewItem.getNoutnum().add(num));
					voLoc.setNinspacenum(voLoc.getNinspacenum().sub(num));
					voChangedItem.setNinnum(ZERO);
				}
				// 如果noutnum+num>0,noutnum=0,ninspacenum=0,voCHangedItem.ninnum=noutnum+num
				else {
					voChangedItem.setNinnum(num.add(voNewItem.getNoutnum()));
					voNewItem.setNoutnum(ZERO);
					voLoc.setNinspacenum(ZERO);

				}

			}
			// 结存<0
			else {
				// noutnum+num,ninspacenum-num,voChangedItem.ninnum=0;
				voNewItem.setNoutnum(voNewItem.getNoutnum().add(num));
				voLoc.setNinspacenum(voLoc.getNinspacenum().sub(num));
				voChangedItem.setNinnum(ZERO);

			}

			// 辅结存>=0
			if (assistnum != null && assistnum.compareTo(ZERO) >= 0) {
				if (voLoc.getNinspaceassistnum() == null)
					voLoc.setNinspaceassistnum(ZERO);
				// 如果noutassistnum+assistnum<=0,noutassistnum+assistnum(-6+(5)),ninspaceassistnum(6)-assistnum(5),voChangedIem.ninassistnum=0;
				if (voNewItem.getNoutassistnum().add(assistnum).compareTo(ZERO) <= 0) {
					voNewItem.setNoutassistnum(voNewItem.getNoutassistnum()
							.add(assistnum));
					voLoc.setNinspaceassistnum(voLoc.getNinspaceassistnum()
							.sub(assistnum));
					voChangedItem.setNinassistnum(ZERO);
				}
				// 如果noutassistnum+assistnum>0,noutassistnum=0,ninspaceassistnum=0,voCHangedItem.ninassistnum=noutassistnum+assistnum
				else {
					voChangedItem.setNinassistnum(assistnum.add(voNewItem
							.getNoutassistnum()));
					voNewItem.setNoutassistnum(ZERO);
					voLoc.setNinspaceassistnum(ZERO);

				}

			}
			// 辅结存<0
			else {
				if (voLoc.getNinspaceassistnum() == null)
					voLoc.setNinspaceassistnum(ZERO);
				// noutassistnum+assistnum,ninspaceassistnum-assistnum,voChangedItem.ninassistnum=0;
				voNewItem.setNoutassistnum(voNewItem.getNoutassistnum().add(
						assistnum));
				voLoc.setNinspaceassistnum(voLoc.getNinspaceassistnum().sub(
						assistnum));
				voChangedItem.setNinassistnum(ZERO);

			}

		}
		// 出库单据,出库业务
		if (voNewItem.getNoutnum() != null && voLoc.getNoutspacenum() != null) {
			// 结存值<=o
			if (num != null && num.compareTo(ZERO) <= 0) {
				// 如果noutnum+num>=0,noutnum+num(6+(-5)),noutspacenum(6)+num(-5),voChangedIem.ninnum=0;
				if (voNewItem.getNoutnum().add(num).compareTo(ZERO) >= 0) {
					voNewItem.setNoutnum(voNewItem.getNoutnum().add(num));
					voLoc.setNoutspacenum(voLoc.getNoutspacenum().add(num));
					voChangedItem.setNinnum(ZERO);
				}
				// 如果noutnum+num<0,noutnum=0,noutspacenum=0,voCHangedItem.ninnum=noutnum+num
				else {
					voChangedItem.setNinnum(num.add(voNewItem.getNoutnum()));
					voNewItem.setNoutnum(ZERO);
					voLoc.setNoutspacenum(ZERO);

				}

			}
			// 结存>0
			else {
				// noutnum+num,noutspacenum+num,voChangedItem.ninnum=0;
				voNewItem.setNoutnum(voNewItem.getNoutnum().add(num));
				voLoc.setNoutspacenum(voLoc.getNoutspacenum().add(num));
				voChangedItem.setNinnum(ZERO);

			}

			// 辅结存值<=o
			if (assistnum != null && assistnum.compareTo(ZERO) <= 0) {
				if (voLoc.getNoutspaceassistnum() == null)
					voLoc.setNoutspaceassistnum(ZERO);

				// 如果noutassistnum+assistnum>=0,noutassistnum+assistnum(6+(-5)),noutspaceassistnum(6)+assistnum(-5),voChangedIem.ninassistnum=0;
				if (voNewItem.getNoutassistnum().add(assistnum).compareTo(ZERO) >= 0) {
					voNewItem.setNoutassistnum(voNewItem.getNoutassistnum()
							.add(assistnum));
					voLoc.setNoutspaceassistnum(voLoc.getNoutspaceassistnum()
							.add(assistnum));
					voChangedItem.setNinassistnum(ZERO);
				}
				// 如果noutassistnum+assistnum<0,noutassistnum=0,noutspaceassistnum=0,voCHangedItem.ninassistnum=noutassistnum+assistnum
				else {

					voChangedItem.setNinassistnum(assistnum.add(voNewItem
							.getNoutassistnum()));
					voNewItem.setNoutassistnum(ZERO);
					voLoc.setNoutspaceassistnum(ZERO);

				}

			}
			// 辅结存>0
			else {
				if (voLoc.getNoutspaceassistnum() == null)
					voLoc.setNoutspaceassistnum(ZERO);
				// noutassistnum+assistnum,noutspaceassistnum+assistnum,voChangedItem.ninassistnum=0;
				voNewItem.setNoutassistnum(voNewItem.getNoutassistnum().add(
						assistnum));
				voLoc.setNoutspaceassistnum(voLoc.getNoutspaceassistnum().add(
						assistnum));
				voChangedItem.setNinassistnum(ZERO);

			}

		}
		voNewItem.calculateMny();

	}

	/**
	 * 李俊 功能：更改表体字段bbarcodeclose 参数： 返回： 例外： 日期：(2004-10-11 13:31:13)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voaItem
	 *            nc.vo.ic.pub.bill.GeneralBillItemVO[]
	 * @param ufBoolean
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void revBBarcodeClose(ArrayList alParam, UFBoolean bBarcodeClose)
			throws SQLException {

		if (alParam == null || alParam.size() == 0)
			return;
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO",
				"revBBarcodeClose", new Object[] { alParam });
		/** ********************************************************** */
		String sql = "update ic_general_b set bbarcodeclose=?  where cgeneralbid = ?";

		ArrayList alBids = (ArrayList) alParam.get(1);
		if (alBids == null || alBids.size() <= 0)
			return;
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = prepareStatement(con, sql);
			String sBodyPK = null;
			for (int i = 0; i < alBids.size(); i++) {
				sBodyPK = (String) alBids.get(i);
				if (sBodyPK == null || sBodyPK.trim().length() == 0)
					continue;

				stmt.setString(1, bBarcodeClose.toString());
				stmt.setString(2, sBodyPK);
				executeUpdate(stmt);
			}
			executeBatch(stmt);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "revBBarcodeClose",
				new Object[] { alParam });
		/** ********************************************************** */

	}

	/**
	 * 此处插入方法说明。 功能描述:为新增条码的纪录预先获取pk，用于独立的保存条码数据 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public ArrayList setBillBarcodePrimaryKeys(GeneralBillItemVO[] voItems,
			String sPk_corp) throws Exception {
		ArrayList alPK = new ArrayList();
		if (voItems == null || voItems.length == 0)
			return alPK;

		int iBodyCount = 0;
		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i].getBarCodeVOs() != null) {
				for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
					if (voItems[i].getBarCodeVOs()[b] != null
							&& voItems[i].getBarCodeVOs()[b].getStatus() == VOStatus.NEW) {
						iBodyCount++;
					}
				}
			}
		}

		String[] keys = null;
		keys = getOIDs(sPk_corp, iBodyCount);
		if (keys != null && keys.length == iBodyCount) {
			int ileftcount = iBodyCount;
			for (int i = 0; i < voItems.length; i++) {
				// 修改 by hanwei 2004-03-22 适应单据导入（带表体ID）情况
				if (voItems[i].getBarCodeVOs() != null) {
					for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
						if (voItems[i].getBarCodeVOs()[b] != null
								&& voItems[i].getBarCodeVOs()[b].getStatus() == VOStatus.NEW) {
							// 将批量得到的条码记录的主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbbcid(keys[iBodyCount
											- ileftcount]);
							// 将对应的表体行主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbid(voItems[i].getPrimaryKey());
							alPK.add(keys[iBodyCount - ileftcount]);
							ileftcount--;
						}
					}
				}
			}

		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000210")/*
																				 * @res
																				 * "库存：批量获取OID失败！"
																				 */);

		return alPK;
	}

	/**
	 * 此处插入方法说明。 功能描述:为新增条码的纪录预先获取pk，用于独立的保存条码数据 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public ArrayList setBillBarcodePrimaryKeys(GeneralBillVO voBill)
			throws Exception {
		ArrayList alPK = new ArrayList();
		if (voBill == null || voBill.getParentVO() == null
				|| voBill.getChildrenVO() == null)
			return alPK;

		int iBodyCount = 0;

		// boolean bImportdata = false; //是否是导入数据
		GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voBill.getParentVO();
		GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
				.getChildrenVO();
		// String cbilltypecode = voHead.getCbilltypecode();
		// boolean hasBB3 = isNeedBB3(cbilltypecode);

		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i].getBarCodeVOs() != null) {
				for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
					if (voItems[i].getBarCodeVOs()[b] != null
							&& voItems[i].getBarCodeVOs()[b].getStatus() == VOStatus.NEW) {
						iBodyCount++;
					}
				}

			}

		}

		String[] keys = null;
		keys = getOIDs(voHead.getPk_corp(), iBodyCount);
		if (keys != null && keys.length == iBodyCount) {
			int ileftcount = iBodyCount;
			if (voHead.getCgeneralhid() == null) {
				voHead.setCgeneralhid(keys[0]);
				alPK.add(voHead.getCgeneralhid());
				ileftcount--;
			}
			for (int i = 0; i < voItems.length; i++) {
				// 修改 by hanwei 2004-03-22 适应单据导入（带表体ID）情况
				if (voItems[i].getBarCodeVOs() != null) {
					for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
						if (voItems[i].getBarCodeVOs()[b] != null
								&& voItems[i].getBarCodeVOs()[b].getStatus() == VOStatus.NEW) {
							// 将批量得到的条码记录的主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbbcid(keys[iBodyCount
											- ileftcount]);
							// 将对应的表体行主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbid(voItems[i].getPrimaryKey());
							alPK.add(keys[iBodyCount - ileftcount]);
							ileftcount--;
						}
					}
				}
			}

		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000210")/*
																				 * @res
																				 * "库存：批量获取OID失败！"
																				 */);

		return alPK;
	}

	/**
	 * 此处插入方法说明。 功能描述:为新增的纪录预先获取pk 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public ArrayList setBillPrimaryKeys(GeneralBillVO voBill)
			throws BusinessException {
		ArrayList alPK = new ArrayList();
		if (voBill == null || voBill.getParentVO() == null
				|| voBill.getChildrenVO() == null)
			return alPK;

		int iBodyCount = 0;

		boolean bImportdata = false;// 是否是导入数据
		GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voBill.getParentVO();
		GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
				.getChildrenVO();
		String cbilltypecode = voHead.getCbilltypecode();
		boolean hasBB3 = isNeedBB3(cbilltypecode);
		bImportdata = voHead.isImportData();

		if ( voHead.getCgeneralhid() == null ) {
			if ( voHead.getAttributeValue("cgeneralhid_temp") != null ) {
				voHead.setCgeneralhid( 
						(String)voHead.getAttributeValue("cgeneralhid_temp") );
				alPK.add(voHead.getCgeneralhid());
			}
			else {
				iBodyCount++;
			}
		}
		else {
			alPK.add(voHead.getCgeneralhid());
		}

		for (int i = 0; i < voItems.length; i++) {
			if (voItems[i].getStatus() == VOStatus.NEW) {
				iBodyCount++;
				if (hasBB3)
					iBodyCount++;
			}
			if (voItems[i].getLocator() != null) {
				LocatorVO[] voLocs = voItems[i].getLocator();
				iBodyCount += voLocs.length;
			}
			if (voItems[i].getInOutFlag() == InOutFlag.IN
					&& voItems[i].getSerial() != null) {
				SerialVO[] voSns = voItems[i].getSerial();
				iBodyCount += voSns.length;
			}
			// added by zhx surppot barcode new vo voBill.bSaveBarcodeFinal() &&
			/**
			 * 修改人：刘家清 修改日期：2007-5-24下午08:31:00
			 * 修改原因：因为在这个循环当中，bSaveBarcodeFinal()里调用了lookup来判断权限，所以导致了200条数据运行时间由原来的0分0秒16毫秒上升至0分6秒218毫秒
			 * 以后修改中切记不要把操作时间长的东西放到公共类里比如VO里
			 * 
			 * if (voBill.bSaveBarcodeFinal() && voItems[i].getBarCodeVOs() !=
			 * null) {
			 */
			if (voItems[i].getBarCodeVOs() != null) {
				for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
					if (voItems[i].getBarCodeVOs()[b] != null
							&& (voItems[i].getStatus() == VOStatus.NEW || voItems[i]
									.getBarCodeVOs()[b].getStatus() == VOStatus.NEW)) {
						iBodyCount++;
					}

				}

			}

		}

		String[] keys = null;
		keys = getOIDs(voHead.getPk_corp(), iBodyCount);
		if (keys != null && keys.length == iBodyCount) {
			int ileftcount = iBodyCount;
			if (voHead.getCgeneralhid() == null) {
				voHead.setCgeneralhid(keys[0]);
				alPK.add(voHead.getCgeneralhid());
				ileftcount--;
			}
			for (int i = 0; i < voItems.length; i++) {
				// 修改 by hanwei 2004-03-22 适应单据导入（带表体ID）情况
				if (voItems[i].getStatus() == VOStatus.NEW || bImportdata) {
					voItems[i].setCgeneralhid(voHead.getCgeneralhid());
					if (voItems[i].getPrimaryKey() != null && bImportdata) {
						// 不用设置行ID
					} else {
						voItems[i]
								.setCgeneralbid(keys[iBodyCount - ileftcount]);
					}
					ileftcount--;
					if (hasBB3) {
						voItems[i]
								.setCgeneralbb3(keys[iBodyCount - ileftcount]);
						ileftcount--;
					}
					alPK.add(voItems[i].getCgeneralbid());
				}

				if (voItems[i].getLocator() != null) {
					LocatorVO[] voLocs = voItems[i].getLocator();
					for (int j = 0; j < voLocs.length; j++) {
						voLocs[j].setAttributeValue("cgeneralbb1",
								keys[iBodyCount - ileftcount]);
						voLocs[j].setCgeneralbid(voItems[i].getCgeneralbid());
						ileftcount--;
					}
				}
				if (voItems[i].getInOutFlag() == InOutFlag.IN
						&& voItems[i].getSerial() != null) {
					SerialVO[] voSns = voItems[i].getSerial();
					for (int j = 0; j < voSns.length; j++) {

						if (voSns[j].getCserialid() == null) {
							voSns[j]
									.setCserialid(keys[iBodyCount - ileftcount]);
							voSns[j]
									.setCgeneralbid(voItems[i].getCgeneralbid());
							ileftcount--;
						}
					}

				}
				// added by zhx surppot barcode new vo
				// voBill.bSaveBarcodeFinal() &&
				// if ( voBill.bSaveBarcodeFinal() &&voItems[i].getBarCodeVOs()
				// != null) {
				if (voItems[i].getBarCodeVOs() != null) {
					for (int b = 0; b < voItems[i].getBarCodeVOs().length; b++) {
						if (voItems[i].getBarCodeVOs()[b] != null
								&& (voItems[i].getStatus() == VOStatus.NEW || voItems[i]
										.getBarCodeVOs()[b].getStatus() == VOStatus.NEW)) {
							// 将批量得到的条码记录的主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbbcid(keys[iBodyCount
											- ileftcount]);
							// 将对应的表体行主键置入BarCodeVO
							voItems[i].getBarCodeVOs()[b]
									.setCgeneralbid(voItems[i].getPrimaryKey());
							ileftcount--;

						}

					}

				}
			}

		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000210")/*
																				 * @res
																				 * "库存：批量获取OID失败！"
																				 */);

		return alPK;
	}

	/**
	 * 此处插入方法说明。 功能描述:为复制单据的纪录预先获取pk 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public void setBillPrimaryKeysForCopy(GeneralBillVO voBill)
			throws Exception {
		if (voBill == null || voBill.getParentVO() == null
				|| voBill.getChildrenVO() == null)
			return;

		int iBodyCount = 0;

		GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voBill.getParentVO();
		GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
				.getChildrenVO();
		String cbilltypecode = voHead.getCbilltypecode();
		Hashtable htBB3 = null;
		// if (cbilltypecode != null
		// &&
		// (cbilltypecode.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_purchaseIn)
		// ||
		// cbilltypecode.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_saleOut)
		// ||
		// cbilltypecode.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_purchaseInit)
		// ||
		// cbilltypecode.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_saleInit)
		// || cbilltypecode.equalsIgnoreCase("3Q")
		// ||
		// cbilltypecode.equalsIgnoreCase(nc.vo.ic.pub.BillTypeConst.m_consignMachiningIn)
		// || cbilltypecode.equalsIgnoreCase(
		// nc.vo.ic.pub.BillTypeConst.m_consignMachiningOut)
		// || cbilltypecode.equalsIgnoreCase(
		// nc.vo.ic.pub.BillTypeConst.m_allocationIn)
		// || cbilltypecode.equalsIgnoreCase(
		// nc.vo.ic.pub.BillTypeConst.m_allocationOut))) {

		// Hashtable htBB3 = null;

		if (isNeedBB3(cbilltypecode)) {
			nc.bs.ic.pub.settlement.SettlementDMO dmostl = new nc.bs.ic.pub.settlement.SettlementDMO();

			htBB3 = dmostl.queryBillItembb3ByBillPK(voHead.getCgeneralhid());
		}

		iBodyCount++;
		nc.vo.ic.pub.settlement.SettlementVO vTmp = null;
		for (int i = 0; i < voItems.length; i++) {
			iBodyCount++;
			// 补足BB3数据
			if (htBB3 != null && htBB3.size() > 0) {
				nc.vo.ic.pub.settlement.SettlementVO[] voSets = null;

				if (htBB3.containsKey(voItems[i].getCgeneralbid())) {
					vTmp = (nc.vo.ic.pub.settlement.SettlementVO) htBB3
							.get(voItems[i].getCgeneralbid());
					voSets = new nc.vo.ic.pub.settlement.SettlementVO[1];
					// vTmp.copyInto(voSets);
					voSets[0] = vTmp;

					voItems[i].setBB3VO(voSets);
				}

			}
			if (voItems[i].getLocator() != null) {
				LocatorVO[] voLocs = voItems[i].getLocator();
				iBodyCount += voLocs.length;
			}
			if (voItems[i].getSerial() != null) {
				SerialVO[] voSns = voItems[i].getSerial();
				iBodyCount += voSns.length;
			}
			if (voItems[i].getBB3VO() != null) {
				iBodyCount += voItems[i].getBB3VO().length;
			}
		}

		String[] keys = null;
		keys = getOIDs(voHead.getPk_corp(), iBodyCount);
		if (keys != null && keys.length == iBodyCount) {
			int ileftcount = iBodyCount;
			voHead.setCgeneralhid(keys[0]);
			ileftcount--;

			for (int i = 0; i < voItems.length; i++) {
				voItems[i].setCgeneralhid(voHead.getCgeneralhid());
				voItems[i].setCgeneralbid(keys[iBodyCount - ileftcount]);
				ileftcount--;

				if (voItems[i].getLocator() != null) {
					LocatorVO[] voLocs = voItems[i].getLocator();
					for (int j = 0; j < voLocs.length; j++) {
						voLocs[j].setAttributeValue("cgeneralbb1",
								keys[iBodyCount - ileftcount]);
						voLocs[j].setCgeneralbid(voItems[i].getCgeneralbid());
						ileftcount--;
					}
				}
				if (voItems[i].getSerial() != null) {
					SerialVO[] voSns = voItems[i].getSerial();
					for (int j = 0; j < voSns.length; j++) {

						voSns[j].setCserialid(keys[iBodyCount - ileftcount]);
						voSns[j].setCgeneralbid(voItems[i].getCgeneralbid());
						ileftcount--;

					}

				}
				if (voItems[i].getBB3VO() != null) {
					nc.vo.ic.pub.settlement.SettlementVO[] voSets = voItems[i]
							.getBB3VO();
					for (int j = 0; j < voSets.length; j++) {
						if (j == 0)
							voItems[i].setCgeneralbb3(keys[iBodyCount
									- ileftcount]);
						voSets[j].setCgeneralbb3(keys[iBodyCount - ileftcount]);
						voSets[j].setCgeneralbid(voItems[i].getCgeneralbid());
						ileftcount--;

					}

				}
			}

		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000210")/*
																				 * @res
																				 * "库存：批量获取OID失败！"
																				 */);

		return;
	}

	/**
	 * 此处插入方法说明 直接修改ic_general_b的字段 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param voItems
	 *            根据voItem中的值 cfirstbillhid,和cfirsttype找到cfirstbillcode
	 */
	public void setFirstBillCode(GeneralBillItemVO[] voItems, String cgeneralhid)
			throws BusinessException {
		if (voItems == null || voItems.length == 0 || cgeneralhid == null)
			return;

		String billtype = voItems[0].getCfirsttype();

		if (voItems[0].getCfirstbillhid() == null || billtype == null
				|| voItems[0].getVfirstbillcode() != null)
			return;

		Hashtable ht = new Hashtable();// key:billtype;
		ArrayList al = new ArrayList();
		for (int i = 0; i < voItems.length; i++) {
			billtype = (String) voItems[i].getCfirsttype();
			if (!ht.containsKey(billtype)) {
				ht.put(billtype, billtype);
				al.add(billtype);
			}

		}
		if (al.size() > 0) {

			String subQry = "select cfirstbillhid from ic_general_b where cgeneralhid='"
					+ cgeneralhid + "' and dr=0 ";
			for (int i = 0; i < al.size(); i++) {
				billtype = (String) al.get(i);
				setFirstBillCode(billtype, subQry, cgeneralhid);
				// ArrayList alhidcode=getFirstBillCodes(billtype,subQry);
				// updateFirstBillCode(alhidcode,cgeneralhid);

			}
		}
		return;
	}

	/**
	 * 此处插入方法说明 直接修改ic_general_b的字段 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param voItems
	 *            根据voItem中的值 cfirstbillhid,和cfirsttype找到cfirstbillcode
	 */
	public void setFirstBillCode(String billtype, String subQry, String hid)
			throws BusinessException {
		if (subQry == null || subQry.length() == 0 || billtype == null)
			return;

		ArrayList alhidcode = getFirstBillCodes(billtype, subQry);
		updateFirstBillCode(alhidcode, hid);
		return;
	}

	/**
	 * 此处插入方法说明。 功能描述:更新入库单 输入参数: 返回值: 异常处理:
	 * 
	 */
	public void setSettledOK(String sBillPK) throws java.sql.SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "setSettledOK",
				new Object[] { sBillPK });
		/** ********************************************************** */

		String sql1 = "update ic_general_b set isok = 'Y' where cgeneralhid = ? and dr=0 ";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			// 修改结算标志
			stmt = con.prepareStatement(sql1);
			stmt.setString(1, sBillPK);
			stmt.executeUpdate();

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "setSettledOK",
				new Object[] { sBillPK });
		/** ********************************************************** */
	}

	/**
	 * 此处插入方法说明 直接修改ic_general_b的字段 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param voItems
	 *            根据voItem中的值 cfirstbillhid,和cfirsttype找到cfirstbillcode
	 */
	public void setSourceRowNos(String billtype, String hid)
			throws BusinessException {
		if (billtype == null)
			return;

		ArrayList alhidcode = getSourceRowNos(billtype, hid);
		updateSourceRowNo(alhidcode, hid);
		return;
	}

	/**
	 * 创建者：王乃军 功能：签字（记账）功能 参数： 返回： 例外： 日期：(2001-6-14 9:13:17)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return boolean
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public Boolean sign(GeneralBillVO[] voBills) throws BusinessException,
			Exception {
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "sign",
				new Object[] { voBills });

		// 签字检查
		signCheck(voBills);

		String sql = "UPDATE ic_general_h SET  cregister = ?, daccountdate = ? ,fbillflag=?, taccounttime=? WHERE cgeneralhid = ?";

		// 签字时间
		String sAccountTime = null;

		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			stmt = prepareStatement(con, sql);
			GeneralBillHeaderVO voHead = null;
			int is = Integer.valueOf(BillStatus.SIGNED).intValue();
			Integer iSign = new Integer(BillStatus.SIGNED);
			for (int i = 0; i < voBills.length; i++) {
				voHead = voBills[i].getHeaderVO();
				// operator id
				stmt.setString(1, voHead.getCregister());

				// date
				stmt.setString(2, voHead.getDaccountdate().toString());

				// status is signed
				stmt.setInt(3, is);

				// 签字时间
				if (voHead.getAttributeValue("taccounttime") == null)
					sAccountTime = (new UFDateTime(System.currentTimeMillis()))
							.toString();
				else
					sAccountTime = voHead.getAttributeValue("taccounttime")
							.toString();

				stmt.setString(4, sAccountTime);

				stmt.setString(5, voHead.getCgeneralhid());
				voHead.setCregister(voHead.getCregister());
				voHead.setFbillflag(iSign);

				executeUpdate(stmt);
			}
			executeBatch(stmt);
			// 保留的系统管理接口：
			afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "sign",
					new Object[] { voBills });
			return new Boolean(true);
		} catch (SQLException se) {
			nc.vo.scm.pub.SCMEnv.error(se);
			throw new BusinessException(se.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				throw e;
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				throw e;
			}
		}

	}

	/**
	 * 创建者：王乃军 功能：签字（记账）检查功能： 参数： 返回： 例外： 日期：(2001-6-14 9:11:16)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public boolean signCheck(GeneralBillVO voBill) throws BusinessException,
			Exception {
		if (voBill == null || voBill.getHeaderVO() == null) {
			nc.vo.scm.pub.SCMEnv.out("nvl bill r: F ");
			return false;
		}
		return signCheck(new GeneralBillVO[] { voBill });

	}

	/**
	 * 创建者：王乃军 功能：签字（记账）检查功能： 参数： 返回： 例外： 日期：(2001-6-14 9:11:16)
	 * 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public boolean signCheck(GeneralBillVO[] voBills) throws BusinessException,
			Exception {
		if (voBills == null || voBills.length == 0 || voBills[0] == null) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000211")/*
																				 * @res
																				 * "签字检查：没有可签字的单据！"
																				 */);

		}

		// 读是否可以是一人参数。
		// boolean isCanSameOne = true;

		// 单据PK,操作员，公司，登录日期
		ArrayList alhid = new ArrayList();
		GeneralBillHeaderVO voHead = null;
		String billtype = null;
		Integer iSign = new Integer(BillStatus.SIGNED);
		for (int i = 0; i < voBills.length; i++) {

			if (voBills[i] != null && voBills[i].getHeaderVO() != null) {
				voHead = voBills[i].getHeaderVO();
				voHead.setFbillflag(iSign);
				if (voHead.getCregister() == null
						|| voHead.getCregister().toString().trim().length() == 0)
					voHead.setCregister(voHead.getCoperatoridnow());
				if (voHead.getDaccountdate() == null
						|| voHead.getDaccountdate().toString().trim().length() == 0)
					if (voHead.getClogdatenow() != null)
						voHead.setDaccountdate(new UFDate(voHead
								.getClogdatenow()));

				if (voHead.getDaccountdate() == null
						|| voHead.getDaccountdate().toString().trim().length() == 0)
					voHead.setDaccountdate(voHead.getDbilldate());

				if (voHead.getCgeneralhid() == null
						|| voHead.getCregister() == null
						|| voHead.getDaccountdate() == null
						|| voHead.getPk_corp() == null
						|| voHead.getCbilltypecode() == null)
					throw new BusinessException(nc.bs.ml.NCLangResOnserver
							.getInstance().getStrByID("4008bill",
									"UPP4008bill-000212")/*
															 * @res
															 * "签字检查：单据签字信息不完整！"
															 */);
				else {
					alhid.add(voHead.getCgeneralhid());
					if (billtype == null)
						billtype = voHead.getCbilltypecode();
					if (!billtype.equals(voHead.getCbilltypecode()))
						throw new BusinessException(nc.bs.ml.NCLangResOnserver
								.getInstance().getStrByID("4008bill",
										"UPP4008bill-000213")/*
																 * @res
																 * "签字检查：单据类型不相同，不能批签字！"
																 */);
				}

			} else
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000214")/* @res "签字检查：单据信息不完整！" */);

		}
		// zhy以下代码为了查询IC011参数,但是现在已经废弃IC011导致查询异常,在此将其注释掉
		// String sCorpID = (String) voBills[0].getHeaderValue("pk_corp");
		// nc.bs.pub.para.SysInitBO initBO = null;
		// initBO = new nc.bs.pub.para.SysInitBO();
		// 这里的是登录单位sCorpID，还是单据的单位？
		// String sParam = initBO.getParaString(sCorpID, "IC011");
		// if (sParam != null && sParam.equals("N"))
		// isCanSameOne = false;

		Hashtable hthid = new Hashtable();
		ArrayList alErr = new ArrayList();
		ArrayList alrow = new ArrayList();
		String hid = null;
		String billcode = null;
		// String coperatorid = null;
		String cregister = null;
		String cauditorid = null;
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();

			// 查询制单人与当前操作员是否同一人，判断是否已经签字
			String sql1 = "select cgeneralhid,vbillcode,coperatorid,cregister,cauditorid  FROM ic_general_h h  WHERE  h.dr=0  ";
			sql1 = sql1 + GeneralSqlString.formInSQL("cgeneralhid", alhid);
			stmt = con.prepareStatement(sql1);
			rs = stmt.executeQuery();
			while (rs.next()) {
				hid = rs.getString(1);
				alrow = new ArrayList();
				alrow.add(rs.getString(2)); // 0 :vbillcode
				alrow.add(rs.getString(3)); // 1:coperatorid
				alrow.add(rs.getString(4)); // 2:cregister
				alrow.add(rs.getString(5)); // 3:cauditorid
				if (hid != null)
					hthid.put(hid, alrow);

			}

		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
				throw e;
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				nc.vo.scm.pub.SCMEnv.error(e);
				throw e;
			}
		}
		if (hthid.size() == voBills.length) {
			GeneralBillItemVO[] voItems = null;
			for (int i = 0; i < voBills.length; i++) {
				voItems = voBills[i].getItemVOs();
				if (voItems == null || voItems.length == 0) {
					alErr
							.add(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000248")/* @res "单据" */
									+ ":"
									+ voBills[i].getHeaderVO().getVbillcode()
									+ nc.bs.ml.NCLangResOnserver.getInstance()
											.getStrByID("4008bill",
													"UPP4008bill-000356")/*
																			 * @res "
																			 * 表体信息不完整！"
																			 */);
					continue;
				}
				// 检查是否已经签字，制单人,
				if (hthid
						.containsKey(voBills[i].getHeaderVO().getCgeneralhid())) {
					hid = voBills[i].getHeaderVO().getCgeneralhid();
					alrow = (ArrayList) hthid.get(hid);
					billcode = (String) alrow.get(0);
					// coperatorid = (String) alrow.get(1);
					cregister = (String) alrow.get(2);
					cauditorid = (String) alrow.get(3);
					if (cauditorid != null) {
						alErr
								.add(nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000248")/*
																		 * @res
																		 * "单据"
																		 */
										+ ":"
										+ billcode
										+ nc.bs.ml.NCLangResOnserver
												.getInstance().getStrByID(
														"4008bill",
														"UPP4008bill-000357")/*
																				 * @res "
																				 * 已经存货记账！"
																				 */);
					} else if (cregister != null) {
						alErr
								.add(nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000248")/*
																		 * @res
																		 * "单据"
																		 */
										+ ":"
										+ billcode
										+ nc.bs.ml.NCLangResOnserver
												.getInstance().getStrByID(
														"4008bill",
														"UPP4008bill-000358")/*
																				 * @res "
																				 * 已经签字！"
																				 */);
					}
					// else if (
					// !isCanSameOne &&
					// coperatorid.equals(voBills[i].getHeaderVO().getCregister()))
					// {
					// alErr.add(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008bill","UPP4008bill-000248")/*@res
					// "单据"*/+":" + billcode +
					// nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008bill","UPP4008bill-000359")/*@res
					// " 制单人与签字人不能相同！"*/);
					// }
				} else {
					alErr
							.add(nc.bs.ml.NCLangResOnserver.getInstance()
									.getStrByID("4008bill",
											"UPP4008bill-000248")/* @res "单据" */
									+ ":"
									+ voBills[i].getHeaderVO().getVbillcode()
									+ nc.bs.ml.NCLangResOnserver.getInstance()
											.getStrByID("4008bill",
													"UPP4008bill-000360")/*
																			 * @res "
																			 * 可能已经删除！"
																			 */);
				}
				// 检查表体数量,签字日期必须晚于业务日期
				for (int j = 0; j < voItems.length; j++) {
					if (voItems[j].getStatus() != VOStatus.DELETED
							&& voItems[j].getNinnum() == null
							&& voItems[j].getNoutnum() == null) {
						alErr
								.add(nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000248")/*
																		 * @res
																		 * "单据"
																		 */
										+ ":"
										+ voBills[i].getHeaderVO()
												.getVbillcode()
										+ nc.bs.ml.NCLangResOnserver
												.getInstance().getStrByID(
														"4008bill",
														"UPP4008bill-000361")/*
																				 * @res "
																				 * 没有填写实收实发数量！"
																				 */);
						break;
					}
					if (voItems[j].getDbizdate() != null
							&& voBills[i].getHeaderVO().getDaccountdate()
									.before(voItems[j].getDbizdate())) {
						alErr
								.add(nc.bs.ml.NCLangResOnserver.getInstance()
										.getStrByID("4008bill",
												"UPP4008bill-000248")/*
																		 * @res
																		 * "单据"
																		 */
										+ ":"
										+ voBills[i].getHeaderVO()
												.getVbillcode()
										+ nc.bs.ml.NCLangResOnserver
												.getInstance()
												.getStrByID(
														"4008bill",
														"UPP4008bill-000362",
														null,
														new String[] {
																voBills[i]
																		.getHeaderVO()
																		.getDaccountdate()
																		.toString(),
																voItems[j]
																		.getDbizdate()
																		.toString() })/*
																						 * @res "
																						 * 签字日期必须晚于出入库日期！"
																						 */);
						break;
					}

				}

			}

		} else {
			alErr.add(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"4008bill", "UPP4008bill-000363")/* @res "部分单据可能已经删除！" */);
		}

		if (alErr != null && alErr.size() > 0) {
			StringBuffer sMsg = new StringBuffer(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("4008bill", "UPP4008bill-000364")/*
																				 * @res
																				 * "签字检查错误：\n"
																				 */);
			for (int i = 0; i < alErr.size(); i++) {
				sMsg.append((String) alErr.get(i) + "\n");
			}
			throw new BusinessException(sMsg.toString());
		}
		
		CheckBusiDMO dmo = new CheckBusiDMO();
		dmo.checkNullSpace(voBills);
		return true;

	}

	/**
	 * 创建者：王乃军 功能：sum items belong to one bill to a serial of bills 参数：
	 * 返回：返回类单据及的Arraylist，只有表体数据 例外： 日期：(2001-10-18 11:46:08)
	 * 修改日期，修改人，修改原因，注释标志：
	 */
	protected ArrayList sumVO(String saBillPK[], GeneralBillItemVO voaItem[]) {
		if (voaItem == null)
			return null;
		GeneralBillItemVO voaTempItem[] = null;
		String sCurPK = null, sLastPK = null; // 当前的pk,最近的pk
		ArrayList alResultData = new ArrayList();
		Vector vResultItemData = null; // must be null.
		GeneralBillVO voBill = null;
		Hashtable htBills = new Hashtable(); // key:billpk value: billvo

		for (int i = 0; i < voaItem.length; i++) {
			sCurPK = (String) voaItem[i].getCgeneralhid();
			// nc.vo.scm.pub.SCMEnv.out(sCurPK);
			// 又一张新单据
			if (sCurPK != null && !sCurPK.equals(sLastPK)) {
				// 不是空，则写入。
				if (vResultItemData != null) { // not first line
					voBill = new GeneralBillVO();
					voaTempItem = new GeneralBillItemVO[vResultItemData.size()];
					vResultItemData.copyInto(voaTempItem);
					voBill.setChildrenVO(voaTempItem);
					// alResultData.add(voBill);
					htBills.put(sLastPK, voBill);
				}
				vResultItemData = new Vector();
			}
			sLastPK = sCurPK;
			if (vResultItemData == null)
				vResultItemData = new Vector();
			vResultItemData.addElement(voaItem[i]);
		}
		if (vResultItemData != null) {
			voBill = new GeneralBillVO();
			voaTempItem = new GeneralBillItemVO[vResultItemData.size()];
			vResultItemData.copyInto(voaTempItem);
			voBill.setChildrenVO(voaTempItem);
			// alResultData.add(voBill);
			htBills.put(sLastPK, voBill);
		}
		// voaTempItem = new GeneralBillItemVO[vResultItemData.size()];
		// vResultItemData.copyInto(voaTempItem);
		// alResultData.add(voaTempItem);
		for (int i = 0; i < saBillPK.length; i++)
			alResultData.add(htBills.get(saBillPK[i]));

		return alResultData;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-9 13:16:45)
	 */
	public void updateBasid(String shid) throws BusinessException {
		// 查询有源头单据得表体行
		String sql = null;

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			con = getConnection();
			// 全表更新，用于升级
			if (shid == null) {
				sql = "update ic_general_b set cinvbasid=man.pk_invbasdoc from  ic_general_b b , bd_invmandoc man    where b.cinventoryid=man.pk_invmandoc and (cinvbasid is null or b.cinventoryid=b.cinvbasid)";

				stmt = con.prepareStatement(sql);
				stmt.executeUpdate();
			} else {
				// 用于单据保存
				sql = "select b.cinventoryid,man.pk_invbasdoc from ic_general_b b ,bd_invmandoc man where b.cgeneralhid=? and b.cinventoryid=man.pk_invmandoc";
				stmt = con.prepareStatement(sql);
				stmt.setString(1, shid);
				rs = stmt.executeQuery();
				HashMap ht = new HashMap();
				ArrayList alinv = new ArrayList();
				while (rs.next()) {
					String invid = rs.getString(1);
					String basid = rs.getString(2);
					if (!ht.containsKey(invid)) {
						ht.put(invid, basid);
						alinv.add(invid);
					}

				}
				if (alinv.size() > 0) {
					stmt.close();

					String sql1 = "UPDATE  ic_general_b   SET  cinvbasid=? where cgeneralhid=? and cinventoryid=? ";
					stmt = prepareStatement(con, sql1);
					for (int i = 0; i < alinv.size(); i++) {
						stmt.setString(1, (String) ht.get(alinv.get(i)));
						stmt.setString(2, shid);
						stmt.setString(3, (String) alinv.get(i));
						executeUpdate(stmt);
					}
					executeBatch(stmt);
				}

			}
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {

			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		return;

	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param
	 * 
	 */
	public void updateFirstBillCode(ArrayList alhidcode, String cgeneralhid) {
		if (alhidcode == null || alhidcode.size() == 0)
			return;

		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			String sql = " update ic_general_b set vfirstbillcode=? where cfirstbillhid=?";
			if (cgeneralhid != null)
				sql = sql + " and cgeneralhid=? ";
			stmt = prepareStatement(con, sql);
			String[] tmp = null;
			for (int i = 0; i < alhidcode.size(); i++) {
				tmp = (String[]) alhidcode.get(i);
				stmt.setString(1, tmp[1]);
				stmt.setString(2, tmp[0]);
				if (cgeneralhid != null)
					stmt.setString(3, cgeneralhid);

				executeUpdate(stmt);
			}
			executeBatch(stmt);

		} catch (Exception e) {
			// 升级使用，不往外抛错误
			nc.vo.scm.pub.SCMEnv.error(e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return;
	}

	/**
	 * 创建者：王乃军 功能：修改表头
	 * 
	 * ！！！ 不能通过此方法修改fbillflag = ?, fspecialflag = ?,
	 * 
	 * 参数： 返回： 例外： 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param voBill
	 *            nc.vo.ic.pub.bill.GeneralBillVO
	 */
	public void updateHeader(GeneralBillHeaderVO voGeneralBillHeader)
			throws BusinessException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateHeader",
				new Object[] { voGeneralBillHeader });
		/** ********************************************************** */
		// fbillflag = ?, fspecialflag = ?,
		// // 复制数据
		// try{
		// String
		// cgeneralhid=(String)voGeneralBillHeader.getAttributeValue("cgeneralhid");
		// String newkey=copyHeader(cgeneralhid);
		// }catch(Exception e){
		// throw new SQLException("复制失败:"+e.getMessage());
		// }
		// 退库单和非退库单不能互，所以不对退库标志修改 by hanwei 2003-10-10
		/*
		 * String sql = "update ic_general_h set pk_corp = ?, cbiztype = ?,
		 * cbilltypecode = ?, vbillcode = ?, dbilldate = ?, cwarehouseid = ?,
		 * cdispatcherid = ?, cdptid = ?, cwhsmanagerid = ?, coperatorid = ?,
		 * cregister = ?, dauditdate = ?, cauditorid = ?, daccountdate = ?,
		 * cinventoryid = ?, ccustomerid = ?, cdilivertypeid = ?,
		 * cwastewarehouseid = ?, cbizid = ?, cproviderid = ?, vnote = ?,
		 * vuserdef1 = ?, vuserdef2 = ?, vuserdef3 = ?, vuserdef4 = ?, vuserdef5 = ?,
		 * vuserdef6 = ?, vuserdef7 = ?, vuserdef8 = ?, vuserdef9 = ?,
		 * vuserdef10 = ? ,vheadnote2 =? ,ndiscountmny=?,nnetmny=?,
		 * cotherwhid=?,cendreportid=?,pk_measware=?,clastmodiid=?,tlastmoditime=?,cothercalbodyid=?,cothercorpid=?,vuserdef11=?,vuserdef12=?,vuserdef13=?,vuserdef14=?,vuserdef15=?,vuserdef16=?,vuserdef17=?,vuserdef18=?,vuserdef19=?,vuserdef20=?,pk_defdoc1=?,pk_defdoc2=?,pk_defdoc3=?,pk_defdoc4=?,pk_defdoc5=?,pk_defdoc6=?,pk_defdoc7=?,pk_defdoc8=?,pk_defdoc9=?,pk_defdoc10=?,pk_defdoc11=?,pk_defdoc12=?,pk_defdoc13=?,pk_defdoc14=?,pk_defdoc15=?,pk_defdoc16=?,pk_defdoc17=?,pk_defdoc18=?,pk_defdoc19=?,pk_defdoc20=?,pk_cubasdoc=?,pk_cubasdocC=?,bassetcard=?
		 * where cgeneralhid = ?";
		 * 
		 * Connection con = null; PreparedStatement stmt = null;
		 */
		try {

			voGeneralBillHeader.setStatus(VOStatus.UPDATED);
			SmartDMO dmo = new SmartDMO();
			dmo.maintain(voGeneralBillHeader);
			dmo = null;

			/*
			 * con = getConnection(); stmt = con.prepareStatement(sql); //
			 * update non PK fields: if (voGeneralBillHeader.getPk_corp() ==
			 * null) { stmt.setNull(1, Types.CHAR); } else { stmt.setString(1,
			 * voGeneralBillHeader.getPk_corp()); } if
			 * (voGeneralBillHeader.getCbiztypeid() == null) { stmt.setNull(2,
			 * Types.CHAR); } else { stmt.setString(2,
			 * voGeneralBillHeader.getCbiztypeid()); } if
			 * (voGeneralBillHeader.getCbilltypecode() == null) {
			 * stmt.setNull(3, Types.CHAR); } else { stmt.setString(3,
			 * voGeneralBillHeader.getCbilltypecode()); } if
			 * (voGeneralBillHeader.getVbillcode() == null) { stmt.setNull(4,
			 * Types.CHAR); } else { stmt.setString(4,
			 * voGeneralBillHeader.getVbillcode()); } if
			 * (voGeneralBillHeader.getDbilldate() == null) { stmt.setNull(5,
			 * Types.CHAR); } else { stmt.setString(5,
			 * voGeneralBillHeader.getDbilldate().toString()); } if
			 * (voGeneralBillHeader.getCwarehouseid() == null) { stmt.setNull(6,
			 * Types.CHAR); } else { stmt.setString(6,
			 * voGeneralBillHeader.getCwarehouseid()); } if
			 * (voGeneralBillHeader.getCdispatcherid() == null) {
			 * stmt.setNull(7, Types.CHAR); } else { stmt.setString(7,
			 * voGeneralBillHeader.getCdispatcherid()); } if
			 * (voGeneralBillHeader.getCdptid() == null) { stmt.setNull(8,
			 * Types.CHAR); } else { stmt.setString(8,
			 * voGeneralBillHeader.getCdptid()); } if
			 * (voGeneralBillHeader.getCwhsmanagerid() == null) {
			 * stmt.setNull(9, Types.CHAR); } else { stmt.setString(9,
			 * voGeneralBillHeader.getCwhsmanagerid()); } if
			 * (voGeneralBillHeader.getCoperatorid() == null) { stmt.setNull(10,
			 * Types.CHAR); } else { stmt.setString(10,
			 * voGeneralBillHeader.getCoperatorid()); } //if
			 * (voGeneralBillHeader.getCregister() == null) { stmt.setNull(11,
			 * Types.CHAR); //} else { //stmt.setString(11,
			 * voGeneralBillHeader.getCregister()); //} //if
			 * (voGeneralBillHeader.getDauditdate() == null) { stmt.setNull(12,
			 * Types.CHAR); //} else { //stmt.setString(12,
			 * voGeneralBillHeader.getDauditdate().toString()); //} //if
			 * (voGeneralBillHeader.getCauditorid() == null) { stmt.setNull(13,
			 * Types.CHAR); //} else { //stmt.setString(13,
			 * voGeneralBillHeader.getCauditorid()); //} //if
			 * (voGeneralBillHeader.getDaccountdate() == null) {
			 * stmt.setNull(14, Types.CHAR); //} else { //stmt.setString(14,
			 * voGeneralBillHeader.getDaccountdate().toString()); //} if
			 * (voGeneralBillHeader.getCinventoryid() == null) {
			 * stmt.setNull(15, Types.CHAR); } else { stmt.setString(15,
			 * voGeneralBillHeader.getCinventoryid()); } if
			 * (voGeneralBillHeader.getCcustomerid() == null) { stmt.setNull(16,
			 * Types.CHAR); } else { stmt.setString(16,
			 * voGeneralBillHeader.getCcustomerid()); } if
			 * (voGeneralBillHeader.getCdilivertypeid() == null) {
			 * stmt.setNull(17, Types.CHAR); } else { stmt.setString(17,
			 * voGeneralBillHeader.getCdilivertypeid()); } if
			 * (voGeneralBillHeader.getCwastewarehouseid() == null) {
			 * stmt.setNull(18, Types.CHAR); } else { stmt.setString(18,
			 * voGeneralBillHeader.getCwastewarehouseid()); } if
			 * (voGeneralBillHeader.getCbizid() == null) { stmt.setNull(19,
			 * Types.CHAR); } else { stmt.setString(19,
			 * voGeneralBillHeader.getCbizid()); } if
			 * (voGeneralBillHeader.getCproviderid() == null) { stmt.setNull(20,
			 * Types.CHAR); } else { stmt.setString(20,
			 * voGeneralBillHeader.getCproviderid()); } if
			 * (voGeneralBillHeader.getVnote() == null) { stmt.setNull(21,
			 * Types.CHAR); } else { stmt.setString(21,
			 * voGeneralBillHeader.getVnote()); } if
			 * (voGeneralBillHeader.getVuserdef1() == null) { stmt.setNull(22,
			 * Types.CHAR); } else { stmt.setString(22,
			 * voGeneralBillHeader.getVuserdef1()); } if
			 * (voGeneralBillHeader.getVuserdef2() == null) { stmt.setNull(23,
			 * Types.CHAR); } else { stmt.setString(23,
			 * voGeneralBillHeader.getVuserdef2()); } if
			 * (voGeneralBillHeader.getVuserdef3() == null) { stmt.setNull(24,
			 * Types.CHAR); } else { stmt.setString(24,
			 * voGeneralBillHeader.getVuserdef3()); } if
			 * (voGeneralBillHeader.getVuserdef4() == null) { stmt.setNull(25,
			 * Types.CHAR); } else { stmt.setString(25,
			 * voGeneralBillHeader.getVuserdef4()); } if
			 * (voGeneralBillHeader.getVuserdef5() == null) { stmt.setNull(26,
			 * Types.CHAR); } else { stmt.setString(26,
			 * voGeneralBillHeader.getVuserdef5()); } if
			 * (voGeneralBillHeader.getVuserdef6() == null) { stmt.setNull(27,
			 * Types.CHAR); } else { stmt.setString(27,
			 * voGeneralBillHeader.getVuserdef6()); } if
			 * (voGeneralBillHeader.getAttributeValue("vuserdef7") == null) {
			 * stmt.setNull(28, Types.CHAR); } else { stmt.setString(28,
			 * voGeneralBillHeader.getAttributeValue("vuserdef7").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef8") == null) {
			 * stmt.setNull(29, Types.CHAR); } else { stmt.setString(29,
			 * voGeneralBillHeader.getAttributeValue("vuserdef8").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef9") == null) {
			 * stmt.setNull(30, Types.CHAR); } else { stmt.setString(30,
			 * voGeneralBillHeader.getAttributeValue("vuserdef9").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef10") == null) {
			 * stmt.setNull(31, Types.CHAR); } else { stmt.setString(31,
			 * voGeneralBillHeader.getAttributeValue("vuserdef10").toString()); }
			 * //退货备注 add by hanwei 2003-10-10 if
			 * (voGeneralBillHeader.getVheadnote2() == null) { stmt.setNull(32,
			 * Types.CHAR); } else { stmt.setString(32,
			 * voGeneralBillHeader.getVheadnote2().trim()); } if
			 * (voGeneralBillHeader.getNdiscountmny() == null) {
			 * stmt.setNull(33, Types.DECIMAL); } else {
			 * stmt.setBigDecimal(33,voGeneralBillHeader.getNdiscountmny().toBigDecimal()); }
			 * if (voGeneralBillHeader.getNnetmny() == null) { stmt.setNull(34,
			 * Types.DECIMAL); } else {
			 * stmt.setBigDecimal(34,voGeneralBillHeader.getNnetmny().toBigDecimal()); }
			 * 
			 * //其他仓库 if (voGeneralBillHeader.getAttributeValue("cotherwhid") ==
			 * null){ stmt.setNull(35, Types.CHAR); } else { stmt.setString(35,
			 * voGeneralBillHeader.getAttributeValue("cotherwhid").toString()); }
			 * //完工报告ID if
			 * (voGeneralBillHeader.getAttributeValue("cendreportid") == null){
			 * stmt.setNull(36, Types.CHAR); } else { stmt.setString(36,
			 * voGeneralBillHeader.getAttributeValue("cendreportid").toString()); }
			 * //计量器具ID if (voGeneralBillHeader.getAttributeValue("pk_measware") ==
			 * null){ stmt.setNull(37, Types.CHAR); } else { stmt.setString(37,
			 * voGeneralBillHeader.getAttributeValue("pk_measware").toString()); }
			 * //最后修改人 if (voGeneralBillHeader.getAttributeValue("clastmodiid") ==
			 * null){ stmt.setNull(38, Types.CHAR); } else { stmt.setString(38,
			 * voGeneralBillHeader.getAttributeValue("clastmodiid").toString()); }
			 * //最后修改时间 if
			 * (voGeneralBillHeader.getAttributeValue("tlastmoditime") == null){
			 * stmt.setNull(39, Types.CHAR); } else { stmt.setString(39,
			 * voGeneralBillHeader.getAttributeValue("tlastmoditime").toString()); }
			 * //其他库存组织 if
			 * (voGeneralBillHeader.getAttributeValue("cothercalbodyid") ==
			 * null){ stmt.setNull(40, Types.CHAR); } else { stmt.setString(40,
			 * voGeneralBillHeader.getAttributeValue("cothercalbodyid").toString()); }
			 * //其他公司 if (voGeneralBillHeader.getAttributeValue("cothercorpid") ==
			 * null){ stmt.setNull(41, Types.CHAR); } else { stmt.setString(41,
			 * voGeneralBillHeader.getAttributeValue("cothercorpid").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef11") == null) {
			 * stmt.setNull(42, Types.CHAR); } else { stmt.setString(42,
			 * voGeneralBillHeader.getAttributeValue("vuserdef11").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef12") == null) {
			 * stmt.setNull(43, Types.CHAR); } else { stmt.setString(43,
			 * voGeneralBillHeader.getAttributeValue("vuserdef12").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef13") == null) {
			 * stmt.setNull(44, Types.CHAR); } else { stmt.setString(44,
			 * voGeneralBillHeader.getAttributeValue("vuserdef13").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef14") == null) {
			 * stmt.setNull(45, Types.CHAR); } else { stmt.setString(45,
			 * voGeneralBillHeader.getAttributeValue("vuserdef14").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef15") == null) {
			 * stmt.setNull(46, Types.CHAR); } else { stmt.setString(46,
			 * voGeneralBillHeader.getAttributeValue("vuserdef15").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef16") == null) {
			 * stmt.setNull(47, Types.CHAR); } else { stmt.setString(47,
			 * voGeneralBillHeader.getAttributeValue("vuserdef16").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef17") == null) {
			 * stmt.setNull(48, Types.CHAR); } else { stmt.setString(48,
			 * voGeneralBillHeader.getAttributeValue("vuserdef17").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef18") == null) {
			 * stmt.setNull(49, Types.CHAR); } else { stmt.setString(49,
			 * voGeneralBillHeader.getAttributeValue("vuserdef18").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef19") == null) {
			 * stmt.setNull(50, Types.CHAR); } else { stmt.setString(50,
			 * voGeneralBillHeader.getAttributeValue("vuserdef19").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("vuserdef20") == null) {
			 * stmt.setNull(51, Types.CHAR); } else { stmt.setString(51,
			 * voGeneralBillHeader.getAttributeValue("vuserdef20").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc1") == null) {
			 * stmt.setNull(52, Types.CHAR); } else { stmt.setString(52,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc1").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc2") == null) {
			 * stmt.setNull(53, Types.CHAR); } else { stmt.setString(53,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc2").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc3") == null) {
			 * stmt.setNull(54, Types.CHAR); } else { stmt.setString(54,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc3").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc4") == null) {
			 * stmt.setNull(55, Types.CHAR); } else { stmt.setString(55,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc4").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc5") == null) {
			 * stmt.setNull(56, Types.CHAR); } else { stmt.setString(56,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc5").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc6") == null) {
			 * stmt.setNull(57, Types.CHAR); } else { stmt.setString(57,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc6").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc7") == null) {
			 * stmt.setNull(58, Types.CHAR); } else { stmt.setString(58,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc7").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc8") == null) {
			 * stmt.setNull(59, Types.CHAR); } else { stmt.setString(59,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc8").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc9") == null) {
			 * stmt.setNull(60, Types.CHAR); } else { stmt.setString(60,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc9").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc10") == null) {
			 * stmt.setNull(61, Types.CHAR); } else { stmt.setString(61,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc10").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc11") == null) {
			 * stmt.setNull(62, Types.CHAR); } else { stmt.setString(62,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc11").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc12") == null) {
			 * stmt.setNull(63, Types.CHAR); } else { stmt.setString(63,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc12").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc13") == null) {
			 * stmt.setNull(64, Types.CHAR); } else { stmt.setString(64,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc13").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc14") == null) {
			 * stmt.setNull(65, Types.CHAR); } else { stmt.setString(65,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc14").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc15") == null) {
			 * stmt.setNull(66, Types.CHAR); } else { stmt.setString(66,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc15").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc16") == null) {
			 * stmt.setNull(67, Types.CHAR); } else { stmt.setString(67,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc16").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc17") == null) {
			 * stmt.setNull(68, Types.CHAR); } else { stmt.setString(68,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc17").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc18") == null) {
			 * stmt.setNull(69, Types.CHAR); } else { stmt.setString(69,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc18").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc19") == null) {
			 * stmt.setNull(70, Types.CHAR); } else { stmt.setString(70,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc19").toString()); }
			 * if (voGeneralBillHeader.getAttributeValue("pk_defdoc20") == null) {
			 * stmt.setNull(71, Types.CHAR); } else { stmt.setString(71,
			 * voGeneralBillHeader.getAttributeValue("pk_defdoc20").toString()); }
			 *  // 供应商基本档案ID if
			 * (voGeneralBillHeader.getAttributeValue("pk_cubasdoc") == null) {
			 * stmt.setNull(72, Types.CHAR); } else { stmt.setString(72,
			 * voGeneralBillHeader.getAttributeValue("pk_cubasdoc").toString()); } //
			 * 客户基本档案ID if
			 * (voGeneralBillHeader.getAttributeValue("pk_cubasdocC") == null) {
			 * stmt.setNull(73, Types.CHAR); } else { stmt.setString(73,
			 * voGeneralBillHeader.getAttributeValue("pk_cubasdocC").toString()); } //
			 * 已生成资产卡片 if (voGeneralBillHeader.getAttributeValue("bassetcard") ==
			 * null) { stmt.setNull(74, Types.CHAR); } else { stmt.setString(74,
			 * voGeneralBillHeader.getAttributeValue("bassetcard").toString()); } //
			 * find record by PK fields: stmt.setString(75,
			 * voGeneralBillHeader.getPrimaryKey());
			 *  // stmt.executeUpdate();
			 */
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			/*
			 * try { if (stmt != null) { stmt.close(); } } catch (Exception e) { }
			 * try { if (con != null) { con.close(); } } catch (Exception e) { }
			 */
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateHeader",
				new Object[] { voGeneralBillHeader });
		/** ********************************************************** */
	}

	/**
	 * 用批量Item 的ts 、条码数量、是否关闭条码 对象的属性更新数据库中的值。
	 * 
	 * 创建日期：(2001-5-14)
	 * 
	 * @param voItem
	 *            nc.vo.ic.ic201.GeneralHItemVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void updateItemBarcodeNumBatch(ArrayList voItems)
			throws BusinessException {
		if (voItems == null || voItems.size() == 0)
			return;
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateItem",
				new Object[] { voItems });
		/** ********************************************************** */
		GeneralBillItemVO voItem = null;
		String sql = "update ic_general_b set  nbarcodenum=?,bbarcodeclose=?  where cgeneralbid = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = prepareStatement(con, sql);
			// FreeVO voFree = null;
			// nc.vo.ic.pub.bc.BarCodeVO[] barcodevo = null;
			// BigDecimal ufdZero = new BigDecimal(0.0);
			// BigDecimal ufdbarcodenums = null;
			for (int i = 0; i < voItems.size(); i++) {
				voItem = (GeneralBillItemVO) voItems.get(i);
				// barcodevo = voItem.getBarCodeVOs();

				// 这里要根据条码的状态做比较，删除的条码不要计算到数量里面

				voItem.calBarcodeNum();

				stmt.setBigDecimal(1, voItem.getListbarcodenums()
						.toBigDecimal());

				stmt.setString(2, voItem.getBarcodeClose().toString());

				stmt.setString(3, voItem.getPrimaryKey());
				executeUpdate(stmt);
			}
			executeBatch(stmt);
		} catch (Exception e) {
			// 库存组异常抛出规范
			throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateItem",
				new Object[] { voItems });
		/** ********************************************************** */
	}

	/**
	 * 用批量VO对象的属性更新数据库中的值。
	 * 
	 * 创建日期：(2001-5-14)
	 * 
	 * @param voItem
	 *            nc.vo.ic.ic201.GeneralHItemVO
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public void updateItemBatch(GeneralBillItemVO[] voItems)
			throws BusinessException {
		if (voItems == null || voItems.length == 0)
			return;
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateItemBatch",
				new Object[] { voItems });
		/** ********************************************************** */
		GeneralBillItemVO voItem = null;
		try {
			for (int i = 0; i < voItems.length; i++) {
				voItem = voItems[i];
				voItem.calBarcodeNum();
				voItem.setStatus(VOStatus.UPDATED);
			}
			SmartDMO dmo = new SmartDMO();
			dmo.maintain(voItems);
			dmo = null;
		} catch (Exception e) {
			if (e instanceof SQLException)
				// 库存组异常抛出规范
				throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
			else
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("4008bill",
								"UPP4008bill-000365")/* @res "更新表体错误！" */);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.ic.pub.bill.GeneralBillDMO", "updateItemBatch",
				new Object[] { voItems });
		/** ********************************************************** */
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param
	 * 
	 */
	public void updateSourceRowNo(ArrayList alhidcode, String hid) {
		if (alhidcode == null || alhidcode.size() == 0)
			return;
		m_timer.start();
		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			String sql = " update ic_general_b set vsourcerowno=? where csourcebillbid=? and vsourcerowno is null ";
			if (hid != null)
				sql = sql + " and cgeneralhid=?";

			stmt = prepareStatement(con, sql);
			String[] tmp = null;
			for (int i = 0; i < alhidcode.size(); i++) {
				tmp = (String[]) alhidcode.get(i);
				stmt.setString(1, tmp[1]);
				stmt.setString(2, tmp[0]);
				if (hid != null)
					stmt.setString(3, hid);

				executeUpdate(stmt);
			}
			executeBatch(stmt);

		} catch (Exception e) {
			// 升级使用，不往外抛错误
			nc.vo.scm.pub.SCMEnv.error(e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		m_timer.stopAndShow("@@:--)更新来源行号：" + String.valueOf(alhidcode.size()));
		return;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param
	 * 
	 */
	public void updateSourceRowNo(String sql) {
		if (sql == null)
			return;
		m_timer.start();
		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			// String sql = " update ic_general_b set vsourcerowno=? where
			// csourcebillbid=?";

			stmt = con.prepareStatement(sql);
			executeUpdate(stmt);

		} catch (Exception e) {
			// 升级使用，不往外抛错误
			nc.vo.scm.pub.SCMEnv.error(e);
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		m_timer.stopAndShow("@@:--)更新来源行号：");
		return;
	}

	/**
	 * 创建人：刘家清 创建时间：2008-12-1 下午04:18:43 创建原因：
	 * 下游单据检查修改成依赖于ICSourceBillPara，并且需要提示出明细。
	 * 
	 * @param sCurBillType
	 * @param sCurBillPK
	 * @return
	 * @throws Exception
	 */
	protected boolean isHaveForwardBill(String sCurBillType, String sCurBillPK,
			String sCorpID,Boolean bOnroadflag) throws Exception {

		// 得到下游单据类型
		ArrayList alFwdBillType = ICSourceBillPara
				.getFwdBillTypes(sCurBillType);

		if (alFwdBillType != null) {

			nc.itf.uap.sf.ICreateCorpQueryService s = (nc.itf.uap.sf.ICreateCorpQueryService) NCLocator
					.getInstance().lookup(
							"nc.itf.uap.sf.ICreateCorpQueryService");

			String sFwdBillType = null;

			ICDbVisitor dbv = new ICDbVisitor();

			ICDataSet data = null;

			StringBuilder sErr = null;

			for (int i = 0; i < alFwdBillType.size(); i++) {
				sFwdBillType = (String) alFwdBillType.get(i);

				if (sFwdBillType.charAt(0) == 'I' // 存货核算单据不在下游单据之列
						|| (!bOnroadflag && sFwdBillType
								.equals(nc.vo.ic.pub.BillTypeConst.m_otherIn))
						|| sFwdBillType
								.equals(nc.vo.ic.pub.BillTypeConst.m_otherOut)) {// 库存哪些单据?拆解的下游可以

					continue;
				}
				// 应收单不再考虑，如果是4C
				if (nc.vo.ic.pub.BillTypeConst.m_saleOut.equals(sCurBillType)
						&& (sFwdBillType.charAt(0) == 'D'
								|| sFwdBillType.charAt(0) == 'd'
								|| sFwdBillType.charAt(0) == 'Y' || sFwdBillType
								.charAt(0) == 'y'))
					continue;

				if (!s.isEnabled(sCorpID, ICSourceBillPara
						.getBillModule(sFwdBillType)))
					continue;

				// 修改人：刘家清 修改时间：2009-1-6 上午10:16:12
				// 修改原因：因为运输模块的特殊性，所以判断完是否启用后，还要判断系统中是否用了此单据类型，来处理发运不升级的问题．
				if (ScmConst.m_sModuleDM.equals(ICSourceBillPara
						.getBillModule(sFwdBillType))) {
					String otherSQL = "select pk_billtypecode from bd_billtype where pk_billtypecode = '"
							+ sFwdBillType + "'";
					data = dbv.query(otherSQL);
					if (data == null || data.getRowCount() <= 0)
						continue;
				}

				String sql = ICSourceBillPara.createCheckvfwbillSQL(
						sFwdBillType, sCurBillType, sCurBillPK);

				if (null != sql && !"".equals(sql)) {
					data = dbv.query(sql);
					if (data != null && data.getRowCount() > 0) {
						if (null == sErr || "".equals(sErr.toString()))
							sErr = new StringBuilder(
									"该单据已经生成下游单据，不能取消签字！\n下游单据如下：\n");
						for (int k = 0; k < data.getRowCount(); k++)
							sErr.append("单据类型["
									+ data.getValueAt(k, "billtypename")
									+ "] 单据号[" + data.getValueAt(k, "billcode")
									+ "] \n");
					}

				}

			}

			if (null != sErr && !"".equals(sErr.toString()))
				throw new BusinessException(sErr.toString());
		}

		return false;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-10-14 16:04:32)
	 * 
	 * @return
	 * @param
	 * 
	 */
	public ArrayList updateByid(GeneralBillItemVO[] vos) throws Exception {
		if (vos == null || vos.length == 0)
			return null;

		ArrayList alid = new ArrayList();
		for (int i = 0; i < vos.length; i++) {
			alid.add(vos[i].getCgeneralbid());

		}

		SmartDMO dmo = new SmartDMO();
		dmo.executeUpdateBatch(vos, new String[] { "vvehiclecode", "ncountnum",
				"vuserdef9" }, new String[] { "cgeneralbid" });
		Object[] os = dmo
				.selectBy2("select cgeneralbid,ts from ic_general_b where 0=0 "
						+ GeneralSqlString.formInSQL("cgeneralbid", alid));
		ArrayList alts = new ArrayList();
		if (os != null && os.length > 0) {
			alts = new ArrayList();
			for (int i = 0; i < os.length; i++) {

				alts.add(new String[] { (String) ((Object[]) os[i])[0],
						((Object[]) os[i])[1].toString() });

			}

		}
		return alts;
	}

	/**
	 * 功能： 创建人：yangb 创建日期：2007-12-2 备注：
	 * 
	 * @param vo
	 * @param isWhole
	 * @return
	 */
	public GeneralBillItemVO[] queryPureWholeItems(String billid)
			throws BusinessException {
		if (billid == null)
			return null;
		try {
			String[] saBillPK = new String[] { billid };
			GeneralBillItemVO[] voaAllItem = (GeneralBillItemVO[]) queryPureItemData(saBillPK);
			if (voaAllItem == null || voaAllItem.length <= 0)
				return null;
			// ###################################
			// 查询条码数据 add by hanwei 2004-04-29
			queryBillItemBarCode(voaAllItem, saBillPK);
			// ###################################

			int ilen = voaAllItem.length;
			ArrayList alBid = new ArrayList();
			ArrayList alHid = new ArrayList();
			ArrayList alInvID = new ArrayList();
			for (int i = 0; i < ilen; i++) {
				alBid.add(voaAllItem[i].getCgeneralbid());
				if (!alInvID.contains(voaAllItem[i].getCinventoryid())) {
					alInvID.add(voaAllItem[i].getCinventoryid());
				}
			}
			alHid.add(billid);

			LocatorDMO locatordmo = new LocatorDMO();
			Hashtable htLocator = locatordmo.queryByBodyPKs(alBid);
			SerialDMO sndmo = new SerialDMO();
			Hashtable htSn = sndmo.queryByBillPKs(alHid);
			nc.bs.ic.pub.bill.MiscDMO dmoMisc = new nc.bs.ic.pub.bill.MiscDMO();
			InvVO[] alInvVO = dmoMisc.getInvInfo((String[]) alInvID
					.toArray(new String[alInvID.size()]));
			HashMap<String, InvVO> hsinv = new HashMap<String, InvVO>();
			if (alInvVO != null) {
				for (int i = 0; i < alInvVO.length; i++)
					hsinv.put(alInvVO[i].getCinventoryid(), alInvVO[i]);
			}
			String cgeneralbid = null;
			ArrayList alLocator = null;
			ArrayList alSn = null;
			LocatorVO[] voaLocator = null;
			SerialVO[] voaSn = null;
			BarCodeVO[] barvos = null;
			InvVO invvo = null;
			for (int i = 0; i < ilen; i++) {
				voaAllItem[i].setStatus(VOStatus.UNCHANGED);
				barvos = voaAllItem[i].getBarCodeVOs();
				if (barvos != null && barvos.length > 0) {
					for (int k = 0; k < barvos.length; k++)
						barvos[k].setStatus(VOStatus.UNCHANGED);
				}
				cgeneralbid = voaAllItem[i].getCgeneralbid();
				if (null != htLocator && htLocator.containsKey(cgeneralbid)) {
					alLocator = (ArrayList) htLocator.get(cgeneralbid);
					if (alLocator != null) {
						voaLocator = new LocatorVO[alLocator.size()];
						alLocator.toArray(voaLocator);
						for (int k = 0; k < voaLocator.length; k++)
							voaLocator[k].setStatus(VOStatus.UNCHANGED);
						voaAllItem[i].setLocator(voaLocator);
						if (voaLocator.length == 1) {
							voaAllItem[i].setCspaceid(voaLocator[0]
									.getCspaceid());
							voaAllItem[i].setVspacename(voaLocator[0]
									.getVspacename());
						}
					}
				}
				if (null != htSn && htSn.containsKey(cgeneralbid)) {
					alSn = (ArrayList) htSn.get(cgeneralbid);
					if (alSn != null) {
						voaSn = new SerialVO[alSn.size()];
						alSn.toArray(voaSn);
						for (int k = 0; k < voaSn.length; k++)
							voaSn[k].setStatus(VOStatus.UNCHANGED);
						voaAllItem[i].setSerial(voaSn);
					}
				}
				invvo = hsinv.get(voaAllItem[i].getCinventoryid());
				if (null != invvo) {
					voaAllItem[i].setInvPartly(invvo);
					// voaAllItem[i].setAttributeValue("invvo", invvo);
				}
			}
			ICCommonBusiImpl.execFormulaForBatchCode(voaAllItem);

			return voaAllItem;
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}
	}

	/**
	 * 创建者：王乃军 功能：按指定条件查询单据。外模块查存库存单据。v53 add 参数： 返回： 例外： 日期：(2001-6-12
	 * 20:38:02) 修改日期，修改人，修改原因，注释标志： 2002-01-16 , 王乃军，移植到oracle
	 * 
	 * 
	 * @return nc.vo.ic.pub.bill.GeneralBillVO[]
	 * @param voQryCond
	 *            nc.vo.ic.pub.bill.QryConditionVO
	 */
	public ArrayList queryBillByPks_for_OutModule(String[] pks)
			throws BusinessException {
		if (pks == null || pks.length <= 0)
			return null;
		final String code = "head.cgeneralhid";
		nc.vo.pub.query.ConditionVO[] voaCond = new nc.vo.pub.query.ConditionVO[1];
		voaCond[0] = new nc.vo.pub.query.ConditionVO();
		voaCond[0].setFieldCode(code);
		voaCond[0].setLogic(true);
		voaCond[0].setOperaCode(" in ");

		String insql = GeneralSqlString.formInSQL(code, pks);
		String insqlbak = " 1=1 " + insql;
		insql = insql.trim();
		if (insql.indexOf(code) >= 0)
			insql = insql.substring(insql.indexOf(code) + code.length());

		QryConditionVO qryconvo = new QryConditionVO(insqlbak);

		qryconvo.setParam(QryConditionVO.QRY_CONDITIONVO, voaCond);

		qryconvo.setIntParam(0, GeneralBillVO.QRY_HEAD_ONLY_PURE);
		try {
			return queryPureHeadersPartItems(qryconvo, true);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}

	public ArrayList queryBillBySourcePks(String billType, String[] pks)
			throws BusinessException {
		if (pks == null || pks.length <= 0)
			return null;
		final String code = "body.csourcebillhid";
		nc.vo.pub.query.ConditionVO[] voaCond = new nc.vo.pub.query.ConditionVO[1];
		voaCond[0] = new nc.vo.pub.query.ConditionVO();
		voaCond[0].setFieldCode(code);
		voaCond[0].setLogic(true);
		voaCond[0].setOperaCode(" in ");

		String insql = GeneralSqlString.formInSQL(code, pks);
		String insqlbak = " 1=1 " + insql + " and body.csourcetype = '"
				+ billType + "'";
		insql = insql.trim();
		if (insql.indexOf(code) >= 0)
			insql = insql.substring(insql.indexOf(code) + code.length());

		QryConditionVO qryconvo = new QryConditionVO(insqlbak);

		qryconvo.setParam(QryConditionVO.QRY_CONDITIONVO, voaCond);

		qryconvo.setIntParam(0, GeneralBillVO.QRY_FULL_BILL);
		try {
			return queryBills(qryconvo);
		} catch (Exception e) {
			throw GenMethod.handleException(null, e);
		}

	}
	/**
	 * 接口函数功能:新单据参照查询源头单据使用，包括表头，表体数据， 需要在平台注册的单据DMO实现
	 * 
	 * 参数: String sheadsql ----- 主查询条件 String sbodysql ----- 辅查询条件
	 * 
	 * 
	 * 返回值:Object[3] 0 ------ 查询的单据主VO数组 CircularlyAccessibleValueObject[] 1
	 * ------ 查询的单据子VO数组 CircularlyAccessibleValueObject[] 2 ------ 查询数据量过大的提示
	 * String 实现注意：在查询的单据数据量过大时，如子表，可以仅返回前1000条数据， 此时必须返回数据量过大的提示，以便提示给用户！！！
	 * 异常:SQLException,RemoteException
	 * 
	 */
	public Object[] queryAllBillDatas(String sheadsql, String sbodysql)
			throws BusinessException {
		
		CircularlyAccessibleValueObject[] headvos = queryAllHeadData(sheadsql);
		if (headvos == null || headvos.length <= 0)
			return null;
		
		Object[] retobjs = new Object[3];

		retobjs[0] = headvos;

		if (headvos != null && headvos.length > RedunUtil.MAXREC) {
			CircularlyAccessibleValueObject[] bakvos = headvos;
			headvos = new GeneralBillHeaderVO[RedunUtil.MAXREC];
			System.arraycopy(bakvos, 0, headvos, 0, headvos.length);
			retobjs[2] = "本次查询数据量太大，只能返回前5000行数据";
		}

		StringBuffer sbSql = new StringBuffer("SELECT ");
		sbSql.append(GenMethod.getSelectFields(GeneralBillItemVO.class,
				"body"));
		
		sbSql.append(" from ic_general_h head ");
		sbSql
				.append(" inner  join ic_general_b body on head.cgeneralhid=body.cgeneralhid ");
//		sbSql
//				.append(" inner  join  ic_general_bb3 bb3 ON body.cgeneralbid=bb3.cgeneralbid ");

		if (sheadsql != null) {
			DynamicJoinSql dynamicSQL = new DynamicJoinSql("head", "body");
			ConditionVO[] voCondition = GenMethod
					.getConditionVO(sheadsql);
			String sUnionSQL = dynamicSQL.getUnionSQL(voCondition);
			// 动态关联：
			if (sUnionSQL != null && sUnionSQL.length() > 0)
				sbSql.append(sUnionSQL);
		}

		sbSql.append(" where head.dr=0");
		sbSql.append(" and body.dr=0 ");
//		AND bb3.dr=0 ");
		sbSql.append(GeneralSqlString.formInSQL("head.cgeneralhid",
				SmartVOUtilExt.getVOsValues(headvos, "cgeneralhid")));
			
		GeneralBillItemVO voaItem[] = queryItemDataBySql(nc.vo.ic.pub.GenMethod.andTowWhere(sbSql.toString(),sheadsql));
		voaItem = getFreeItemData(voaItem);
		retobjs[0] = headvos;
		retobjs[1] = voaItem;
		return retobjs;
	}

}

