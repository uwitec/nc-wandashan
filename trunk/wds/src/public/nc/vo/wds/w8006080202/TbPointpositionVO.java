  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.wds.w8006080202;
   	
	import java.util.ArrayList;
	import nc.vo.pub.*;
	import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2010-6-26
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class TbPointpositionVO extends SuperVO {
           
             public UFDate pp_contractend;
             public String pp_homeowner;
             public String pp_customize3;
             public Integer dr;
             public String vnote;
             public String pp_customize5;
             public String pp_ppname;
             public String pp_ppaddress;
             public String pp_customize2;
             public UFTime ts;
             public UFDouble pp_storagearea;
             public UFDate pp_contractstart;
             public String pp_customize1;
             public String pp_pk;
             public Integer pp_archive;
             public String pp_ppcode;
             public String pp_customize4;
            
             public static final String  PP_CONTRACTEND="pp_contractend";   
             public static final String  PP_HOMEOWNER="pp_homeowner";   
             public static final String  PP_CUSTOMIZE3="pp_customize3";   
             public static final String  DR="dr";   
             public static final String  VNOTE="vnote";   
             public static final String  PP_CUSTOMIZE5="pp_customize5";   
             public static final String  PP_PPNAME="pp_ppname";   
             public static final String  PP_PPADDRESS="pp_ppaddress";   
             public static final String  PP_CUSTOMIZE2="pp_customize2";   
             public static final String  TS="ts";   
             public static final String  PP_STORAGEAREA="pp_storagearea";   
             public static final String  PP_CONTRACTSTART="pp_contractstart";   
             public static final String  PP_CUSTOMIZE1="pp_customize1";   
             public static final String  PP_PK="pp_pk";   
             public static final String  PP_ARCHIVE="pp_archive";   
             public static final String  PP_PPCODE="pp_ppcode";   
             public static final String  PP_CUSTOMIZE4="pp_customize4";   
      
    
        /**
	   * 属性pp_contractend的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return UFDate
	   */
	 public UFDate getPp_contractend() {
		 return pp_contractend;
	  }   
	  
     /**
	   * 属性pp_contractend的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_contractend UFDate
	   */
	public void setPp_contractend(UFDate newPp_contractend) {
		
		pp_contractend = newPp_contractend;
	 } 	  
       
        /**
	   * 属性pp_homeowner的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_homeowner() {
		 return pp_homeowner;
	  }   
	  
     /**
	   * 属性pp_homeowner的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_homeowner String
	   */
	public void setPp_homeowner(String newPp_homeowner) {
		
		pp_homeowner = newPp_homeowner;
	 } 	  
       
        /**
	   * 属性pp_customize3的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_customize3() {
		 return pp_customize3;
	  }   
	  
     /**
	   * 属性pp_customize3的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_customize3 String
	   */
	public void setPp_customize3(String newPp_customize3) {
		
		pp_customize3 = newPp_customize3;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性vnote的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getVnote() {
		 return vnote;
	  }   
	  
     /**
	   * 属性vnote的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newVnote String
	   */
	public void setVnote(String newVnote) {
		
		vnote = newVnote;
	 } 	  
       
        /**
	   * 属性pp_customize5的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_customize5() {
		 return pp_customize5;
	  }   
	  
     /**
	   * 属性pp_customize5的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_customize5 String
	   */
	public void setPp_customize5(String newPp_customize5) {
		
		pp_customize5 = newPp_customize5;
	 } 	  
       
        /**
	   * 属性pp_ppname的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_ppname() {
		 return pp_ppname;
	  }   
	  
     /**
	   * 属性pp_ppname的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_ppname String
	   */
	public void setPp_ppname(String newPp_ppname) {
		
		pp_ppname = newPp_ppname;
	 } 	  
       
        /**
	   * 属性pp_ppaddress的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_ppaddress() {
		 return pp_ppaddress;
	  }   
	  
     /**
	   * 属性pp_ppaddress的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_ppaddress String
	   */
	public void setPp_ppaddress(String newPp_ppaddress) {
		
		pp_ppaddress = newPp_ppaddress;
	 } 	  
       
        /**
	   * 属性pp_customize2的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_customize2() {
		 return pp_customize2;
	  }   
	  
     /**
	   * 属性pp_customize2的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_customize2 String
	   */
	public void setPp_customize2(String newPp_customize2) {
		
		pp_customize2 = newPp_customize2;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return UFDateTime
	   */
	 public UFTime getTs() {
		 return ts;
	  }   
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newTs UFDateTime
	   */
	public void setTs(UFTime newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性pp_storagearea的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return UFDouble
	   */
	 public UFDouble getPp_storagearea() {
		 return pp_storagearea;
	  }   
	  
     /**
	   * 属性pp_storagearea的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_storagearea UFDouble
	   */
	public void setPp_storagearea(UFDouble newPp_storagearea) {
		
		pp_storagearea = newPp_storagearea;
	 } 	  
       
        /**
	   * 属性pp_contractstart的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return UFDate
	   */
	 public UFDate getPp_contractstart() {
		 return pp_contractstart;
	  }   
	  
     /**
	   * 属性pp_contractstart的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_contractstart UFDate
	   */
	public void setPp_contractstart(UFDate newPp_contractstart) {
		
		pp_contractstart = newPp_contractstart;
	 } 	  
       
        /**
	   * 属性pp_customize1的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_customize1() {
		 return pp_customize1;
	  }   
	  
     /**
	   * 属性pp_customize1的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_customize1 String
	   */
	public void setPp_customize1(String newPp_customize1) {
		
		pp_customize1 = newPp_customize1;
	 } 	  
       
        /**
	   * 属性pp_pk的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_pk() {
		 return pp_pk;
	  }   
	  
     /**
	   * 属性pp_pk的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_pk String
	   */
	public void setPp_pk(String newPp_pk) {
		
		pp_pk = newPp_pk;
	 } 	  
       
        /**
	   * 属性pp_archive的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return Integer
	   */
	 public Integer getPp_archive() {
		 return pp_archive;
	  }   
	  
     /**
	   * 属性pp_archive的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_archive Integer
	   */
	public void setPp_archive(Integer newPp_archive) {
		
		pp_archive = newPp_archive;
	 } 	  
       
        /**
	   * 属性pp_ppcode的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_ppcode() {
		 return pp_ppcode;
	  }   
	  
     /**
	   * 属性pp_ppcode的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_ppcode String
	   */
	public void setPp_ppcode(String newPp_ppcode) {
		
		pp_ppcode = newPp_ppcode;
	 } 	  
       
        /**
	   * 属性pp_customize4的Getter方法.
	   *
	   * 创建日期:2010-6-26
	   * @return String
	   */
	 public String getPp_customize4() {
		 return pp_customize4;
	  }   
	  
     /**
	   * 属性pp_customize4的Setter方法.
	   *
	   * 创建日期:2010-6-26
	   * @param newPp_customize4 String
	   */
	public void setPp_customize4(String newPp_customize4) {
		
		pp_customize4 = newPp_customize4;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2010-6-26
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (pp_pk == null) {
			errFields.add(new String("pp_pk"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2010-6-26
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 	    return null;
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2010-6-26
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "pp_pk";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2010-6-26
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "tb_pointposition";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2010-6-26
	  */
	public TbPointpositionVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2010-6-26
	 * @param newPp_pk 主键值
	 */
	 public TbPointpositionVO(String newPp_pk) {
		
		// 为主键字段赋值:
		 pp_pk = newPp_pk;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-6-26
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return pp_pk;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-6-26
	  * @param newPp_pk  String    
	  */
	 public void setPrimaryKey(String newPp_pk) {
				
				pp_pk = newPp_pk; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2010-6-26
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "tb_pointposition"; 
				
	 } 
} 
