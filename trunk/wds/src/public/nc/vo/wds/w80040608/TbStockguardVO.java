  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.wds.w80040608;
   	
	import java.util.ArrayList;
	import nc.vo.pub.*;
	import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2010-7-16
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class TbStockguardVO extends SuperVO {
           
             public String pk_invbasdoc;
             public String sg_pk;
             public UFDateTime ts;
             public String sg_custom3;
             public String sg_custom1;
             public Integer sg_guardtime;
             public Integer dr;
             public String sg_remark;
             public String sg_custom2;
             public String sg_custom4;
            
             public static final String  PK_INVBASDOC="pk_invbasdoc";   
             public static final String  SG_PK="sg_pk";   
             public static final String  TS="ts";   
             public static final String  SG_CUSTOM3="sg_custom3";   
             public static final String  SG_CUSTOM1="sg_custom1";   
             public static final String  SG_GUARDTIME="sg_guardtime";   
             public static final String  DR="dr";   
             public static final String  SG_REMARK="sg_remark";   
             public static final String  SG_CUSTOM2="sg_custom2";   
             public static final String  SG_CUSTOM4="sg_custom4";   
      
    
        /**
	   * 属性pk_invbasdoc的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getPk_invbasdoc() {
		 return pk_invbasdoc;
	  }   
	  
     /**
	   * 属性pk_invbasdoc的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newPk_invbasdoc String
	   */
	public void setPk_invbasdoc(String newPk_invbasdoc) {
		
		pk_invbasdoc = newPk_invbasdoc;
	 } 	  
       
        /**
	   * 属性sg_pk的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_pk() {
		 return sg_pk;
	  }   
	  
     /**
	   * 属性sg_pk的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_pk String
	   */
	public void setSg_pk(String newSg_pk) {
		
		sg_pk = newSg_pk;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return UFDateTime
	   */
	 public UFDateTime getTs() {
		 return ts;
	  }   
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newTs UFDateTime
	   */
	public void setTs(UFDateTime newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性sg_custom3的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_custom3() {
		 return sg_custom3;
	  }   
	  
     /**
	   * 属性sg_custom3的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_custom3 String
	   */
	public void setSg_custom3(String newSg_custom3) {
		
		sg_custom3 = newSg_custom3;
	 } 	  
       
        /**
	   * 属性sg_custom1的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_custom1() {
		 return sg_custom1;
	  }   
	  
     /**
	   * 属性sg_custom1的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_custom1 String
	   */
	public void setSg_custom1(String newSg_custom1) {
		
		sg_custom1 = newSg_custom1;
	 } 	  
       
        /**
	   * 属性sg_guardtime的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return Integer
	   */
	 public Integer getSg_guardtime() {
		 return sg_guardtime;
	  }   
	  
     /**
	   * 属性sg_guardtime的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_guardtime Integer
	   */
	public void setSg_guardtime(Integer newSg_guardtime) {
		
		sg_guardtime = newSg_guardtime;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性sg_remark的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_remark() {
		 return sg_remark;
	  }   
	  
     /**
	   * 属性sg_remark的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_remark String
	   */
	public void setSg_remark(String newSg_remark) {
		
		sg_remark = newSg_remark;
	 } 	  
       
        /**
	   * 属性sg_custom2的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_custom2() {
		 return sg_custom2;
	  }   
	  
     /**
	   * 属性sg_custom2的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_custom2 String
	   */
	public void setSg_custom2(String newSg_custom2) {
		
		sg_custom2 = newSg_custom2;
	 } 	  
       
        /**
	   * 属性sg_custom4的Getter方法.
	   *
	   * 创建日期:2010-7-16
	   * @return String
	   */
	 public String getSg_custom4() {
		 return sg_custom4;
	  }   
	  
     /**
	   * 属性sg_custom4的Setter方法.
	   *
	   * 创建日期:2010-7-16
	   * @param newSg_custom4 String
	   */
	public void setSg_custom4(String newSg_custom4) {
		
		sg_custom4 = newSg_custom4;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2010-7-16
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (sg_pk == null) {
			errFields.add(new String("sg_pk"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2010-7-16
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 	    return null;
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2010-7-16
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "sg_pk";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2010-7-16
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "tb_stockguard";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2010-7-16
	  */
	public TbStockguardVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2010-7-16
	 * @param newSg_pk 主键值
	 */
	 public TbStockguardVO(String newSg_pk) {
		
		// 为主键字段赋值:
		 sg_pk = newSg_pk;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-7-16
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return sg_pk;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2010-7-16
	  * @param newSg_pk  String    
	  */
	 public void setPrimaryKey(String newSg_pk) {
				
				sg_pk = newSg_pk; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2010-7-16
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "tb_stockguard"; 
				
	 } 
} 
