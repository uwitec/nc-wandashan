/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.to.pub;

import nc.ui.bd.b21.CurrtypeQuery;
import nc.vo.hg.to.pub.StockNumParaVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.pf.IGetBusiDataForFlow;
import nc.vo.pub.pf.IPfBillLock;
import nc.vo.pub.pf.IPfRetBackCheckInfo;
import nc.vo.scm.pub.IBillCode;
import nc.vo.scm.pub.IscmDefCheckVO;
import nc.vo.to.pub.tools.TOCurrArithTool;
import nc.vo.trade.checkrule.VOChecker;

/**
 * Bill的聚合VO类。
 *
 * 创建日期：(2004-3-2)
 * @author：
 */
public class BillVO extends AggregatedValueObject 
  implements IBillCode,IscmDefCheckVO, IPfRetBackCheckInfo,IPfBillLock,IGetBusiDataForFlow {

	//zhf add  增加八大参量 vo
	private StockNumParaVO[] m_stocks = null;
	
	private UFDouble nfund = null;
	private UFDouble nmny = null;
	private UFDouble nallfund = null;
	private UFDouble nallmny = null;
	
	public StockNumParaVO[] getStockNumInfor(){
		return m_stocks;
	}
	
	public void setStockNumInfor(StockNumParaVO[] stocks){
		m_stocks = stocks;
	}
	
	
	
//	zhf end
	
	public UFDouble getNfund() {
		return nfund;
	}

	public void setNfund(UFDouble nfund) {
		this.nfund = nfund;
	}

	public UFDouble getNmny() {
		return nmny;
	}

	public void setNmny(UFDouble nmny) {
		this.nmny = nmny;
	}

	public UFDouble getNallfund() {
		return nallfund;
	}

	public void setNallfund(UFDouble nallfund) {
		this.nallfund = nallfund;
	}

	public UFDouble getNallmny() {
		return nallmny;
	}

	public void setNallmny(UFDouble nallmny) {
		this.nallmny = nallmny;
	}



	private BillItemVO[] items = null;

	// 时间戳标示，现在暂未使用：
	long currentTimestamp; // 当前时间戳
	long initialTimestamp; // 从数据库读入时获得的时间戳
/**
 * BillVO 构造子注解。
 */
public BillVO() {
	super();
}
/**
 * <p>获得子表的VO数组。
 * <p>
 * 创建日期：(2004-3-2)
 * @return nc.vo.pub.CircularlyAccessibleValueObject[]
 */
public CircularlyAccessibleValueObject[] getChildrenVO() {

	return items;
}
/**
 * <p>获得母表的VO。
 * <p>
 * 创建日期：(2004-3-2)
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 */
public CircularlyAccessibleValueObject getParentVO() {

	return m_voHeader;
}
/**
 * <p>设置子表的VO数组。
 * <p>
 * 创建日期：(2004-3-2)
 * @param children nc.vo.pub.CircularlyAccessibleValueObject[]
 */
public void setChildrenVO(CircularlyAccessibleValueObject[] children) {

	items = (BillItemVO[]) children;
}
/**
 * <p>设置母表的VO。
 * <p>
 * 创建日期：(2004-3-2)
 * @param parent nc.vo.pub.CircularlyAccessibleValueObject
 */
public void setParentVO(CircularlyAccessibleValueObject parent) {

	m_voHeader = (BillHeaderVO) parent;
}
/**
 * 为表头VO设置主键，用来唯一定位对象。
 *
 * 创建日期：(2004-3-2)
 * @param cbillid String 
 */
public void setPrimaryKey(String cbillid) {

	((BillHeaderVO)getParentVO()).setCbillid(cbillid);
}

	private String m_sOperator = null;
	private BillHeaderVO m_voHeader = null;
	private String m_sIPAdress = null;
	/**
	 * 函数功能:
	 * 
	 * 参数:
	 * 
	 * 返回值:
	 * 
	 * 异常:
	 * 
	 * @return nc.vo.to.pub.BillVO
	 */
	public Object clone() {
		BillVO voNew = new BillVO();
		BillHeaderVO voHead = (BillHeaderVO) getHeaderVO().clone();
		voNew.setParentVO(voHead);
		if (getItemVOs() != null && getItemVOs().length > 0) {
			BillItemVO[] voaItem = new BillItemVO[getItemVOs().length];

			for (int i = 0; i < voaItem.length; i++) {
				voaItem[i] = (BillItemVO) getItemVOs()[i].clone();
			}

			voNew.setChildrenVO(voaItem);
		}

		return voNew;
	}

/**
 * 此处插入方法说明。
 * 创建日期：(2003-9-23 14:00:01)
 * @return nc.vo.pub.billcodemanage.BillCodeObjValueVO
 */
public nc.vo.pub.billcodemanage.BillCodeObjValueVO getBillCodeObjVO()
{
	nc.vo.pub.billcodemanage.BillCodeObjValueVO bcovo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();
	if (m_voHeader != null)
	{
		if (m_voHeader.getCtypecode().equals(ConstVO.m_sBillDRSQ) || m_voHeader.getCtypecode().equals(ConstVO.m_sBillYHJH))
		{
	        //是调入申请，入库公司是登陆公司
			bcovo.setAttributeValue("公司", m_voHeader.getCincorpid() == null ? "" : m_voHeader.getCincorpid());
			bcovo.setAttributeValue("库存组织", m_voHeader.getCincbid() == null ? "" : m_voHeader.getCincbid());
		}
		else
		{
	        //是订单，出库公司是登陆公司
	        bcovo.setAttributeValue("公司", m_voHeader.getCoutcorpid() == null ? "" : m_voHeader.getCoutcorpid());
	        bcovo.setAttributeValue("库存组织", m_voHeader.getCoutcbid() == null ? "" : m_voHeader.getCoutcbid());
		}
		
		bcovo.setAttributeValue("操作员", m_voHeader.getCoperatorid() == null ? "" : m_voHeader.getCoperatorid());
	}
	return bcovo;
}

/**
 * 单据类型。
 * 创建日期：(2003-9-23 14:00:24)
 * @return java.lang.String
 */
public java.lang.String getBillTypeCode() {
	if(m_voHeader!=null){
    String type = m_voHeader.getCtypecode();
    if(type.equals(ConstVO.m_sBillGSJDBDD)||
        type.equals(ConstVO.m_sBillSFDBDD)||
        type.equals(ConstVO.m_sBillZZJDBDD)||
        type.equals(ConstVO.m_sBillZZNDBDD)){
      return m_voHeader.getCbilltype();
    }
    else {
      return type;
    }
  }
	return null;
}

/**
 * 订单类型。
 * 创建日期：(2003-9-23 14:00:24)
 * @return java.lang.String
 */
public java.lang.String getOrderTypeCode() {
  if(m_voHeader!=null)
    return m_voHeader.getCtypecode();
  return null;
}

/**
 * <p>获得母表的VO。
 * <p>
 * 创建日期：(2004-3-2)
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 */
public BillHeaderVO getHeaderVO() {

	return m_voHeader;
}

/**
 * <p>获得子表的VO数组。
 * <p>
 * 创建日期：(2004-3-2)
 * @return nc.vo.pub.CircularlyAccessibleValueObject[]
 */
public BillItemVO[] getItemVOs() {

	return items;
}

/**
 * ******************************************
 *  功能：<|>
 * 
 *  创建日期：(2004-3-2 11:07:44)
 *  @param：
 * 
 *  @return：
 *  ******************************************
 * @return java.lang.String
 */
public java.lang.String getOperator() {
	return m_sOperator;
}
public String getIPAdress(){
	return m_sIPAdress;
}
public void setIPAdress(String newIPAdress){
	m_sIPAdress=newIPAdress;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2003-9-23 14:00:43)
 * @return java.lang.String
 */
public java.lang.String getPk_corp() 
{
	String sBillTypeCode = null;
	if(m_voHeader!=null)
	{
		if (m_voHeader.getCtypecode().equals(ConstVO.m_sBillDRSQ) || m_voHeader.getCtypecode().equals(ConstVO.m_sBillYHJH))
		{
	        //是调入申请，入库公司是登陆公司
	        sBillTypeCode = m_voHeader.getCincorpid();
		}
		else
		{
	        //是订单，出库公司是登陆公司
	       sBillTypeCode = m_voHeader.getCoutcorpid();
		}
	}
	return sBillTypeCode;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2003-12-5 13:26:25)
 * @return int
 */
public int getStatus() {
	if(m_voHeader!=null){
		if(m_voHeader.getStatus()==VOStatus.NEW||m_voHeader.getCbillid()==null)
			return VOStatus.NEW;
		else return m_voHeader.getStatus();
	}
	return -1;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2003-9-23 14:01:13)
 * @return java.lang.String
 */
public java.lang.String getVBillCode() {
	if(m_voHeader!=null&&m_voHeader.getVcode()!=null)
		return m_voHeader.getVcode();

	else return null;
}

/**
 * ******************************************
 *  功能：<|>
 * 
 *  创建日期：(2004-3-2 11:07:44)
 *  @param：
 * 
 *  @return：
 *  ******************************************
 * @param newOperator java.lang.String
 */
public void setOperator(java.lang.String newOperator) {
	m_sOperator = newOperator;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2003-9-23 14:01:50)
 * @param sBillCode java.lang.String
 */
public void setVBillCode(java.lang.String sBillCode) {

	if (m_voHeader != null)
		m_voHeader.setVcode(sBillCode);
}

	public Object[] getBodyDefValues(int iserial) {
		// TODO 自动生成方法存根
		if (items != null) {
			Object[] values = new Object[items.length];
			for (int i = 0, len = items.length; i < len; i++) {
				values[i] = items[i].getAttributeValue("vbdef" + iserial);
			}
			return values;
		}
		return null;
	}
public String getCbilltypedef() {
	// TODO 自动生成方法存根
	String ctypecode = getBillTypeCode();
	if(ConstVO.m_sBillDBDD.equals(ctypecode))
	{
		return "tobill";
	}
	return ctypecode;
}

	public Object getHeadDefValue(int iserial) {
		// TODO 自动生成方法存根
		if (m_voHeader != null)
			return m_voHeader.getAttributeValue("vdef" + iserial);
		return null;
	}
  
  /**
   * 设置单据反审后的审批人 
   * 
   * @param icheckState
   *            int
   */
  public void setCheckMan(java.lang.String approveid) {
    ((BillHeaderVO)getParentVO()).setCauditorid(approveid);
  }

  /**
   * 设置批语 
   * 
   * @param strCheckNote
   *            java.lang.String
   */
  public void setCheckNote(java.lang.String strCheckNote) {
  }

  /**
   * 设置审批状态 
   * 
   * @param icheckState
   *            int
   */
  public void setCheckState(int icheckState) {
    ((BillHeaderVO)getParentVO()).setFstatusflag(icheckState);
  }
  
  /*
   * 由于审批、弃审等操作为减少前后台的流量，只传递了pk、ts，需要平台进行锁单据
   * 此方法返回需要锁单据的pk
   */
  public String[] getLockIdAry() throws BusinessException {
    //返回表头pk，进行锁单据、ts校验
    if(m_voHeader!=null&&m_voHeader.getPrimaryKey()!=null&&m_voHeader.getPrimaryKey().length()>0)
      return new String[]{m_voHeader.getPrimaryKey()};
    return null;
  }
  
  //****************************审批流界面显示金额**********************************************begin
  public UFDouble getPfAssMoney() {
    //审批流使用，调拨订单没有辅币金额
    return null;
  }
  public String getPfCurrency() {
    //审批流使用
    return getHeaderVO().getCoutcurrtype();
  }
  public UFDouble getPfLocalMoney() {
    //审批流使用
    String csrccurrtype = getHeaderVO().getCoutcurrtype();
    String coutcorpid = getHeaderVO().getCoutcorpid();
    if(VOChecker.isEmpty(coutcorpid)){
      return null;
    }
    UFDouble mny = null;
    try {
      TOCurrArithTool currDmo = new TOCurrArithTool(coutcorpid);
      String cdstCurrtype = currDmo.getLocalCurrPK();
      //本币精度
      Integer currBusiDigit = CurrtypeQuery.getInstance().getCurrtypeVO(cdstCurrtype).getCurrbusidigit();
      
      mny = currDmo.getAmountByOpp(csrccurrtype, cdstCurrtype,
          getPfMoney(), null, getHeaderVO().getDbilldate().toString(),currBusiDigit);
    }
    catch (Exception e) {
      Log.error(e);
    }
    return mny;
  }
  public UFDouble getPfMoney() {
    //审批流使用
    BillItemVO[] items = getItemVOs();
    UFDouble mny = UFDouble.ZERO_DBL;
    if(!VOChecker.isEmpty(items)){
      for(BillItemVO item : items){
        if(!VOChecker.isEmpty(item.getNmny())){
          mny = mny.add(item.getNmny());
        }
      }
    }
    return mny;
  }
//**************************************************************************end

}